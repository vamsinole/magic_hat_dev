[{"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/index.tsx":"1","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/reportWebVitals.ts":"2","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/App.tsx":"3","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/Home.tsx":"4","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/candy-machine.ts":"5","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/config.ts":"6","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/components/menu.tsx":"7","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/components/progress-bar.tsx":"8","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/utils.ts":"9","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/connection.tsx":"10","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/index.tsx":"11","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/reportWebVitals.ts":"12","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/App.tsx":"13","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/Home.tsx":"14","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/candy-machine.ts":"15","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/config.ts":"16","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/components/menu.tsx":"17","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/components/progress-bar.tsx":"18","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/utils.ts":"19","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/connection.tsx":"20","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/index.tsx":"21","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/reportWebVitals.ts":"22","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/App.tsx":"23","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/Home.tsx":"24","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/candy-machine.ts":"25","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/config.ts":"26","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/components/menu.tsx":"27","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/utils.ts":"28","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/connection.tsx":"29"},{"size":457,"mtime":1656082795408,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":1655663364581,"results":"32","hashOfConfig":"31"},{"size":2273,"mtime":1656085674526,"results":"33","hashOfConfig":"31"},{"size":61297,"mtime":1656258393557,"results":"34","hashOfConfig":"31"},{"size":19141,"mtime":1656242793941,"results":"35","hashOfConfig":"31"},{"size":1984,"mtime":1656243432750,"results":"36","hashOfConfig":"31"},{"size":1824,"mtime":1656084842576,"results":"37","hashOfConfig":"31"},{"size":724,"mtime":1656084524897,"results":"38","hashOfConfig":"31"},{"size":3204,"mtime":1655674375630,"results":"39","hashOfConfig":"31"},{"size":14608,"mtime":1656081520588,"results":"40","hashOfConfig":"31"},{"size":457,"mtime":1656260487843,"results":"41","hashOfConfig":"42"},{"size":425,"mtime":1656260472131,"results":"43","hashOfConfig":"42"},{"size":2273,"mtime":1656337464396,"results":"44","hashOfConfig":"42"},{"size":84624,"mtime":1656373641944,"results":"45","hashOfConfig":"42"},{"size":19184,"mtime":1656317249751,"results":"46","hashOfConfig":"42"},{"size":2766,"mtime":1656374010625,"results":"47","hashOfConfig":"42"},{"size":1824,"mtime":1656260487841,"results":"48","hashOfConfig":"42"},{"size":724,"mtime":1656260487841,"results":"49","hashOfConfig":"42"},{"size":3204,"mtime":1656260472131,"results":"50","hashOfConfig":"42"},{"size":14608,"mtime":1656260487843,"results":"51","hashOfConfig":"42"},{"size":457,"mtime":1656405527919,"results":"52","hashOfConfig":"53"},{"size":425,"mtime":1656405527920,"results":"54","hashOfConfig":"53"},{"size":2279,"mtime":1656417184813,"results":"55","hashOfConfig":"53"},{"size":87522,"mtime":1656424942845,"results":"56","hashOfConfig":"53"},{"size":19184,"mtime":1656415312277,"results":"57","hashOfConfig":"53"},{"size":1155993,"mtime":1656424500941,"results":"58","hashOfConfig":"53"},{"size":1824,"mtime":1656405527918,"results":"59","hashOfConfig":"53"},{"size":3204,"mtime":1656405527920,"results":"60","hashOfConfig":"53"},{"size":14608,"mtime":1656405527918,"results":"61","hashOfConfig":"53"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"p2nglc",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"129d8j0",{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":82,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"87"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"87"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"1j5vlon",{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"111"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"111"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/index.tsx",[],["129","130"],"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/reportWebVitals.ts",[],"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/App.tsx",[],"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/Home.tsx",["131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/candy-machine.ts",["182"],"import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, Token } from '@solana/spl-token';\nimport { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\nimport idlMagicHat from './magic_hat.json';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken\n} from './utils';\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, TOKEN_PROGRAM_ID, MAGIC_HAT_ID } from './config';\n// import idl from \"./wallet_whitelist.json\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\nconst MAGIC_HAT_PROGRAM_V2_ID = new anchor.web3.PublicKey(\n  '9BA5zgC9wQ3k7ty2Xkpif31Xu4ojbREBettAN3Hg44Bp',\n);\n\ninterface MagicHatState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface MagicHatAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: MagicHatState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection && connection._signatureSubscriptions && connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getMagicHatState = async (\n  anchorWallet: anchor.Wallet,\n  magicHatId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<MagicHatAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl:any = idlMagicHat;\n\n  const program = new anchor.Program(idl, MAGIC_HAT_PROGRAM_V2_ID, provider);\n\n  const state: any = await program.account.magicHat.fetch(magicHatId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  const presale =\n    state.data.whitelistMintSettings &&\n    state.data.whitelistMintSettings.presale &&\n    (!state.data.goLiveDate ||\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n\n  return {\n    id: magicHatId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        (presale ||\n          state.data.goLiveDate?.toNumber() < new Date().getTime() / 1000) &&\n        (state.data.endSettings\n          ? state.data.endSettings.endSettingType.date\n            ? state.data.endSettings.number.toNumber() >\n              new Date().getTime() / 1000\n            : itemsRedeemed < state.data.endSettings.number.toNumber()\n          : true),\n      isPresale: presale,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMagicHatCreator = async (\n  magicHat: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('magic_hat'), magicHat.toBuffer()],\n    MAGIC_HAT_PROGRAM_V2_ID,\n  );\n};\n\nexport const mintOneToken = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet: any,\n  id:any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n\n  const MAGIC_HAT_ID = magicHat.id;\n  console.log(MAGIC_HAT_ID.toBase58());\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n\n  instructions.push(\n    await magicHat.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        magicHatCreator,\n        payer: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const mintOneTokenWL = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet_pda: any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n  console.log(MAGIC_HAT_ID.toBase58());\n  instructions.push(\n    await magicHat.program.instruction.wlMintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        walletWhitelist: wallet_pda,\n        magicHatCreator: magicHatCreator,\n        whitelistedAddress: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/config.ts",[],"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/components/menu.tsx",["183"],"import { useState } from \"react\";\nimport Discord from \"../assets/discord.png\";\nimport Twitter from \"../assets/twitter_copy.png\";\nimport RightArrow from \"../assets/right_arrow_menu.png\";\nimport \"../App.css\";\n\nconst MenuContent = (props: any) => {\n  const [items] = useState([\"VAULT\", \"TEAM\", \"ALPHA\", \"STAKE\"]);\n\n  return (\n    <div className=\"menu\">\n      {items.map((i) => (\n        <div className=\"menu-item\" key={i}>\n          <a\n            className=\"menu-item-inside\"\n            onClick={() => props.closeCallback(i)}\n            target=\"_blank\"\n          >\n            {i}{\" \"}\n            <span className=\"right-arrow-menu\">\n              <img alt=\"Right-arrow\" src={RightArrow} />\n            </span>\n          </a>\n        </div>\n      ))}\n      <div className=\"menu-item m-t-15\">\n        <a\n          className=\"menu-item-inside\"\n          href=\"https://secret-alpha.gitbook.io/glitch/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          Whitepaper{\" \"}\n          <span className=\"right-arrow-menu\">\n            <img alt=\"Right-arrow\" src={RightArrow} />\n          </span>\n        </a>\n      </div>\n      <div className=\"social-media-mobile\">\n        <a\n          href=\"https://twitter.com/SecretAlphaLabs\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          <img alt=\"Twitter\" className=\"social-icons-mobile\" src={Twitter} />\n        </a>\n        <a\n          href=\"https://discord.com/invite/SecretAlpha\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          <img alt=\"Discord\" className=\"social-icons-mobile\" src={Discord} />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default MenuContent;\n","/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/components/progress-bar.tsx",[],"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/utils.ts",[],"/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/connection.tsx",[],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/index.tsx",[],["184","185"],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/reportWebVitals.ts",[],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/App.tsx",[],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/Home.tsx",["186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { PublicKey, SystemProgram, LAMPORTS_PER_SOL, sendAndConfirmTransaction, Transaction } from \"@solana/web3.js\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport MobileMenu from \"./assets/mobile_menu.png\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport TypeAnimation from \"react-type-animation\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  MagicHatAccount,\n  getMagicHatState,\n  mintOneToken,\n  mintOneTokenWL,\n} from \"./candy-machine\";\nimport { AlertState } from \"./utils\";\nimport Twitter from \"./assets/twitter_copy.png\";\nimport Discord from \"./assets/discord.png\";\nimport LogoWhite from \"./assets/Logowhite.png\";\nimport LogoWhiteCropped from \"./assets/Logowhite_cropped.png\";\nimport KatanaImage from \"./assets/katana.png\";\nimport PizzaImage from \"./assets/pizza.png\";\nimport FanSpinning from \"./assets/fan_spinning.mp4\";\nimport Sopha from \"./assets/sopha.png\";\nimport Beanbag from \"./assets/bean_bag.png\";\nimport SophaSider from \"./assets/sopha_sider.png\";\nimport MenuContent from \"./components/menu\";\nimport CloseAlpha from \"./assets/turn-back.png\";\nimport AlphaScroll from \"./assets/down-arrow.png\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport Dev1 from \"./assets/dev1.png\";\nimport Dev2 from \"./assets/dev2.png\";\nimport Sashi from \"./assets/sashi.png\";\nimport Wallace from \"./assets/wallace.png\";\nimport Gabriel from \"./assets/gabriel.png\";\nimport Kaizer from \"./assets/kaizer.png\";\nimport Walter from \"./assets/walter.png\";\nimport Yogantar from \"./assets/yogantar.png\";\nimport {\n  MAGIC_HAT_ID,\n  pdaSeed,\n  pdaWhitelistSeed,\n  MAGIC_HAT_CREATOR,\n  TOKEN_METADATA_PROGRAM_ID,\n  MAGIC_HAT_CREATOR_KEYPAIR,\n  WHITELIST_WALLETS,\n  GOG_TIME,\n  WL_TIME,\n  PUBLIC_TIME,\n  COMMUNITY_TIME,\n  GOG_PRICE,\n  OG_PRICE,\n  WL_PRICE,\n  PUBLIC_PRICE\n} from \"./config\";\nimport idl from \"./magic_hat.json\";\nimport { BN, Program } from \"@project-serum/anchor\";\nimport Borsh from \"@project-serum/borsh\";\nimport ProgressBar from \"./components/progress-bar\";\nimport { u64 } from \"@solana/spl-token\";\nimport InfoMint from \"./assets/mint_info.png\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\nconst MAGIC_HAT_PROGRAM_V2_ID = new anchor.web3.PublicKey(\n  \"AGydXrbh2V9RH3h3cDzpws51tRDs2HbTtUXnCkq58bwH\"\n);\n\nconst responsive = {\n  superLargeDesktop: {\n    breakpoint: { max: 4000, min: 3000 },\n    items: 5,\n  },\n  desktop: {\n    breakpoint: { max: 3000, min: 1024 },\n    items: 3,\n  },\n  tablet: {\n    breakpoint: { max: 1024, min: 464 },\n    items: 2,\n  },\n  mobile: {\n    breakpoint: { max: 464, min: 0 },\n    items: 1,\n  },\n};\n\ninterface WhiteListType {\n  whitelist_type: string;\n  number_of_whitelist_spots_total: any;\n  mint_price: any;\n  start_time: any;\n}\n\ninterface WhitelistSchedule {\n  wl_start_time_3: WhiteListType;\n  wl_start_time_2: WhiteListType;\n  wl_start_time_1: WhiteListType;\n  public_mint_start_time: WhiteListType;\n}\n\ninterface WhitelistConfig {\n  whitelist_schedule: WhitelistSchedule;\n  magic_hat_creator: any;\n  bump: any;\n}\n\nexport interface HomeProps {\n  magicHatId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  // const url = window.location.origin;\n  // if (!url.includes('https')) {\n  //   if (url.split(':')[2]) {\n  //     var loc:any = 'https:' + url.split(':')[1] + ':' +  + url.split(':')[2];\n  //     window.location = loc;\n  //   }\n  //   else {\n  //     var loc:any = 'https:' + url.split(':')[1];\n  //     window.location = loc;\n  //   }\n  // }\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [magicHat, setMagicHat] = useState<MagicHatAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [classNameState, setClassNameState] = useState<string>(\n    \"main-bg-after-door-open black-bg\"\n  );\n  const [isMobile, setIsMobile] = useState(false);\n  const [logoLoading] = useState(false);\n  const [logoAlphaLoading, setLogoAlphaLoading] = useState(true);\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [showMessage, setShowMessage] = useState(false);\n  const [messageText, setMessageText] = useState(\"\");\n  const [showAlphaRoom, setShowAlphaRoom] = useState(false);\n  const [showTeamRoom, setShowTeamRoom] = useState(false);\n  const [showFirstPhil, setShowFirstPhil] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [showMobileDoor, setShowMobileDoor] = useState(false);\n  const [mobileDoor, setMobileDoor] = useState(null);\n  const [showTeamInfo, setShowTeamInfo] = useState(false);\n  const [shouldMint, setShouldMint] = useState(false);\n  const [teamInfoMember, setTeamInfoMember] = useState<any>(null);\n  const [whitelists, setWhitelists] = useState<any>(null);\n  const [completed, setCompleted] = useState(0);\n  const [mintCount, setMintCount] = useState(1);\n  const [currentWl, setCurrentWl] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [alreadyCalled, setAlreadyCalled] = useState(false);\n  const [showMintInfo, setShowMintInfo] = useState(false);\n  const [mintSuccessMessage, setMintSuccessMessage] = useState(false);\n  const [mintResponse, setMintResponse] = useState(\"\");\n  const [mintResponseType, setMintResponseType] = useState(\"\");\n  const [maxCount, setMaxCount] = useState<number>(3);\n  const [setBars] = useState([\n    2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,\n    42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,\n    80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,\n  ]);\n\n  const wallet = useWallet();\n  // wallet.connect();\n\n  const anchorWallet = useMemo(() => {\n    // wallet.connect();\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshMagicHatState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.magicHatId) {\n      try {\n        const cndy = await getMagicHatState(\n          anchorWallet,\n          props.magicHatId,\n          props.connection\n        );\n        console.log(JSON.stringify(cndy.state, null, 4));\n        const k: any = cndy?.state.itemsRedeemed.toString()!;\n        const l: any = cndy?.state.itemsAvailable.toString()!;\n        const completed_c: any = ((parseInt(k) / parseInt(l)) * 100).toFixed(0);\n        setCompleted(completed_c);\n        setMagicHat(cndy);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.magicHatId, props.connection]);\n\n  const onMint = async (id: number) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && magicHat?.program && wallet.publicKey) {\n        const mintTxId: any = [];\n        console.log(magicHat.id.toBase58());\n        mintTxId[0] = (\n          await mintOneToken(magicHat, wallet.publicKey, wallet, id)\n        )[0];\n        if (id >= 2) {\n          mintTxId[1] = (\n            await mintOneToken(magicHat, wallet.publicKey, wallet, id)\n          )[0];\n        }\n        if (id >= 3) {\n          mintTxId[2] = (\n            await mintOneToken(magicHat, wallet.publicKey, wallet, id)\n          )[0];\n        }\n        let status: any = [];\n        // const wallet_t:any = wallet;\n        // const provider = new anchor.Provider(props.connection, wallet_t, anchor.Provider.defaultOptions())\n        // const meta_idl:any = anchor.Program.fetchIdl(TOKEN_METADATA_PROGRAM_ID, provider);\n        // const [metadata_pda] = await PublicKey.findProgramAddress(\n        //   [Buffer.from('metadata'),\n        //   TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        //   mint.publicKey.toBuffer(),],\n        //   MAGIC_HAT_PROGRAM_V2_ID\n        // )\n        // const program = new anchor.Program(meta_idl, TOKEN_METADATA_PROGRAM_ID, provider);\n        // const state: any = await program.account.magicHat.fetch(magicHatId);\n        // console.log(state.authority.toBase58());\n        if (mintTxId[0]) {\n          status[0] = await awaitTransactionSignatureConfirmation(\n            mintTxId[0],\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n        if (mintTxId[1]) {\n          status[1] = await awaitTransactionSignatureConfirmation(\n            mintTxId[1],\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n        if (mintTxId[2]) {\n          status[2] = await awaitTransactionSignatureConfirmation(\n            mintTxId[2],\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n        if (status[0] && !status[0].err && id >= 1) {\n          // setAlertState({\n          //   open: true,\n          //   message: \"Congratulations! Mint succeeded!\",\n          //   severity: \"success\",\n          // });\n          setMintSuccessMessage(true);\n          setMintResponseType(\"success\");\n          setMintResponse(\"YOU'VE SHHUCCESSFULLY MINTED A HOODRAT!\");\n          setTimeout(function () {\n            setMintSuccessMessage(true);\n            setMintSuccessMessage(false);\n            setMintResponseType(\"\");\n            setMintResponse(\"\");\n          }, 6000);\n        } else {\n          setMintSuccessMessage(true);\n          setMintResponseType(\"error\");\n          setMintResponse(\"Mint failed! Please try again!\");\n          setTimeout(function () {\n            setMintSuccessMessage(true);\n            setMintSuccessMessage(false);\n            setMintResponseType(\"\");\n            setMintResponse(\"\");\n          }, 6000);\n          // setAlertState({\n          //   open: true,\n          //   message: \"Mint failed! Please try again!\",\n          //   severity: \"error\",\n          // });\n        }\n        if (id >= 2) {\n          if (status[1] && !status[1].err) {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Congratulations! Mint succeeded!\",\n            //   severity: \"success\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"success\");\n            setMintResponse(\"YOU'VE SHHUCCESSFULLY MINTED A HOODRAT!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          } else {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Mint failed! Please try again!\",\n            //   severity: \"error\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"error\");\n            setMintResponse(\"Mint failed! Please try again!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          }\n        }\n        if (id >= 3) {\n          if (status[2] && !status[2].err) {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Congratulations! Mint succeeded!\",\n            //   severity: \"success\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"success\");\n            setMintResponse(\"YOU'VE SHHUCCESSFULLY MINTED A HOODRAT!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          } else {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Mint failed! Please try again!\",\n            //   severity: \"error\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"error\");\n            setMintResponse(\"Mint failed! Please try again!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          }\n        }\n      }\n    } catch (error: any) {\n      console.log(error);\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          setMintResponse(\"Transaction Timeout! Please try again.\");\n        } else if (error.message.indexOf(\"0x137\")) {\n          setMintResponse(`SOLD OUT!`);\n        } else if (error.message.indexOf(\"0x135\")) {\n          setMintResponse(\n            `Insufficient funds to mint. Please fund your wallet.`\n          );\n        }\n      } else {\n        if (error.code === 311) {\n          setMintResponse(`SOLD OUT!`);\n          window.location.reload();\n        } else if (error.code === 312) {\n          setMintResponse(`Minting period hasn't started yet.`);\n        }\n      }\n      setMintResponseType(\"error\");\n      setMintSuccessMessage(true);\n      setTimeout(function () {\n        setMintResponseType(\"\");\n        setMintSuccessMessage(false);\n        setMintResponse(\"\");\n      }, 6000);\n      // setAlertState({\n      //   open: true,\n      //   message,\n      //   severity: \"error\",\n      // });\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const onMintWL = async (id: any, wallet_pda: any) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && magicHat?.program && wallet.publicKey) {\n        const mintTxId: any = [];\n        console.log(magicHat.id.toBase58());\n        mintTxId[0] = (\n          await mintOneTokenWL(magicHat, wallet.publicKey, wallet_pda)\n        )[0];\n        if (id >= 2) {\n          mintTxId[1] = (\n            await mintOneTokenWL(magicHat, wallet.publicKey, wallet_pda)\n          )[0];\n        }\n        if (id >= 3) {\n          mintTxId[2] = (\n            await mintOneTokenWL(magicHat, wallet.publicKey, wallet_pda)\n          )[0];\n        }\n        let status: any = [];\n        if (mintTxId[0]) {\n          status[0] = await awaitTransactionSignatureConfirmation(\n            mintTxId[0],\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n        if (mintTxId[1]) {\n          status[1] = await awaitTransactionSignatureConfirmation(\n            mintTxId[1],\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n        if (mintTxId[2]) {\n          status[2] = await awaitTransactionSignatureConfirmation(\n            mintTxId[2],\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n        if (status[0] && !status[0].err && id >= 1) {\n          // setAlertState({\n          //   open: true,\n          //   message: \"Congratulations! Mint succeeded!\",\n          //   severity: \"success\",\n          // });\n          setMintSuccessMessage(true);\n          setMintResponseType(\"success\");\n          setMintResponse(\"YOU'VE SHHUCCESSFULLY MINTED A HOODRAT!\");\n          setTimeout(function () {\n            setMintSuccessMessage(true);\n            setMintSuccessMessage(false);\n            setMintResponseType(\"\");\n            setMintResponse(\"\");\n          }, 6000);\n        } else {\n          // setAlertState({\n          //   open: true,\n          //   message: \"Mint failed! Please try again!\",\n          //   severity: \"error\",\n          // });\n          setMintSuccessMessage(true);\n          setMintResponseType(\"error\");\n          setMintResponse(\"Mint failed! Please try again!\");\n          setTimeout(function () {\n            setMintSuccessMessage(true);\n            setMintSuccessMessage(false);\n            setMintResponseType(\"\");\n            setMintResponse(\"\");\n          }, 6000);\n        }\n        if (id >= 2) {\n          if (status[1] && !status[1].err) {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Congratulations! Mint succeeded!\",\n            //   severity: \"success\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"success\");\n            setMintResponse(\"YOU'VE SHHUCCESSFULLY MINTED A HOODRAT!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          } else {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Mint failed! Please try again!\",\n            //   severity: \"error\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"error\");\n            setMintResponse(\"Mint failed! Please try again!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          }\n        }\n        if (id >= 3) {\n          if (status[2] && !status[2].err) {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Congratulations! Mint succeeded!\",\n            //   severity: \"success\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"success\");\n            setMintResponse(\"YOU'VE SHHUCCESSFULLY MINTED A HOODRAT!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          } else {\n            // setAlertState({\n            //   open: true,\n            //   message: \"Mint failed! Please try again!\",\n            //   severity: \"error\",\n            // });\n            setMintSuccessMessage(true);\n            setMintResponseType(\"error\");\n            setMintResponse(\"Mint failed! Please try again!\");\n            setTimeout(function () {\n              setMintSuccessMessage(true);\n              setMintSuccessMessage(false);\n              setMintResponseType(\"\");\n              setMintResponse(\"\");\n            }, 6000);\n          }\n        }\n      }\n    } catch (error: any) {\n      console.log(error);\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (error.InstructionError) {\n        if (\n          error.InstructionError[1].Custom &&\n          error.InstructionError[1].Custom == 6042\n        ) {\n          setMintResponse(\"Whitelist has not started yet!!!\");\n        } else if (\n          error.InstructionError[1].Custom &&\n          error.InstructionError[1].Custom == 6043\n        ) {\n          setMintResponse(\"No whitelist spots left\");\n        } else if (\n          error.InstructionError[1].Custom &&\n          error.InstructionError[1].Custom == 2001\n        ) {\n          setMintResponse(\"Please try again later\");\n        }\n      } else if (!error.msg) {\n        if (!error.message) {\n          setMintResponse(\"Transaction Timeout! Please try again.\");\n        } else if (error.message.indexOf(\"0x137\")) {\n          setMintResponse(`SOLD OUT!`);\n        } else if (error.message.indexOf(\"0x135\")) {\n          setMintResponse(\n            `Insufficient funds to mint. Please fund your wallet.`\n          );\n        }\n      } else {\n        if (error.code === 311) {\n          setMintResponse(`SOLD OUT!`);\n          window.location.reload();\n        } else if (error.code === 312) {\n          setMintResponse(`Minting period hasn't started yet.`);\n        }\n      }\n      setMintResponseType(\"error\");\n      setMintSuccessMessage(true);\n      setTimeout(function () {\n        setMintResponseType(\"\");\n        setMintSuccessMessage(false);\n        setMintResponse(\"\");\n      }, 6000);\n      // setAlertState({\n      //   open: true,\n      //   message,\n      //   severity: \"error\",\n      // });\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const getWhitelistAccounts = async () => {\n    if (\n      wallet &&\n      wallet.publicKey &&\n      wallet.publicKey.toBase58().length > 0 &&\n      !shouldMint &&\n      whitelists != null\n    ) {\n      const whitelistAccounts = Object.keys(whitelists);\n      console.log(whitelists);\n      if (whitelistAccounts && whitelistAccounts.length > 0) {\n        for (let index = 0; index < whitelistAccounts.length; index++) {\n          const element = whitelistAccounts[index];\n          if (wallet.publicKey?.toBase58() === element) {\n            if (\n              whitelists[element].numberOfWhitelistSpotsPerUser.toNumber() > 0\n            ) {\n              setShouldMint(true);\n              break;\n            } else {\n              setShouldMint(true);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  const decreaseWhitelistCount = async (count: any) => {\n    var obj: any = {\n      wallet: wallet.publicKey?.toBase58(),\n      count: count,\n    };\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        console.log(JSON.parse(JSON.parse(this.responseText).data));\n        setWhitelists(JSON.parse(JSON.parse(this.responseText).data));\n      }\n    });\n    xhr.open(\"POST\", \"https://www.secretalpha.io:8000/decreaseCount\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.send(JSON.stringify(obj));\n  };\n\n  const getWhitelists = async () => {\n    if (whitelists === null && wallet && wallet.publicKey) {\n      try {\n        const walletProgram = await getProgram();\n        const [whitelist_pda, bump] = await PublicKey.findProgramAddress(\n          [\n            Buffer.from(pdaSeed),\n            wallet.publicKey!.toBuffer(),\n            MAGIC_HAT_CREATOR.toBuffer(),\n          ],\n          MAGIC_HAT_PROGRAM_V2_ID\n        );\n        if (!alreadyCalled) {\n          setAlreadyCalled(true);\n          setInterval(function () {\n            getTimeToMInt();\n          }, 1000);\n        }\n\n        const whitelistAccounts: any =\n          await walletProgram.account.walletWhitelist.fetch(whitelist_pda);\n        console.log(whitelistAccounts);\n        if (whitelistAccounts) {\n          let wl_type = Object.keys(whitelistAccounts.whitelistType)[0];\n          if (\n            wl_type &&\n            (wl_type == \"three\" ||\n              wl_type == \"two\" ||\n              wl_type == \"one\" ||\n              wl_type == \"four\")\n          ) {\n            let spots =\n              whitelistAccounts.numberOfWhitelistSpotsPerUser.toNumber();\n            if (spots == 0) {\n              spots = 1;\n              setMaxCount(5);\n            }\n            setShouldMint(true);\n            setMintCount(spots);\n          } else {\n            setMaxCount(1);\n            setMintCount(1);\n          }\n        } else {\n          setMaxCount(1);\n          setMintCount(1);\n        }\n        setWhitelists(whitelistAccounts);\n      } catch (error) {\n        setShouldMint(true);\n        setMaxCount(5);\n        setMintCount(1);\n      }\n      // var xhr = new XMLHttpRequest();\n      // xhr.addEventListener(\"readystatechange\", function () {\n      //   if (this.readyState === 4) {\n      //     setWhitelists(JSON.parse(this.responseText));\n      //   }\n      // });\n      // xhr.open(\"GET\",\n      //   \"https://www.secretalpha.io:8000/getInfo?wallet=\" +wallet.publicKey?.toBase58()\n      // );\n      // xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      // xhr.send();\n    }\n  };\n\n  const increaseMintCount = async () => {\n    if (currentWl == 'GOG + OG') {\n      setMaxCount(3);\n    } else if (currentWl == 'WL') {\n      setMaxCount(1);\n    } else if(currentWl == 'PUBLIC') {\n      setMaxCount(5);\n    }\n    if (mintCount >= maxCount) {\n    } else {\n      var k = mintCount + 1;\n      setMintCount(k);\n    }\n  };\n\n  const decreaseMintCount = async () => {\n    let l;\n    if (currentWl == 'GOG + OG') {\n      l = 3;\n    } else if (currentWl == 'WL') {\n      l = 1;\n    } else if(currentWl == 'PUBLIC') {\n      l = 5;\n    }\n    if (mintCount <= 1) {\n    } else {\n      var k = mintCount - 1;\n      setMintCount(k);\n    }\n  };\n\n  useEffect(() => {\n    // anchor.Wallet.C;\n    refreshMagicHatState();\n    var elem: HTMLElement | null = document.getElementById(\"main\");\n    if (elem!.clientWidth < 480) {\n      setIsMobile(true);\n    }\n    // console.log(currentWl);\n    getWhitelists();\n    setTimeout(function () {\n      setClassNameState(\"main-bg-after-door-open\");\n      setLogoAlphaLoading(false);\n      getWhitelistAccounts();\n      getTimeToMInt();\n    }, 900);\n  }, [\n    anchorWallet,\n    props.magicHatId,\n    props.connection,\n    refreshMagicHatState,\n    wallet,\n    whitelists,\n    shouldMint,\n    currentWl,\n  ]);\n\n  const showToaster = async (id: any) => {\n    if (id === 1) {\n      setShowMessage(true);\n      setMessageText(\"Wonder how that binary cheese tastes like?\");\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 2) {\n      setShowMessage(true);\n      setMessageText(\"Better if you let jesse handle that\");\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 3) {\n      setShowMessage(true);\n      setMessageText(\"WAGShhh, hide it back again\");\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 4) {\n      setShowMessage(true);\n      setMessageText(\"Holy shit this is comfy af\");\n\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 5) {\n      var arr = [\n        \"Patience is key\",\n        \"Shh...\",\n        \"Not yet, the time will come\",\n        \"Calm down man\",\n        \"It's locked, come back later.\",\n      ];\n      var k = Math.floor(Math.random() * 5);\n      // k = k - 1;\n      setShowMessage(true);\n      setMessageText(arr[k]);\n\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    }\n  };\n\n  const getProgram = async () => {\n    const wallet_t: any = wallet;\n    const provider = new anchor.Provider(\n      props.connection,\n      wallet_t,\n      anchor.Provider.defaultOptions()\n    );\n    const idl_o: any = idl;\n    return new Program(idl_o, MAGIC_HAT_PROGRAM_V2_ID, provider);\n  };\n\n  const showTeamInfoHover = async (id: any) => {\n    setShowTeamInfo(true);\n    setTeamInfoMember(id);\n  };\n\n  const closeMenu = async (id: any) => {\n    if (id && id === \"VAULT\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setClassNameState(\"main-vault-room-door\");\n    } else if (id && id === \"TEAM\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setShowTeamRoom(true);\n      setClassNameState(\"main-team-room-door\");\n    } else if (id && id === \"ALPHA\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setShowAlphaRoom(true);\n      setClassNameState(\"main-alpha-room-door\");\n    } else if (id && id === \"STAKE\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setClassNameState(\"main-stake-room-door\");\n    } else {\n      setMenuOpen(false);\n    }\n  };\n\n  const closeAlphaRoom = async () => {\n    var n = \"\";\n    if (mobileDoor === \"VAULT\") {\n      n = \"main-vault-room-door\";\n    } else if (mobileDoor === \"ALPHA\") {\n      n = \"main-alpha-room-door\";\n    } else if (mobileDoor === \"TEAM\") {\n      n = \"main-team-room-door\";\n    } else if (mobileDoor === \"STAKE\") {\n      n = \"main-stake-room-door\";\n    }\n    if (showMobileDoor) {\n      setClassNameState(n);\n      setLogoAlphaLoading(false);\n      setShowAlphaRoom(false);\n      setShowTeamRoom(false);\n      setShowMobileDoor(true);\n    } else {\n      setClassNameState(\"main-bg-after-door-open\");\n      setLogoAlphaLoading(false);\n      setShowAlphaRoom(false);\n      setShowTeamRoom(false);\n    }\n  };\n\n  const whiteListCheckMint = async () => {\n    try {\n      const walletProgram = await getProgram();\n      console.log(MAGIC_HAT_PROGRAM_V2_ID.toBase58());\n      console.log(await walletProgram.account.walletWhitelist.all());\n      const [wallet_pda, wallet_bump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(pdaSeed),\n          wallet.publicKey!.toBuffer(),\n          MAGIC_HAT_CREATOR!.toBuffer(),\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const whitelistAccounts: any =\n        await walletProgram.account.walletWhitelist.fetch(wallet_pda);\n      console.log(whitelistAccounts);\n      if (\n        wallet &&\n        wallet.publicKey &&\n        wallet.publicKey.toBase58().length > 0\n      ) {\n        var k = false;\n        if (mintCount > 1) {\n        } else {\n          setMintCount(1);\n        }\n        if (whitelistAccounts) {\n          let wl_type = Object.keys(whitelistAccounts.whitelistType)[0];\n          if (\n            wl_type &&\n            (wl_type == \"three\" ||\n              wl_type == \"two\" ||\n              wl_type == \"one\" ||\n              wl_type == \"four\")\n          ) {\n            let spots =\n              whitelistAccounts.numberOfWhitelistSpotsPerUser.toNumber();\n            if (spots >= mintCount) {\n              setShouldMint(true);\n              k = true;\n              onMintWL(mintCount, wallet_pda);\n            } else {\n              const date = new Date();\n              const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n              if (time >= PUBLIC_TIME) {\n                setShouldMint(true);\n                k = true;\n                onMint(mintCount);\n              }\n            }\n          }\n          if (!k) {\n            // setAlertState({\n            //   open: true,\n            //   message: \"You are not whitelisted for \" + mintCount + \" NFTs!!!\",\n            //   severity: \"error\",\n            // });\n            setShouldMint(true);\n            k = true;\n            onMint(mintCount);\n          }\n        }\n        // const element = whitelists;\n        // if (element.number > 0 && mintCount <= element.number) {\n        //   setShouldMint(true);\n        //   k = true;\n        //   onMint(mintCount);\n        // }\n      }\n    } catch (error) {\n      console.log(error);\n      setShouldMint(true);\n      k = true;\n      onMint(mintCount);\n      // setAlertState({\n      //   open: true,\n      //   message: \"You are not whitelisted for \" + mintCount + \" NFTs!!!\",\n      //   severity: \"error\",\n      // });\n    }\n  };\n\n  const getWhitelistConfig = async () => {\n    try {\n      const walletProgram = await getProgram();\n      const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n        [Buffer.from(pdaWhitelistSeed), wallet.publicKey!.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const whitelistConfigAccounts =\n        await walletProgram.account.whitelistConfig.fetch(whitelist_config_pda);\n      console.log(whitelistConfigAccounts);\n    } catch (error) {}\n  };\n\n  const createWhitelistConfig = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n        [Buffer.from(pdaWhitelistSeed), wallet.publicKey!.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      // let config_t:any = Borsh.struct(JSON.stringify(config));\n      const wallet_create = await walletProgram.rpc.createWhitelistConfig(\n        new BN(100),\n        new BN(0.01 * LAMPORTS_PER_SOL),\n        new BN(COMMUNITY_TIME),\n        new BN(369),\n        new BN(0.05 * LAMPORTS_PER_SOL),\n        new BN(GOG_TIME),\n        new BN(1380),\n        new BN(0.1 * LAMPORTS_PER_SOL),\n        new BN(GOG_TIME),\n        new BN(5000),\n        new BN(0.2 * LAMPORTS_PER_SOL),\n        new BN(WL_TIME),\n        {\n          accounts: {\n            whitelistConfig: whitelist_config_pda,\n            magicHatCreator: wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n        }\n      );\n      const whitelistConfigAccounts =\n        await walletProgram.account.whitelistConfig.fetch(whitelist_config_pda);\n      console.log(whitelistConfigAccounts);\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const updateWhitelistConfig = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n        [Buffer.from(pdaWhitelistSeed), wallet.publicKey!.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const wallet_create = await walletProgram.rpc.updateWhitelistConfig(\n        new BN(100),\n        new BN(GOG_PRICE * LAMPORTS_PER_SOL),\n        new BN(COMMUNITY_TIME),\n        new BN(369),\n        new BN(OG_PRICE * LAMPORTS_PER_SOL),\n        new BN(GOG_TIME),\n        new BN(1380),\n        new BN(WL_PRICE * LAMPORTS_PER_SOL),\n        new BN(GOG_TIME),\n        new BN(5000),\n        new BN(PUBLIC_PRICE * LAMPORTS_PER_SOL),\n        new BN(WL_TIME),\n        {\n          accounts: {\n            whitelistConfig: whitelist_config_pda,\n            magicHatCreator: wallet.publicKey,\n          },\n        }\n      );\n      const whitelistConfigAccounts =\n        await walletProgram.account.whitelistConfig.fetch(whitelist_config_pda);\n      console.log(whitelistConfigAccounts);\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const setCollection = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const mint = anchor.web3.Keypair.generate();\n      const [collection_pda] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"collection\"), MAGIC_HAT_ID.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const [metadata_pda] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.publicKey.toBuffer(),\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const [edition_pda] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.publicKey.toBuffer(),\n          Buffer.from(\"edition\"),\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const [collection_authority_pda] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.publicKey.toBuffer(),\n          Buffer.from(\"collection_authority\"),\n          wallet.publicKey?.toBuffer()!\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      // let config_t:any = Borsh.struct(JSON.stringify(config));\n      const wallet_create = await walletProgram.rpc.setCollection({\n        accounts: {\n          magicHat: MAGIC_HAT_ID,\n          authority: wallet.publicKey,\n          collectionPda: collection_pda,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n          metadata: metadata_pda,\n          mint: mint.publicKey,\n          edition: edition_pda,\n          collectionAuthorityRecord: collection_authority_pda,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        },\n      });\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const setCollectionDuringMint = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const mint = anchor.web3.Keypair.generate();\n      const [collection_pda] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"collection\"), MAGIC_HAT_ID.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const [metadata_pda] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.publicKey.toBuffer(),\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const [edition_pda] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.publicKey.toBuffer(),\n          Buffer.from(\"edition\"),\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      // let config_t:any = Borsh.struct(JSON.stringify(config));\n      const wallet_create = await walletProgram.rpc.setCollection({\n        accounts: {\n          magicHat: MAGIC_HAT_ID,\n          metadata: metadata_pda,\n          payer: wallet.publicKey,\n          collectionPda: collection_pda,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n          mint: mint.publicKey,\n          edition: edition_pda,\n          authority: wallet.publicKey,\n          collectionAuthorityRecord: wallet.publicKey,\n        },\n      });\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const createWhitelistAccountMultiple = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const whitelist_instructions:any = [];\n      const signers:any = anchor.web3.Keypair.fromSecretKey(MAGIC_HAT_CREATOR_KEYPAIR);\n      for (let index = 0; index < WHITELIST_WALLETS.length; index++) {\n        const element = WHITELIST_WALLETS[index];\n        const whitelisting_address = new PublicKey(element.wallet_address);\n        const [wallet_pda, wallet_bump] = await PublicKey.findProgramAddress(\n          [\n            Buffer.from(pdaSeed),\n            whitelisting_address.toBuffer(),\n            signers.publicKey!.toBuffer(),\n          ],\n          MAGIC_HAT_PROGRAM_V2_ID\n        );\n        const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n          [Buffer.from(pdaWhitelistSeed), signers.publicKey!.toBuffer()],\n          MAGIC_HAT_PROGRAM_V2_ID\n        );\n        whitelist_instructions.push(\n          await walletProgram.instruction.createWhitelistAccount(element.type,{\n              accounts: {\n                walletWhitelist: wallet_pda,\n                whitelistConfig: whitelist_config_pda,\n                whitelistedAddress: whitelisting_address,\n                magicHatCreator: signers.publicKey,\n                systemProgram: SystemProgram.programId,\n              },\n              signers: [signers]\n            }\n          )\n        );\n      }\n      let tr = new Transaction();\n      tr.add(whitelist_instructions);\n      const wallet_creation = await sendAndConfirmTransaction(\n        props.connection,\n        tr,\n        [signers]\n      )\n      console.log(wallet_creation);\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const createWhitelistAccount = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const whitelisting_address = new PublicKey(\n        \"UXX91ApKnrc1NyATPYqMJaDeJBQ3r9kSva1a4XTY3FD\"\n      );\n      const [wallet_pda, wallet_bump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(pdaSeed),\n          whitelisting_address.toBuffer(),\n          wallet.publicKey!.toBuffer(),\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n        [Buffer.from(pdaWhitelistSeed), wallet.publicKey!.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const wallet_create = await walletProgram.rpc.createWhitelistAccount(\n        \"Four\",\n        {\n          accounts: {\n            walletWhitelist: wallet_pda,\n            whitelistConfig: whitelist_config_pda,\n            whitelistedAddress: whitelisting_address,\n            magicHatCreator: wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n        }\n      );\n      const whitelistAccounts =\n        await walletProgram.account.walletWhitelist.fetch(wallet_pda);\n      console.log(whitelistAccounts);\n      // return { whitelistAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const deleteWhitelistAccount = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const whitelisting_address = new PublicKey(\n        \"7cinbPtGLyZWkmXUanWJd372gyPQwMTa9vgiJrACaSjW\"\n      );\n      const [wallet_pda, wallet_bump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(pdaSeed),\n          whitelisting_address.toBuffer(),\n          wallet.publicKey!.toBuffer(),\n        ],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const wallet_create = await walletProgram.rpc.deleteWhitelistAccount({\n        accounts: {\n          walletWhitelist: wallet_pda,\n          magicHatCreator: wallet.publicKey,\n        },\n      });\n      const whitelistAccounts =\n        await walletProgram.account.walletWhitelist.fetch(wallet_pda);\n      console.log(whitelistAccounts);\n      // return { whitelistAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  let currentWltype: String;\n\n  const getTimeToMInt = async () => {\n    const date = new Date();\n    const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n    let k = date.getTimezoneOffset();\n    if (time >= PUBLIC_TIME) {\n      setCurrentWl(\"PUBLIC\");\n      currentWltype = \"PUBLIC\";\n    } else if (time >= WL_TIME) {\n      setCurrentWl(\"WL\");\n      currentWltype = \"WL\";\n    } else if (time >= GOG_TIME) {\n      setCurrentWl(\"GOG + OG\");\n      currentWltype = \"GOG + OG\";\n    }\n    if (currentWltype == \"PUBLIC\") {\n      return \"\";\n    } else {\n      if (currentWltype == \"GOG + OG\") {\n        const date = new Date();\n        const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n        // if (WL_TIME >= time) {\n        //   setCurrentWl('WL');\n        //   return;\n        // }\n        var delta = Math.abs(time - WL_TIME);\n        if (delta <= 0) {\n          setCurrentWl(\"WL\");\n          currentWltype = \"WL\";\n        }\n        let days: any = Math.floor(delta / 86400);\n        delta -= days * 86400;\n        let hours: any = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n        let minutes: any = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n        let seconds: any = delta % 60;\n        // let hours:any = parseInt((((time) - WL_TIME) / 3600).toFixed(0));\n        // let minutes:any = parseInt(((((time) - WL_TIME) % 3600) / 60).toFixed(0));\n        // let seconds:any = parseInt((((time) - WL_TIME) % 60).toFixed(0));\n        hours = Math.abs(hours);\n        if (days < 10) {\n          days = \"0\" + days;\n        }\n        if (hours < 10) {\n          hours = \"0\" + hours;\n        }\n        minutes = Math.abs(minutes);\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n        seconds = Math.abs(seconds);\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n        setTime(hours + \":\" + minutes + \":\" + seconds);\n      } else if (currentWltype == \"WL\") {\n        const date = new Date();\n        const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n        var delta = Math.abs(time - PUBLIC_TIME);\n        if (delta <= 0) {\n          setCurrentWl(\"PUBLIC\");\n          currentWltype = \"PUBLIC\";\n        }\n        let days: any = Math.floor(delta / 86400);\n        delta -= days * 86400;\n        let hours: any = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n        let minutes: any = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n        let seconds: any = delta % 60;\n        hours = Math.abs(hours);\n        if (days < 10) {\n          days = \"0\" + days;\n        }\n        if (hours < 10) {\n          hours = \"0\" + hours;\n        }\n        minutes = Math.abs(minutes);\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n        seconds = Math.abs(seconds);\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n        setTime(hours + \":\" + minutes + \":\" + seconds);\n      } else if (currentWl == \"PUBLIC\") {\n        setTime(\"\");\n      } else {\n        const date = new Date();\n        const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n        // if (GOG_TIME > time) {\n        //   setCurrentWl('GOG + OG');\n        //   return;\n        // }\n        var delta = Math.abs(time - GOG_TIME);\n        if (delta <= 0) {\n          setCurrentWl(\"GOG + OG\");\n          currentWltype = \"GOG + OG\";\n        }\n        let days: any = Math.floor(delta / 86400);\n        delta -= days * 86400;\n        let hours: any = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n        let minutes: any = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n        let seconds: any = delta % 60;\n        // let hours:any = parseInt((((time) - WL_TIME) / 3600).toFixed(0));\n        // let minutes:any = parseInt(((((time) - WL_TIME) % 3600) / 60).toFixed(0));\n        // let seconds:any = parseInt((((time) - WL_TIME) % 60).toFixed(0));\n        hours = Math.abs(hours);\n        if (days < 10) {\n          days = \"0\" + days;\n        }\n        if (hours < 10) {\n          hours = \"0\" + hours;\n        }\n        minutes = Math.abs(minutes);\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n        seconds = Math.abs(seconds);\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n        setTime(hours + \":\" + minutes + \":\" + seconds);\n      }\n    }\n  };\n\n  const deleteWhitelistConfig = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n        [Buffer.from(pdaWhitelistSeed), wallet.publicKey!.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const wallet_create = await walletProgram.rpc.deleteWhitelistConfig({\n        accounts: {\n          whitelistConfig: whitelist_config_pda,\n          magicHatCreator: wallet.publicKey,\n        },\n      });\n      const whitelistConfigAccounts =\n        await walletProgram.account.whitelistConfig.fetch(whitelist_config_pda);\n      console.log(whitelistConfigAccounts);\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const withdrawFunds = async () => {\n    const walletProgram = await getProgram();\n    try {\n      const [collection_pda] = await PublicKey.findProgramAddress(\n        [Buffer.from(\"collection\"), MAGIC_HAT_ID.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      const wallet_create = await walletProgram.rpc.withdrawFunds({\n        accounts: {\n          magicHat: MAGIC_HAT_ID,\n          authority: wallet.publicKey,\n          collectionPda: collection_pda,\n        },\n      });\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const closeForm = async () => {\n    setClassNameState(\"main-bg-after-door-open\");\n    setShowAlphaRoom(false);\n    setShowTeamRoom(false);\n    setShowMobileDoor(false);\n  };\n\n  const handleMobileHome = async () => {\n    if (showAlphaRoom || showTeamRoom) {\n      closeAlphaRoom();\n    } else {\n      closeForm();\n    }\n  };\n\n  const openMenu = async () => {\n    setMenuOpen(true);\n  };\n\n  const openAlphaRoom = async () => {\n    if (isMobile) {\n      if (mobileDoor === \"ALPHA\") {\n        setClassNameState(\"main-bg-after-door-open black-bg\");\n        setLogoAlphaLoading(true);\n        setTimeout(function () {\n          setLogoAlphaLoading(false);\n          setClassNameState(\"alpha-room\");\n          setShowTeamRoom(false);\n          setShowAlphaRoom(true);\n          setShowMobileDoor(false);\n        }, 600);\n      } else if (mobileDoor === \"TEAM\") {\n        setClassNameState(\"main-bg-after-door-open black-bg\");\n        setLogoAlphaLoading(true);\n        setTimeout(function () {\n          setLogoAlphaLoading(false);\n          setClassNameState(\"team-room\");\n          setShowTeamRoom(true);\n          setShowAlphaRoom(false);\n          setShowMobileDoor(false);\n        }, 600);\n      } else {\n        var arr = [\n          \"Patience is key\",\n          \"Shh...\",\n          \"Not yet, the time will come\",\n          \"Calm down man\",\n          \"It's locked, come back later.\",\n        ];\n        const k: number | undefined = Math.floor(Math.random() * 5);\n        setShowMessage(true);\n        setMessageText(arr[k as number]);\n        setTimeout(function () {\n          setShowMessage(false);\n          setMessageText(\"\");\n        }, 900);\n      }\n    } else {\n      setClassNameState(\"main-bg-after-door-open black-bg\");\n      setLogoAlphaLoading(true);\n      setTimeout(function () {\n        setClassNameState(\"alpha-room\");\n        setLogoAlphaLoading(false);\n        setShowAlphaRoom(true);\n        setShowMobileDoor(false);\n      }, 600);\n    }\n  };\n\n  const hideTeamInfo = async () => {\n    setShowTeamInfo(false);\n    setTeamInfoMember(null);\n  };\n\n  const openTeamRoom = async () => {\n    setClassNameState(\"main-bg-after-door-open black-bg\");\n    setLogoAlphaLoading(true);\n    setTimeout(function () {\n      setClassNameState(\"team-room\");\n      setLogoAlphaLoading(false);\n      setShowTeamRoom(true);\n      setShowMobileDoor(false);\n    }, 600);\n  };\n\n  const scrollStory = async () => {\n    var elem: HTMLElement | null = document.getElementById(\"alpha-scroll\");\n    elem!.scrollTop = elem!.scrollTop + 180;\n  };\n\n  const closeUpdates = async () => {\n    setShowUpdates(false);\n  };\n\n  const openUpdates = async () => {\n    setShowUpdates(true);\n  };\n\n  const openFirstPhilAlphaRoom = async () => {\n    setShowFirstPhil(true);\n  };\n\n  const closeAlphaUpdates = async () => {\n    setShowFirstPhil(false);\n    setShowAlphaRoom(true);\n  };\n\n  // const getFreeSol = async () => {\n  //   var data = JSON.stringify({\n  //     \"jsonrpc\": \"2.0\",\n  //     \"id\": \"eb5c5883-8d38-44cb-a7af-22ab62343a75\",\n  //     \"method\": \"requestAirdrop\",\n  //     \"params\": [\n  //       anchorWallet?.publicKey.toBase58(),\n  //       1000000000\n  //     ]\n  //   });\n\n  //   var xhr = new XMLHttpRequest();\n  //   xhr.addEventListener(\"readystatechange\", function() {\n  //     if(this.readyState === 4) {\n  //       setAlertState({\n  //         open: true,\n  //         message: '1 Sol transferred!',\n  //         severity: 'success',\n  //       });\n  //     }\n  //   });\n\n  //   xhr.open(\"POST\", \"https://api.devnet.solana.com/\");\n  //   xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n  //   xhr.send(data);\n  // }\n\n  return (\n    <div id=\"main\" className={classNameState}>\n      <div id=\"wrapper\">\n        {isMobile && (\n          //  <CheeseburgerMenu isOpen={menuOpen} closeCallback={this.closeMenu.bind(this)}>\n          //   <MenuContent closeCallback={this.closeMenu.bind(this)} />\n          // </CheeseburgerMenu>\n          <div></div>\n        )}\n        {logoLoading && !logoAlphaLoading && (\n          <div className=\"logo-loader-parent\">\n            <img alt=\"Alpha-logo\" src={LogoWhite} className=\"pulse-animation\" />\n          </div>\n        )}\n        {!logoLoading &&\n          !showMobileDoor &&\n          !logoAlphaLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !isMobile && (\n            <div className=\"white-paper-div\">\n              <a\n                href=\"https://secret-alpha.gitbook.io/glitch/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className=\"white-paper-anchor\"\n              >\n                {\" \"}\n              </a>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div\n              // onClick={() => showToaster(5)}\n              onClick={withdrawFunds}\n              className=\"stake-room-div\"\n            ></div>\n          )}\n        {!logoLoading && isMobile && !logoAlphaLoading && !menuOpen && (\n          <div className=\"hamburger-menu\">\n            <img alt=\"Menu\" onClick={openMenu} src={MobileMenu} />\n          </div>\n        )}\n        {!logoLoading && isMobile && !logoAlphaLoading && (\n          <div className=\"alpha-home-logo\" onClick={handleMobileHome}>\n            <img alt=\"Alpha-Logo-Cropped\" src={LogoWhiteCropped} />\n          </div>\n        )}\n        {!logoLoading &&\n          isMobile &&\n          !logoAlphaLoading &&\n          showTeamRoom &&\n          !showMobileDoor && (\n            <div className=\"team-room-header\" onClick={handleMobileHome}>\n              <h2>TEAM</h2>\n            </div>\n          )}\n        {!logoLoading && isMobile && showMobileDoor && !logoAlphaLoading && (\n          <div className=\"mobile-room-div\" onClick={openAlphaRoom}></div>\n        )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div\n              onClick={() => showToaster(5)}\n              className=\"vault-room-div\"\n            ></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div\n              onClick={() => openAlphaRoom()}\n              className=\"alpha-room-div\"\n            ></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div onClick={() => openTeamRoom()} className=\"team-room-div\"></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div onClick={closeForm} className=\"alpha-logo-div\"></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showMobileDoor && (\n            <div className=\"hologram-div\">\n              {/* onClick={openUpdates} */}\n              <div className=\"smaller-holo-updates\">\n                {currentWl == \"\" && (\n                  <label className=\"typing-text\">Mint in {time}</label>\n                )}\n                {(\n                  // <div className=\"Top-connected red\">\n                  //   <WalletDialogButton className=\"Inside-Connect-btn\">\n                  //     Connect\n                  //   </WalletDialogButton>\n                  // </div>\n                  <div className=\"Top-connected green\">\n                    <button\n                      className={\n                        shouldMint ? \"Outside-Mint-btn\" : \"Outside-Mint-btn\"\n                      }\n                      onClick={openUpdates}\n                    >\n                      Mint\n                    </button>\n                  </div>\n                )}\n                {/* {wallet.connected && currentWl != \"\" && (\n                  <div className=\"Top-connected green\">\n                    <button\n                      className={\n                        shouldMint ? \"Outside-Mint-btn\" : \"Outside-Mint-btn\"\n                      }\n                      onClick={openUpdates}\n                    >\n                      Mint\n                    </button>\n                  </div>\n                )} */}\n              </div>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && <div className=\"hologram-setup-div\"></div>}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div>\n              <img\n                alt=\"Katana\"\n                src={KatanaImage}\n                onClick={createWhitelistAccountMultiple}\n                // onClick={() => showToaster(2)}\n                className=\"katana-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div>\n              <img\n                alt=\"Pizza\"\n                src={PizzaImage}\n                onClick={createWhitelistConfig}\n                // onClick={() => showToaster(1)}\n                className=\"pizza-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div>\n              <img\n                alt=\"Sopha\"\n                onClick={updateWhitelistConfig}\n                src={Sopha}\n                className=\"sopha-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div>\n              <div\n                className=\"bean-bag-click\"\n                onClick={() => showToaster(4)}\n              ></div>\n              <img\n                alt=\"Bean-bag\"\n                src={Beanbag}\n                className=\"bean-bag-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <video autoPlay={true} loop muted className=\"fan-spinning-image\">\n              <source\n                src={FanSpinning}\n                className=\"fan-spinning-image\"\n                type=\"video/mp4\"\n              ></source>\n              <source\n                src={FanSpinning}\n                className=\"fan-spinning-image\"\n                type=\"video/mp4\"\n              ></source>\n              Your browser does not support HTML5 video.\n            </video>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div onClick={setCollection} className=\"light-flicker-image\"></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <img\n              alt=\"Sider\"\n              src={SophaSider}\n              className=\"sopha-sider-image\"\n            ></img>\n          )}\n        {!logoLoading && showMessage && (\n          <div className=\"mesage-container\">\n            <label>{messageText}</label>\n          </div>\n        )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div className=\"social-media-links\">\n              <a\n                href=\"https://twitter.com/SecretAlphaLabs\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <img alt=\"Twitter\" className=\"social-icons\" src={Twitter} />\n              </a>\n              <a\n                href=\"https://discord.com/invite/SecretAlpha\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <img alt=\"Discord\" className=\"social-icons\" src={Discord} />\n              </a>\n            </div>\n          )}\n        {showAlphaRoom &&\n          !logoAlphaLoading &&\n          !logoLoading &&\n          !showMobileDoor &&\n          !isMobile && (\n            <div className=\"close-alpha-room\" onClick={closeAlphaRoom}>\n              <img alt=\"close\" src={CloseAlpha} />\n            </div>\n          )}\n        {showTeamRoom &&\n          !logoAlphaLoading &&\n          !logoLoading &&\n          !showMobileDoor &&\n          !isMobile && (\n            <div className=\"close-team-room\" onClick={closeAlphaRoom}>\n              <img alt=\"close\" src={CloseAlpha} />\n            </div>\n          )}\n        {showTeamRoom && !isMobile && (\n          <div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(1)}\n              className=\"first-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(2)}\n              className=\"second-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(3)}\n              className=\"third-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(4)}\n              className=\"fourth-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(5)}\n              className=\"fifth-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(6)}\n              className=\"sixth-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(7)}\n              className=\"seventh-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(8)}\n              className=\"eigth-team-member\"\n            ></div>\n          </div>\n        )}\n        {isMobile && menuOpen && (\n          <div className=\"cheeseburger-menu\">\n            <MenuContent closeCallback={closeMenu} />\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 1 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Gabriel</b>\n              <br />\n              <i>NFT artist</i>\n              <br />\n              Artist Extraordinaire. Delicately detailed.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 2 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Yogantar</b>\n              <br />\n              <i>Artist</i>\n              <br />\n              He sees, He makes, He thinks, He creates. No world is too far.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 3 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Wallace</b>\n              <br />\n              <i>Collab Chief</i>\n              <br />\n              Master Negotiator, One handshake is all it takes.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 4 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Vamshi</b>\n              <br />\n              <i>Front-end Dev</i>\n              <br />\n              Skillful savant. Code is art.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 5 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Bhargav</b>\n              <br />\n              <i>Back-end Dev</i>\n              <br />\n              Code Whizz. The magic happens at the back.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 6 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Walter</b>\n              <br />\n              <i>CEO</i>\n              <br />\n              Eyes all around. <span className=\"strikethrough\">Sex</span> Genius\n              Sells.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 7 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Kaizer</b>\n              <br />\n              <i>CMO</i>\n              <br />\n              The one holding all the cards. Shh…\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 8 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Sashi</b>\n              <br />\n              <i>COO</i>\n              <br />\n              King of discord. No bullshit, only work.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && isMobile && !showMobileDoor && (\n          <div className=\"team-member-div\">\n            <Carousel responsive={responsive}>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Walter <span className=\"text-right\">CEO</span>\n                </label>\n                <img alt=\"Walter\" src={Walter} />\n                <label className=\"team-member-info-bottom\">\n                  <q>\n                    Eyes all around. <span className=\"strikethrough\">Sex</span>{\" \"}\n                    Genius Sells.\n                  </q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Kaizer <span className=\"text-right\">CMO</span>\n                </label>\n                <img alt=\"kaizer\" src={Kaizer} />\n                <label className=\"team-member-info-bottom\">\n                  <q>The one holding all the cards. Shh…</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Sashi <span className=\"text-right\">COO</span>\n                </label>\n                <img alt=\"Sashi\" src={Sashi} />\n                <label className=\"team-member-info-bottom\">\n                  <q>King of discord. No bullshit, only work.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Gabriel <span className=\"text-right\">NFT artist</span>\n                </label>\n                <img alt=\"Gabriel\" src={Gabriel} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Artist Extraordinaire. Delicately detailed.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Yogantar <span className=\"text-right\">Artist</span>\n                </label>\n                <img alt=\"Yogantar\" src={Yogantar} />\n                <label className=\"team-member-info-bottom\">\n                  <q>\n                    He sees, He makes, He thinks, He creates. No world is too\n                    far.\n                  </q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Wallace <span className=\"text-right\">Collab Chief</span>\n                </label>\n                <img alt=\"Wallace\" src={Wallace} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Master Negotiator, One handshake is all it takes.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Vamshi <span className=\"text-right\">Front-end Dev</span>\n                </label>\n                <img alt=\"Dev1\" src={Dev1} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Skillful savant. Code is art.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Bhargav <span className=\"text-right\">Back-end Dev</span>\n                </label>\n                <img alt=\"Dev2\" src={Dev2} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Code Whizz. The magic happens at the back.</q>\n                </label>\n              </div>\n            </Carousel>\n          </div>\n        )}\n        {showAlphaRoom && !logoAlphaLoading && !logoLoading && !showMobileDoor && (\n          <div className=\"Backdrop-other\">\n            <div\n              className=\"alpha-room-phil-one\"\n              onClick={openFirstPhilAlphaRoom}\n            >\n              <div className=\"smaller-alpha-updates\">\n                <label className=\"typing-text story-line\">The Story</label>\n              </div>\n            </div>\n          </div>\n        )}\n        {showFirstPhil && (\n          <div className=\"Backdrop-other\">\n            <OutsideClickHandler onOutsideClick={closeAlphaUpdates}>\n              <div className=\"alpha-holo\">\n                <div className=\"alpha-holo-updates\" id=\"alpha-scroll\">\n                  <img\n                    alt=\"Story-background\"\n                    src={AlphaScroll}\n                    className=\"alpha-scroll-icon\"\n                    onClick={scrollStory}\n                  />\n                  <label className=\"typing-text\">\n                    In the year 6969, a gang of 4 kids, led by their leader\n                    Jesse, venture out into the wild post-apocalyptic cyberpunk\n                    world of Alphazex, traveling through various cities,\n                    meandering through multiple adventures, just to answer a\n                    single question...\n                  </label>\n                  <label className=\"typing-text m-t-15\">\n                    Throughout the world of Alphazex, there is only one\n                    safeplace, one haven for Jesse and his friends. It's the\n                    Alpha hood.{\" \"}\n                  </label>\n                  <label className=\"typing-text m-t-15\">\n                    Originally, what was one of the biggest laboratories in the\n                    world for AI research, Alpha Labs was destroyed in the world\n                    wars that kept on occurring, The not-so-okay wars, the Creck\n                    wars, the cult vs tribe wars, and the once grand building of\n                    Alpha Labs was destroyed, or that's what people thought.\n                  </label>\n                  <label className=\"typing-text m-t-15\">\n                    Goverments and rulers came and went, and even though the\n                    existence of autonomous organizations was banned, one group\n                    thrived in the ruins of the same building that was thought\n                    to not exist. This organisation was, Secret Alpha.\n                  </label>\n                </div>\n              </div>\n            </OutsideClickHandler>\n          </div>\n        )}\n        {showUpdates && (\n          <div className=\"Backdrop-other-mint\">\n            <OutsideClickHandler onOutsideClick={closeUpdates}>\n              {wallet.connected && \n              <div className=\"bigger-holo\">\n                <div className=\"holo-updates\">\n                  {currentWl != '' &&\n                  <div className=\"mint-inside-div\">\n                    {!isMobile && \n                    <img\n                      src={InfoMint}\n                      onMouseOver={() => setShowMintInfo(true)}\n                      onMouseLeave={() => setShowMintInfo(false)}\n                      className={\n                        showMintInfo\n                          ? \"mint-info opacity-0\"\n                          : \"mint-info opacity-1\"\n                      }\n                    />\n                    }\n                    {isMobile && \n                    <img\n                      src={InfoMint}\n                      onClick={() => setShowMintInfo(!showMintInfo)}\n                      className={\n                        showMintInfo\n                          ? \"mint-info opacity-0\"\n                          : \"mint-info opacity-1\"\n                      }\n                    />\n                    }\n                    {!isMobile && \n                    <div className={showMintInfo ? \"mint-info-total opacity-1\" : \"mint-info-total opacity-0\"}>\n                      <h2 className=\"pull-left full-width text-center m-t-5 m-b-10\">\n                        Details\n                      </h2>\n                      <label className=\"pull-left full-width m-t-3 m-b-3\">\n                        GOG <b>123</b>\n                        <span className=\"mint-info-dot\"></span>MAX{\" \"}\n                        <b>3 TOKENS</b>\n                        <span className=\"mint-info-dot\"></span>PRICE <b>1.69</b>\n                      </label>\n                      <label className=\"pull-left full-width m-t-3 m-b-3\">\n                        OG <b>690</b>\n                        <span className=\"mint-info-dot\"></span>MAX{\" \"}\n                        <b>2 TOKENS</b>\n                        <span className=\"mint-info-dot\"></span>PRICE <b>1.90</b>\n                      </label>\n                      <label className=\"pull-left full-width m-t-3 m-b-3\">\n                        WL <b>5500</b>\n                        <span className=\"mint-info-dot\"></span>MAX{\" \"}\n                        <b>1 TOKEN</b>\n                        <span className=\"mint-info-dot\"></span>PRICE <b>1.90</b>\n                      </label>\n                      <label className=\"pull-left full-width m-t-3 m-b-3\">\n                        PUBLIC <span className=\"mint-info-dot\"></span>{\" \"}\n                        <b>UNLIMITED</b> <span className=\"mint-info-dot\"></span>{\" \"}\n                        PRICE <b>2.29</b>\n                      </label>\n                    </div>\n                    }\n                    {isMobile && showMintInfo && \n                    <div className=\"Backdrop-mobile\">\n                      <OutsideClickHandler onOutsideClick={() => setShowMintInfo(false)}>\n                        <div className={showMintInfo ? \"mint-info-total opacity-1\" : \"mint-info-total opacity-0\"}>\n                        <span className=\"close-nft-success-message\" onClick={() => setShowMintInfo(false)}>X</span>\n                          <h2 className=\"pull-left full-width text-center m-t-5 m-b-10\">\n                            Details\n                          </h2>\n                          <label className=\"pull-left full-width m-t-3 m-b-3\">\n                            GOG <b>123</b>\n                            <span className=\"mint-info-dot\"></span>MAX{\" \"}\n                            <b>3 TOKENS</b>\n                            <span className=\"mint-info-dot\"></span>PRICE <b>1.69</b>\n                          </label>\n                          <label className=\"pull-left full-width m-t-3 m-b-3\">\n                            OG <b>690</b>\n                            <span className=\"mint-info-dot\"></span>MAX{\" \"}\n                            <b>2 TOKENS</b>\n                            <span className=\"mint-info-dot\"></span>PRICE <b>1.90</b>\n                          </label>\n                          <label className=\"pull-left full-width m-t-3 m-b-3\">\n                            WL <b>5500</b>\n                            <span className=\"mint-info-dot\"></span>MAX{\" \"}\n                            <b>1 TOKEN</b>\n                            <span className=\"mint-info-dot\"></span>PRICE <b>1.90</b>\n                          </label>\n                          <label className=\"pull-left full-width m-t-3 m-b-3\">\n                            PUBLIC <span className=\"mint-info-dot\"></span>{\" \"}\n                            <b>UNLIMITED</b> <span className=\"mint-info-dot\"></span>{\" \"}\n                            PRICE <b>2.29</b>\n                          </label>\n                        </div>\n                      </OutsideClickHandler>\n                    </div>\n                    }\n                    {!isMobile && \n                    <div className=\"pull-left full-width\">\n                      <div className=\"Items-available-div\">\n                        <label className=\"items-available-text\">\n                          {currentWl == \"GOG + OG\" && <span>WL - Mint in</span>}\n                          {currentWl == \"WL\" && <span>PUBLIC - Mint in</span>}\n                          {currentWl == \"\" && <span>GOG + OG - Mint in</span>}\n                          {currentWl == \"PUBLIC\" && <span>PUBLIC MINT</span>}\n                        </label>\n                        <label className=\"items-available-text\">\n                          {currentWl != \"PUBLIC\" && (\n                            <span className=\"fs-36-i\">{time}</span>\n                          )}\n                          {currentWl == \"PUBLIC\" && <span>---</span>}\n                        </label>\n                      </div>\n                      <div className=\"Current-whitelist-div\">\n                        <label className=\"items-available-text text-center-i m-t-b-5\">\n                          {currentWl} Mint\n                        </label>\n                      </div>\n                    </div>\n                    }\n                    {isMobile && \n                    <div className=\"current-whitelist\">{currentWl}</div>\n                    }\n                    {isMobile && \n                    <label className=\"pull-left full-width text-center m-t-15 m-b-10 courier mint-text-color\">\n                      {currentWl == \"GOG + OG\" && <span>WL - Mint in</span>}\n                      {currentWl == \"WL\" && <span>PUBLIC - Mint in</span>}\n                      {currentWl == \"\" && <span>GOG + OG - Mint in</span>}\n                      {currentWl == \"PUBLIC\" && <span>PUBLIC MINT</span>}\n                    </label>\n                    }\n                    {isMobile &&\n                    <label className=\"pull-left full-width text-center m-t-0 m-b-10 courier mint-text-color\">\n                      {currentWl != \"PUBLIC\" && (\n                        <span className=\"fs-36-i\">{time}</span>\n                      )}\n                      {currentWl == \"PUBLIC\" && <span>---</span>}\n                    </label>\n                    }\n                    {!isMobile &&\n                    <label className=\"completed-counts\">\n                      {magicHat?.state.itemsRemaining!} /6969\n                    </label>\n                    }\n                    {!isMobile && (\n                      <div className=\"battery\">\n                        {setBars.map(function (item, i) {\n                          if (completed >= item) {\n                            return (\n                              <div\n                                className=\"bar active\"\n                                data-power={item}\n                              ></div>\n                            );\n                          } else {\n                            return (\n                              <div className=\"bar\" data-power={item}></div>\n                            );\n                          }\n                        })}\n                      </div>\n                    )}\n                    {isMobile &&\n                    <CircularProgressbar value={completed} text={magicHat?.state.itemsRemaining + '/' + magicHat?.state.itemsAvailable} />\n                    }\n                    {/* <div className=\"mint-progress\">\n                      <ProgressBar bgcolor={\"#6a1b9a\"} completed={completed} />\n                    </div> */}\n                    <div className=\"remaining-time-div m-t-0 m-b-15 spacing-counts\">\n                      <div className=\"mint-count\">\n                        <button\n                          className=\"decrease-count\"\n                          onClick={decreaseMintCount}\n                        >\n                          -\n                        </button>\n                        <label>{mintCount}</label>\n                        <button\n                          className=\"increase-count\"\n                          onClick={increaseMintCount}\n                        >\n                          +\n                        </button>\n                      </div>\n                    </div>\n                    <div className=\"remaining-time-div m-t-0 m-b-15\">\n                      {!wallet.connected ? (\n                        <div className=\"Top-connected red\">\n                          <WalletDialogButton className=\"Inside-Connect-btn\">\n                            Connect\n                          </WalletDialogButton>\n                        </div>\n                      ) : (\n                        <div\n                          className={\n                            isUserMinting\n                              ? \"Top-connected green disabled-btn\"\n                              : \"Top-connected green\"\n                          }\n                        >\n                          <button\n                            className={\n                              shouldMint\n                                ? \"Inside-Mint-btn w-200\"\n                                : \"Mint-btn-disabled w-200\"\n                            }\n                            onClick={whiteListCheckMint}\n                          >\n                            {isUserMinting ? \"Minting\" : \"Mint Now\"}\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                    {mintSuccessMessage && (\n                      <div className=\"nft-success-mint-message\">\n                        <span\n                          className=\"close-nft-success-message\"\n                          onClick={() => setMintSuccessMessage(false)}\n                        >\n                          X\n                        </span>\n                        {mintResponseType == 'error' && \n                        <h2 className=\"pull-left full-width text-center m-t-10 m-b-10\">\n                          Error\n                        </h2>\n                        }\n                        {mintResponseType == 'success' && \n                        <h2 className=\"pull-left full-width text-center m-t-10 m-b-10\">\n                          Congratulations\n                        </h2>\n                        }\n                        <label className=\"nft-message-success\">\n                          {mintResponse}\n                        </label>\n                      </div>\n                    )}\n                  </div>\n                  }\n                  {currentWl == '' &&\n                  <div className=\"before-mint-text\">SHH!!! You're early Mint starts in {time}</div>\n                  }\n                </div>\n              </div>\n              }\n              {!wallet.connected &&\n              <div className=\"bigger-holo\">\n                <div className=\"holo-updates\">\n                  <div className=\"mint-inside-div\">\n                    <WalletDialogButton className=\"Connect-Wallet-btn\">\n                      Connect Wallet\n                    </WalletDialogButton>\n                  </div>\n                </div>\n              </div>\n              }\n            </OutsideClickHandler>\n          </div>\n        )}\n        {!logoLoading && logoAlphaLoading && (\n          <div className=\"logo-loader-parent-alpha\">\n            <img alt=\"Alpha-logo\" src={LogoWhite} className=\"pulse-animation\" />\n          </div>\n        )}\n      </div>\n      {/* <Snackbar\n        className=\"snack-bar\"\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          className=\"bold\"\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar> */}\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/candy-machine.ts",["268"],"import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, Token } from '@solana/spl-token';\nimport { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\nimport idlMagicHat from './magic_hat.json';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken\n} from './utils';\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, TOKEN_PROGRAM_ID, MAGIC_HAT_ID } from './config';\n// import idl from \"./wallet_whitelist.json\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\nconst MAGIC_HAT_PROGRAM_V2_ID = new anchor.web3.PublicKey(\n  'AGydXrbh2V9RH3h3cDzpws51tRDs2HbTtUXnCkq58bwH',\n);\n\ninterface MagicHatState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface MagicHatAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: MagicHatState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection && connection._signatureSubscriptions && connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getMagicHatState = async (\n  anchorWallet: anchor.Wallet,\n  magicHatId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<MagicHatAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl:any = idlMagicHat;\n\n  const program = new anchor.Program(idl, MAGIC_HAT_PROGRAM_V2_ID, provider);\n\n  const state: any = await program.account.magicHat.fetch(magicHatId);\n  console.log(state.authority.toBase58());\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  const presale =\n    state.data.whitelistMintSettings &&\n    state.data.whitelistMintSettings.presale &&\n    (!state.data.goLiveDate ||\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n\n  return {\n    id: magicHatId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        (presale ||\n          state.data.goLiveDate?.toNumber() < new Date().getTime() / 1000) &&\n        (state.data.endSettings\n          ? state.data.endSettings.endSettingType.date\n            ? state.data.endSettings.number.toNumber() >\n              new Date().getTime() / 1000\n            : itemsRedeemed < state.data.endSettings.number.toNumber()\n          : true),\n      isPresale: presale,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMagicHatCreator = async (\n  magicHat: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('magic_hat'), magicHat.toBuffer()],\n    MAGIC_HAT_PROGRAM_V2_ID,\n  );\n};\n\nexport const mintOneToken = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet: any,\n  id:any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n\n  const MAGIC_HAT_ID = magicHat.id;\n  console.log(MAGIC_HAT_ID.toBase58());\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n\n  instructions.push(\n    await magicHat.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        magicHatCreator,\n        payer: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const mintOneTokenWL = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet_pda: any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n  console.log(MAGIC_HAT_ID.toBase58());\n  instructions.push(\n    await magicHat.program.instruction.wlMintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        walletWhitelist: wallet_pda,\n        magicHatCreator: magicHatCreator,\n        whitelistedAddress: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/config.ts",[],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/components/menu.tsx",["269"],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/components/progress-bar.tsx",[],["270","271"],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/utils.ts",[],"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/src/connection.tsx",[],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/index.tsx",[],["272","273"],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/reportWebVitals.ts",[],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/App.tsx",[],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/Home.tsx",["274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358"],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/candy-machine.ts",["359"],"import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, Token } from '@solana/spl-token';\nimport { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\nimport idlMagicHat from './magic_hat.json';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken\n} from './utils';\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, TOKEN_PROGRAM_ID, MAGIC_HAT_ID } from './config';\n// import idl from \"./wallet_whitelist.json\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\nconst MAGIC_HAT_PROGRAM_V2_ID = new anchor.web3.PublicKey(\n  'JBw14YzhNTQGqUX54MatDgxDrCPopKf4EGcJHoHfq5ha',\n);\n\ninterface MagicHatState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface MagicHatAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: MagicHatState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection && connection._signatureSubscriptions && connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getMagicHatState = async (\n  anchorWallet: anchor.Wallet,\n  magicHatId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<MagicHatAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl:any = idlMagicHat;\n\n  const program = new anchor.Program(idl, MAGIC_HAT_PROGRAM_V2_ID, provider);\n\n  const state: any = await program.account.magicHat.fetch(magicHatId);\n  console.log(state.authority.toBase58());\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  const presale =\n    state.data.whitelistMintSettings &&\n    state.data.whitelistMintSettings.presale &&\n    (!state.data.goLiveDate ||\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n\n  return {\n    id: magicHatId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        (presale ||\n          state.data.goLiveDate?.toNumber() < new Date().getTime() / 1000) &&\n        (state.data.endSettings\n          ? state.data.endSettings.endSettingType.date\n            ? state.data.endSettings.number.toNumber() >\n              new Date().getTime() / 1000\n            : itemsRedeemed < state.data.endSettings.number.toNumber()\n          : true),\n      isPresale: presale,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getMagicHatCreator = async (\n  magicHat: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('magic_hat'), magicHat.toBuffer()],\n    MAGIC_HAT_PROGRAM_V2_ID,\n  );\n};\n\nexport const mintOneToken = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet: any,\n  id:any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n\n  const MAGIC_HAT_ID = magicHat.id;\n  console.log(MAGIC_HAT_ID.toBase58());\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n\n  instructions.push(\n    await magicHat.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        magicHatCreator,\n        payer: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const mintOneTokenWL = async (\n  magicHat: MagicHatAccount,\n  payer: anchor.web3.PublicKey,\n  wallet_pda: any\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = magicHat.state.tokenMint\n    ? (await getAtaForMint(magicHat.state.tokenMint, payer))[0]\n    : payer;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions  = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await magicHat.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    )\n  ];\n\n  if (magicHat.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          magicHat.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (magicHat.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            magicHat.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (magicHat.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      magicHat.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (magicHat.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await magicHat.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (magicHat.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    for (let index = 0; index < remainingAccounts.length; index++) {\n      let element = remainingAccounts[index];\n      if (element.pubkey === userPayingAccountAddress) {\n        console.log('Already Minted !!!')\n      }\n    }\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        magicHat.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [magicHatCreator, creatorBump] = await getMagicHatCreator(\n    MAGIC_HAT_ID,\n  );\n  console.log(MAGIC_HAT_ID.toBase58());\n  instructions.push(\n    await magicHat.program.instruction.wlMintNft(creatorBump, {\n      accounts: {\n        magicHat: MAGIC_HAT_ID,\n        walletWhitelist: wallet_pda,\n        magicHatCreator: magicHatCreator,\n        whitelistedAddress: payer,\n        wallet: magicHat.state.treasury,\n        metadata: metadataAddress,\n        mint: mint.publicKey,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        masterEdition,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n  try {\n    return (\n      await sendTransactions(\n        magicHat.program.provider.connection,\n        magicHat.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","/Users/vamshikrishnaenjapuri/magic_hat_ui/src/config.ts",[],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/components/menu.tsx",["360"],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/utils.ts",[],"/Users/vamshikrishnaenjapuri/magic_hat_ui/src/connection.tsx",[],{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","severity":1,"message":"366","line":45,"column":8,"nodeType":"367","messageId":"368","endLine":45,"endColumn":13},{"ruleId":"365","severity":1,"message":"369","line":47,"column":10,"nodeType":"367","messageId":"368","endLine":47,"endColumn":13},{"ruleId":"365","severity":1,"message":"370","line":86,"column":11,"nodeType":"367","messageId":"368","endLine":86,"endColumn":26},{"ruleId":"371","severity":1,"message":"372","line":108,"column":11,"nodeType":"367","messageId":"373","endLine":108,"endColumn":18},{"ruleId":"374","severity":1,"message":"375","line":409,"column":82,"nodeType":"376","messageId":"377","endLine":409,"endColumn":84},{"ruleId":"374","severity":1,"message":"375","line":412,"column":87,"nodeType":"376","messageId":"377","endLine":412,"endColumn":89},{"ruleId":"374","severity":1,"message":"375","line":415,"column":87,"nodeType":"376","messageId":"377","endLine":415,"endColumn":89},{"ruleId":"365","severity":1,"message":"378","line":494,"column":31,"nodeType":"367","messageId":"368","endLine":494,"endColumn":35},{"ruleId":"374","severity":1,"message":"375","line":502,"column":35,"nodeType":"376","messageId":"377","endLine":502,"endColumn":37},{"ruleId":"374","severity":1,"message":"375","line":502,"column":57,"nodeType":"376","messageId":"377","endLine":502,"endColumn":59},{"ruleId":"374","severity":1,"message":"375","line":502,"column":77,"nodeType":"376","messageId":"377","endLine":502,"endColumn":79},{"ruleId":"374","severity":1,"message":"375","line":504,"column":23,"nodeType":"376","messageId":"377","endLine":504,"endColumn":25},{"ruleId":"379","severity":1,"message":"380","line":583,"column":6,"nodeType":"381","endLine":591,"endColumn":4,"suggestions":"382"},{"ruleId":"365","severity":1,"message":"383","line":713,"column":26,"nodeType":"367","messageId":"368","endLine":713,"endColumn":37},{"ruleId":"374","severity":1,"message":"375","line":727,"column":35,"nodeType":"376","messageId":"377","endLine":727,"endColumn":37},{"ruleId":"374","severity":1,"message":"375","line":727,"column":57,"nodeType":"376","messageId":"377","endLine":727,"endColumn":59},{"ruleId":"374","severity":1,"message":"375","line":727,"column":77,"nodeType":"376","messageId":"377","endLine":727,"endColumn":79},{"ruleId":"365","severity":1,"message":"384","line":767,"column":9,"nodeType":"367","messageId":"368","endLine":767,"endColumn":27},{"ruleId":"365","severity":1,"message":"378","line":770,"column":36,"nodeType":"367","messageId":"368","endLine":770,"endColumn":40},{"ruleId":"365","severity":1,"message":"378","line":784,"column":38,"nodeType":"367","messageId":"368","endLine":784,"endColumn":42},{"ruleId":"365","severity":1,"message":"385","line":789,"column":15,"nodeType":"367","messageId":"368","endLine":789,"endColumn":28},{"ruleId":"365","severity":1,"message":"378","line":808,"column":38,"nodeType":"367","messageId":"368","endLine":808,"endColumn":42},{"ruleId":"365","severity":1,"message":"385","line":812,"column":15,"nodeType":"367","messageId":"368","endLine":812,"endColumn":28},{"ruleId":"365","severity":1,"message":"386","line":827,"column":9,"nodeType":"367","messageId":"368","endLine":827,"endColumn":22},{"ruleId":"365","severity":1,"message":"378","line":830,"column":38,"nodeType":"367","messageId":"368","endLine":830,"endColumn":42},{"ruleId":"365","severity":1,"message":"385","line":835,"column":15,"nodeType":"367","messageId":"368","endLine":835,"endColumn":28},{"ruleId":"365","severity":1,"message":"383","line":855,"column":28,"nodeType":"367","messageId":"368","endLine":855,"endColumn":39},{"ruleId":"365","severity":1,"message":"378","line":859,"column":38,"nodeType":"367","messageId":"368","endLine":859,"endColumn":42},{"ruleId":"365","severity":1,"message":"385","line":863,"column":15,"nodeType":"367","messageId":"368","endLine":863,"endColumn":28},{"ruleId":"365","severity":1,"message":"387","line":880,"column":9,"nodeType":"367","messageId":"368","endLine":880,"endColumn":31},{"ruleId":"365","severity":1,"message":"383","line":884,"column":28,"nodeType":"367","messageId":"368","endLine":884,"endColumn":39},{"ruleId":"365","severity":1,"message":"385","line":888,"column":15,"nodeType":"367","messageId":"368","endLine":888,"endColumn":28},{"ruleId":"374","severity":1,"message":"375","line":903,"column":19,"nodeType":"376","messageId":"377","endLine":903,"endColumn":21},{"ruleId":"374","severity":1,"message":"375","line":911,"column":24,"nodeType":"376","messageId":"377","endLine":911,"endColumn":26},{"ruleId":"371","severity":1,"message":"388","line":914,"column":11,"nodeType":"367","messageId":"373","endLine":914,"endColumn":16},{"ruleId":"371","severity":1,"message":"389","line":915,"column":11,"nodeType":"367","messageId":"373","endLine":915,"endColumn":18},{"ruleId":"371","severity":1,"message":"390","line":916,"column":11,"nodeType":"367","messageId":"373","endLine":916,"endColumn":18},{"ruleId":"374","severity":1,"message":"375","line":919,"column":24,"nodeType":"376","messageId":"377","endLine":919,"endColumn":26},{"ruleId":"371","severity":1,"message":"388","line":925,"column":11,"nodeType":"367","messageId":"373","endLine":925,"endColumn":16},{"ruleId":"371","severity":1,"message":"389","line":926,"column":11,"nodeType":"367","messageId":"373","endLine":926,"endColumn":18},{"ruleId":"371","severity":1,"message":"390","line":927,"column":11,"nodeType":"367","messageId":"373","endLine":927,"endColumn":18},{"ruleId":"365","severity":1,"message":"391","line":932,"column":9,"nodeType":"367","messageId":"368","endLine":932,"endColumn":30},{"ruleId":"365","severity":1,"message":"378","line":935,"column":38,"nodeType":"367","messageId":"368","endLine":935,"endColumn":42},{"ruleId":"365","severity":1,"message":"385","line":939,"column":15,"nodeType":"367","messageId":"368","endLine":939,"endColumn":28},{"ruleId":"365","severity":1,"message":"392","line":953,"column":9,"nodeType":"367","messageId":"368","endLine":953,"endColumn":22},{"ruleId":"365","severity":1,"message":"385","line":956,"column":15,"nodeType":"367","messageId":"368","endLine":956,"endColumn":28},{"ruleId":"374","severity":1,"message":"375","line":1664,"column":76,"nodeType":"376","messageId":"377","endLine":1664,"endColumn":78},{"ruleId":"374","severity":1,"message":"375","line":1664,"column":128,"nodeType":"376","messageId":"377","endLine":1664,"endColumn":130},{"ruleId":"374","severity":1,"message":"375","line":1670,"column":89,"nodeType":"376","messageId":"377","endLine":1670,"endColumn":91},{"ruleId":"374","severity":1,"message":"375","line":1670,"column":134,"nodeType":"376","messageId":"377","endLine":1670,"endColumn":136},{"ruleId":"374","severity":1,"message":"375","line":1670,"column":177,"nodeType":"376","messageId":"377","endLine":1670,"endColumn":179},{"ruleId":"365","severity":1,"message":"393","line":4,"column":10,"nodeType":"367","messageId":"368","endLine":4,"endColumn":19},{"ruleId":"394","severity":1,"message":"395","line":14,"column":11,"nodeType":"396","endLine":18,"endColumn":12},{"ruleId":"361","replacedBy":"397"},{"ruleId":"363","replacedBy":"398"},{"ruleId":"365","severity":1,"message":"399","line":4,"column":10,"nodeType":"367","messageId":"368","endLine":4,"endColumn":18},{"ruleId":"365","severity":1,"message":"400","line":5,"column":8,"nodeType":"367","messageId":"368","endLine":5,"endColumn":13},{"ruleId":"365","severity":1,"message":"401","line":9,"column":8,"nodeType":"367","messageId":"368","endLine":9,"endColumn":21},{"ruleId":"365","severity":1,"message":"366","line":61,"column":8,"nodeType":"367","messageId":"368","endLine":61,"endColumn":13},{"ruleId":"365","severity":1,"message":"402","line":62,"column":8,"nodeType":"367","messageId":"368","endLine":62,"endColumn":19},{"ruleId":"365","severity":1,"message":"369","line":63,"column":10,"nodeType":"367","messageId":"368","endLine":63,"endColumn":13},{"ruleId":"365","severity":1,"message":"370","line":105,"column":11,"nodeType":"367","messageId":"368","endLine":105,"endColumn":26},{"ruleId":"365","severity":1,"message":"403","line":133,"column":10,"nodeType":"367","messageId":"368","endLine":133,"endColumn":20},{"ruleId":"365","severity":1,"message":"404","line":133,"column":22,"nodeType":"367","messageId":"368","endLine":133,"endColumn":35},{"ruleId":"365","severity":1,"message":"405","line":376,"column":11,"nodeType":"367","messageId":"368","endLine":376,"endColumn":18},{"ruleId":"365","severity":1,"message":"405","line":557,"column":11,"nodeType":"367","messageId":"368","endLine":557,"endColumn":18},{"ruleId":"374","severity":1,"message":"375","line":561,"column":44,"nodeType":"376","messageId":"377","endLine":561,"endColumn":46},{"ruleId":"374","severity":1,"message":"375","line":566,"column":44,"nodeType":"376","messageId":"377","endLine":566,"endColumn":46},{"ruleId":"374","severity":1,"message":"375","line":571,"column":44,"nodeType":"376","messageId":"377","endLine":571,"endColumn":46},{"ruleId":"365","severity":1,"message":"406","line":638,"column":9,"nodeType":"367","messageId":"368","endLine":638,"endColumn":31},{"ruleId":"365","severity":1,"message":"378","line":659,"column":31,"nodeType":"367","messageId":"368","endLine":659,"endColumn":35},{"ruleId":"374","severity":1,"message":"375","line":681,"column":22,"nodeType":"376","messageId":"377","endLine":681,"endColumn":24},{"ruleId":"374","severity":1,"message":"375","line":682,"column":23,"nodeType":"376","messageId":"377","endLine":682,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":683,"column":23,"nodeType":"376","messageId":"377","endLine":683,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":684,"column":23,"nodeType":"376","messageId":"377","endLine":684,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":688,"column":23,"nodeType":"376","messageId":"377","endLine":688,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":723,"column":19,"nodeType":"376","messageId":"377","endLine":723,"endColumn":21},{"ruleId":"374","severity":1,"message":"375","line":725,"column":26,"nodeType":"376","messageId":"377","endLine":725,"endColumn":28},{"ruleId":"374","severity":1,"message":"375","line":727,"column":25,"nodeType":"376","messageId":"377","endLine":727,"endColumn":27},{"ruleId":"374","severity":1,"message":"375","line":739,"column":19,"nodeType":"376","messageId":"377","endLine":739,"endColumn":21},{"ruleId":"374","severity":1,"message":"375","line":741,"column":26,"nodeType":"376","messageId":"377","endLine":741,"endColumn":28},{"ruleId":"374","severity":1,"message":"375","line":743,"column":25,"nodeType":"376","messageId":"377","endLine":743,"endColumn":27},{"ruleId":"365","severity":1,"message":"407","line":744,"column":7,"nodeType":"367","messageId":"368","endLine":744,"endColumn":8},{"ruleId":"379","severity":1,"message":"380","line":768,"column":6,"nodeType":"381","endLine":777,"endColumn":4,"suggestions":"408"},{"ruleId":"365","severity":1,"message":"383","line":903,"column":26,"nodeType":"367","messageId":"368","endLine":903,"endColumn":37},{"ruleId":"374","severity":1,"message":"375","line":928,"column":22,"nodeType":"376","messageId":"377","endLine":928,"endColumn":24},{"ruleId":"374","severity":1,"message":"375","line":929,"column":23,"nodeType":"376","messageId":"377","endLine":929,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":930,"column":23,"nodeType":"376","messageId":"377","endLine":930,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":931,"column":23,"nodeType":"376","messageId":"377","endLine":931,"endColumn":25},{"ruleId":"365","severity":1,"message":"384","line":980,"column":9,"nodeType":"367","messageId":"368","endLine":980,"endColumn":27},{"ruleId":"365","severity":1,"message":"378","line":983,"column":36,"nodeType":"367","messageId":"368","endLine":983,"endColumn":40},{"ruleId":"365","severity":1,"message":"378","line":996,"column":36,"nodeType":"367","messageId":"368","endLine":996,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1001,"column":13,"nodeType":"367","messageId":"368","endLine":1001,"endColumn":26},{"ruleId":"365","severity":1,"message":"378","line":1034,"column":36,"nodeType":"367","messageId":"368","endLine":1034,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1038,"column":13,"nodeType":"367","messageId":"368","endLine":1038,"endColumn":26},{"ruleId":"365","severity":1,"message":"385","line":1103,"column":13,"nodeType":"367","messageId":"368","endLine":1103,"endColumn":26},{"ruleId":"365","severity":1,"message":"409","line":1124,"column":9,"nodeType":"367","messageId":"368","endLine":1124,"endColumn":32},{"ruleId":"365","severity":1,"message":"385","line":1150,"column":13,"nodeType":"367","messageId":"368","endLine":1150,"endColumn":26},{"ruleId":"365","severity":1,"message":"383","line":1179,"column":28,"nodeType":"367","messageId":"368","endLine":1179,"endColumn":39},{"ruleId":"365","severity":1,"message":"378","line":1187,"column":38,"nodeType":"367","messageId":"368","endLine":1187,"endColumn":42},{"ruleId":"365","severity":1,"message":"410","line":1218,"column":9,"nodeType":"367","messageId":"368","endLine":1218,"endColumn":31},{"ruleId":"365","severity":1,"message":"383","line":1224,"column":26,"nodeType":"367","messageId":"368","endLine":1224,"endColumn":37},{"ruleId":"365","severity":1,"message":"378","line":1232,"column":36,"nodeType":"367","messageId":"368","endLine":1232,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1236,"column":13,"nodeType":"367","messageId":"368","endLine":1236,"endColumn":26},{"ruleId":"365","severity":1,"message":"387","line":1257,"column":9,"nodeType":"367","messageId":"368","endLine":1257,"endColumn":31},{"ruleId":"365","severity":1,"message":"383","line":1263,"column":26,"nodeType":"367","messageId":"368","endLine":1263,"endColumn":37},{"ruleId":"365","severity":1,"message":"385","line":1271,"column":13,"nodeType":"367","messageId":"368","endLine":1271,"endColumn":26},{"ruleId":"365","severity":1,"message":"411","line":1291,"column":9,"nodeType":"367","messageId":"368","endLine":1291,"endColumn":10},{"ruleId":"374","severity":1,"message":"375","line":1302,"column":23,"nodeType":"376","messageId":"377","endLine":1302,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":1305,"column":25,"nodeType":"376","messageId":"377","endLine":1305,"endColumn":27},{"ruleId":"374","severity":1,"message":"375","line":1343,"column":32,"nodeType":"376","messageId":"377","endLine":1343,"endColumn":34},{"ruleId":"371","severity":1,"message":"412","line":1346,"column":13,"nodeType":"367","messageId":"373","endLine":1346,"endColumn":18},{"ruleId":"374","severity":1,"message":"375","line":1374,"column":28,"nodeType":"376","messageId":"377","endLine":1374,"endColumn":30},{"ruleId":"371","severity":1,"message":"412","line":1383,"column":13,"nodeType":"367","messageId":"373","endLine":1383,"endColumn":18},{"ruleId":"365","severity":1,"message":"391","line":1418,"column":9,"nodeType":"367","messageId":"368","endLine":1418,"endColumn":30},{"ruleId":"365","severity":1,"message":"378","line":1421,"column":36,"nodeType":"367","messageId":"368","endLine":1421,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1425,"column":13,"nodeType":"367","messageId":"368","endLine":1425,"endColumn":26},{"ruleId":"365","severity":1,"message":"385","line":1447,"column":13,"nodeType":"367","messageId":"368","endLine":1447,"endColumn":26},{"ruleId":"374","severity":1,"message":"375","line":1701,"column":28,"nodeType":"376","messageId":"377","endLine":1701,"endColumn":30},{"ruleId":"374","severity":1,"message":"413","line":2165,"column":30,"nodeType":"376","messageId":"377","endLine":2165,"endColumn":32},{"ruleId":"414","severity":1,"message":"415","line":2168,"column":21,"nodeType":"396","endLine":2177,"endColumn":23},{"ruleId":"414","severity":1,"message":"415","line":2180,"column":21,"nodeType":"396","endLine":2188,"endColumn":23},{"ruleId":"374","severity":1,"message":"375","line":2259,"column":38,"nodeType":"376","messageId":"377","endLine":2259,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2260,"column":38,"nodeType":"376","messageId":"377","endLine":2260,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2261,"column":38,"nodeType":"376","messageId":"377","endLine":2261,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2262,"column":38,"nodeType":"376","messageId":"377","endLine":2262,"endColumn":40},{"ruleId":"374","severity":1,"message":"413","line":2265,"column":38,"nodeType":"376","messageId":"377","endLine":2265,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2268,"column":38,"nodeType":"376","messageId":"377","endLine":2268,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2283,"column":34,"nodeType":"376","messageId":"377","endLine":2283,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2284,"column":34,"nodeType":"376","messageId":"377","endLine":2284,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2285,"column":34,"nodeType":"376","messageId":"377","endLine":2285,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2286,"column":34,"nodeType":"376","messageId":"377","endLine":2286,"endColumn":36},{"ruleId":"374","severity":1,"message":"413","line":2291,"column":34,"nodeType":"376","messageId":"377","endLine":2291,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2294,"column":34,"nodeType":"376","messageId":"377","endLine":2294,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2379,"column":43,"nodeType":"376","messageId":"377","endLine":2379,"endColumn":45},{"ruleId":"374","severity":1,"message":"375","line":2384,"column":43,"nodeType":"376","messageId":"377","endLine":2384,"endColumn":45},{"ruleId":"374","severity":1,"message":"375","line":2396,"column":30,"nodeType":"376","messageId":"377","endLine":2396,"endColumn":32},{"ruleId":"365","severity":1,"message":"393","line":4,"column":10,"nodeType":"367","messageId":"368","endLine":4,"endColumn":19},{"ruleId":"394","severity":1,"message":"395","line":14,"column":11,"nodeType":"396","endLine":18,"endColumn":12},{"ruleId":"361","replacedBy":"416"},{"ruleId":"363","replacedBy":"417"},{"ruleId":"361","replacedBy":"418"},{"ruleId":"363","replacedBy":"419"},{"ruleId":"365","severity":1,"message":"420","line":3,"column":54,"nodeType":"367","messageId":"368","endLine":3,"endColumn":79},{"ruleId":"365","severity":1,"message":"401","line":9,"column":8,"nodeType":"367","messageId":"368","endLine":9,"endColumn":21},{"ruleId":"365","severity":1,"message":"366","line":62,"column":8,"nodeType":"367","messageId":"368","endLine":62,"endColumn":13},{"ruleId":"365","severity":1,"message":"402","line":63,"column":8,"nodeType":"367","messageId":"368","endLine":63,"endColumn":19},{"ruleId":"365","severity":1,"message":"369","line":64,"column":10,"nodeType":"367","messageId":"368","endLine":64,"endColumn":13},{"ruleId":"365","severity":1,"message":"370","line":107,"column":11,"nodeType":"367","messageId":"368","endLine":107,"endColumn":26},{"ruleId":"365","severity":1,"message":"405","line":380,"column":11,"nodeType":"367","messageId":"368","endLine":380,"endColumn":18},{"ruleId":"365","severity":1,"message":"405","line":561,"column":11,"nodeType":"367","messageId":"368","endLine":561,"endColumn":18},{"ruleId":"374","severity":1,"message":"375","line":565,"column":44,"nodeType":"376","messageId":"377","endLine":565,"endColumn":46},{"ruleId":"374","severity":1,"message":"375","line":570,"column":44,"nodeType":"376","messageId":"377","endLine":570,"endColumn":46},{"ruleId":"374","severity":1,"message":"375","line":575,"column":44,"nodeType":"376","messageId":"377","endLine":575,"endColumn":46},{"ruleId":"365","severity":1,"message":"406","line":642,"column":9,"nodeType":"367","messageId":"368","endLine":642,"endColumn":31},{"ruleId":"365","severity":1,"message":"378","line":663,"column":31,"nodeType":"367","messageId":"368","endLine":663,"endColumn":35},{"ruleId":"374","severity":1,"message":"375","line":685,"column":22,"nodeType":"376","messageId":"377","endLine":685,"endColumn":24},{"ruleId":"374","severity":1,"message":"375","line":686,"column":23,"nodeType":"376","messageId":"377","endLine":686,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":687,"column":23,"nodeType":"376","messageId":"377","endLine":687,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":688,"column":23,"nodeType":"376","messageId":"377","endLine":688,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":692,"column":23,"nodeType":"376","messageId":"377","endLine":692,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":727,"column":19,"nodeType":"376","messageId":"377","endLine":727,"endColumn":21},{"ruleId":"374","severity":1,"message":"375","line":729,"column":26,"nodeType":"376","messageId":"377","endLine":729,"endColumn":28},{"ruleId":"374","severity":1,"message":"375","line":731,"column":25,"nodeType":"376","messageId":"377","endLine":731,"endColumn":27},{"ruleId":"374","severity":1,"message":"375","line":743,"column":19,"nodeType":"376","messageId":"377","endLine":743,"endColumn":21},{"ruleId":"374","severity":1,"message":"375","line":745,"column":26,"nodeType":"376","messageId":"377","endLine":745,"endColumn":28},{"ruleId":"374","severity":1,"message":"375","line":747,"column":25,"nodeType":"376","messageId":"377","endLine":747,"endColumn":27},{"ruleId":"365","severity":1,"message":"407","line":748,"column":7,"nodeType":"367","messageId":"368","endLine":748,"endColumn":8},{"ruleId":"379","severity":1,"message":"380","line":772,"column":6,"nodeType":"381","endLine":781,"endColumn":4,"suggestions":"421"},{"ruleId":"365","severity":1,"message":"383","line":907,"column":26,"nodeType":"367","messageId":"368","endLine":907,"endColumn":37},{"ruleId":"374","severity":1,"message":"375","line":932,"column":22,"nodeType":"376","messageId":"377","endLine":932,"endColumn":24},{"ruleId":"374","severity":1,"message":"375","line":933,"column":23,"nodeType":"376","messageId":"377","endLine":933,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":934,"column":23,"nodeType":"376","messageId":"377","endLine":934,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":935,"column":23,"nodeType":"376","messageId":"377","endLine":935,"endColumn":25},{"ruleId":"365","severity":1,"message":"384","line":984,"column":9,"nodeType":"367","messageId":"368","endLine":984,"endColumn":27},{"ruleId":"365","severity":1,"message":"378","line":987,"column":36,"nodeType":"367","messageId":"368","endLine":987,"endColumn":40},{"ruleId":"365","severity":1,"message":"378","line":1000,"column":36,"nodeType":"367","messageId":"368","endLine":1000,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1005,"column":13,"nodeType":"367","messageId":"368","endLine":1005,"endColumn":26},{"ruleId":"365","severity":1,"message":"378","line":1038,"column":36,"nodeType":"367","messageId":"368","endLine":1038,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1042,"column":13,"nodeType":"367","messageId":"368","endLine":1042,"endColumn":26},{"ruleId":"365","severity":1,"message":"386","line":1071,"column":9,"nodeType":"367","messageId":"368","endLine":1071,"endColumn":22},{"ruleId":"365","severity":1,"message":"385","line":1107,"column":13,"nodeType":"367","messageId":"368","endLine":1107,"endColumn":26},{"ruleId":"365","severity":1,"message":"409","line":1128,"column":9,"nodeType":"367","messageId":"368","endLine":1128,"endColumn":32},{"ruleId":"365","severity":1,"message":"385","line":1154,"column":13,"nodeType":"367","messageId":"368","endLine":1154,"endColumn":26},{"ruleId":"374","severity":1,"message":"375","line":1179,"column":29,"nodeType":"376","messageId":"377","endLine":1179,"endColumn":31},{"ruleId":"365","severity":1,"message":"383","line":1192,"column":30,"nodeType":"367","messageId":"368","endLine":1192,"endColumn":41},{"ruleId":"365","severity":1,"message":"378","line":1200,"column":40,"nodeType":"367","messageId":"368","endLine":1200,"endColumn":44},{"ruleId":"365","severity":1,"message":"422","line":1221,"column":15,"nodeType":"367","messageId":"368","endLine":1221,"endColumn":30},{"ruleId":"365","severity":1,"message":"410","line":1254,"column":9,"nodeType":"367","messageId":"368","endLine":1254,"endColumn":31},{"ruleId":"365","severity":1,"message":"383","line":1260,"column":26,"nodeType":"367","messageId":"368","endLine":1260,"endColumn":37},{"ruleId":"365","severity":1,"message":"378","line":1268,"column":36,"nodeType":"367","messageId":"368","endLine":1268,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1272,"column":13,"nodeType":"367","messageId":"368","endLine":1272,"endColumn":26},{"ruleId":"365","severity":1,"message":"387","line":1293,"column":9,"nodeType":"367","messageId":"368","endLine":1293,"endColumn":31},{"ruleId":"365","severity":1,"message":"383","line":1299,"column":26,"nodeType":"367","messageId":"368","endLine":1299,"endColumn":37},{"ruleId":"365","severity":1,"message":"385","line":1307,"column":13,"nodeType":"367","messageId":"368","endLine":1307,"endColumn":26},{"ruleId":"365","severity":1,"message":"411","line":1327,"column":9,"nodeType":"367","messageId":"368","endLine":1327,"endColumn":10},{"ruleId":"374","severity":1,"message":"375","line":1338,"column":23,"nodeType":"376","messageId":"377","endLine":1338,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":1341,"column":25,"nodeType":"376","messageId":"377","endLine":1341,"endColumn":27},{"ruleId":"374","severity":1,"message":"375","line":1379,"column":32,"nodeType":"376","messageId":"377","endLine":1379,"endColumn":34},{"ruleId":"371","severity":1,"message":"412","line":1382,"column":13,"nodeType":"367","messageId":"373","endLine":1382,"endColumn":18},{"ruleId":"374","severity":1,"message":"375","line":1410,"column":28,"nodeType":"376","messageId":"377","endLine":1410,"endColumn":30},{"ruleId":"371","severity":1,"message":"412","line":1419,"column":13,"nodeType":"367","messageId":"373","endLine":1419,"endColumn":18},{"ruleId":"365","severity":1,"message":"391","line":1454,"column":9,"nodeType":"367","messageId":"368","endLine":1454,"endColumn":30},{"ruleId":"365","severity":1,"message":"378","line":1457,"column":36,"nodeType":"367","messageId":"368","endLine":1457,"endColumn":40},{"ruleId":"365","severity":1,"message":"385","line":1461,"column":13,"nodeType":"367","messageId":"368","endLine":1461,"endColumn":26},{"ruleId":"365","severity":1,"message":"392","line":1476,"column":9,"nodeType":"367","messageId":"368","endLine":1476,"endColumn":22},{"ruleId":"365","severity":1,"message":"385","line":1483,"column":13,"nodeType":"367","messageId":"368","endLine":1483,"endColumn":26},{"ruleId":"365","severity":1,"message":"423","line":1572,"column":9,"nodeType":"367","messageId":"368","endLine":1572,"endColumn":21},{"ruleId":"365","severity":1,"message":"424","line":1592,"column":9,"nodeType":"367","messageId":"368","endLine":1592,"endColumn":20},{"ruleId":"374","severity":1,"message":"375","line":1743,"column":28,"nodeType":"376","messageId":"377","endLine":1743,"endColumn":30},{"ruleId":"374","severity":1,"message":"413","line":2232,"column":30,"nodeType":"376","messageId":"377","endLine":2232,"endColumn":32},{"ruleId":"414","severity":1,"message":"415","line":2235,"column":21,"nodeType":"396","endLine":2244,"endColumn":23},{"ruleId":"414","severity":1,"message":"415","line":2247,"column":21,"nodeType":"396","endLine":2255,"endColumn":23},{"ruleId":"374","severity":1,"message":"375","line":2326,"column":38,"nodeType":"376","messageId":"377","endLine":2326,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2327,"column":38,"nodeType":"376","messageId":"377","endLine":2327,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2328,"column":38,"nodeType":"376","messageId":"377","endLine":2328,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2329,"column":38,"nodeType":"376","messageId":"377","endLine":2329,"endColumn":40},{"ruleId":"374","severity":1,"message":"413","line":2332,"column":38,"nodeType":"376","messageId":"377","endLine":2332,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2335,"column":38,"nodeType":"376","messageId":"377","endLine":2335,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":2350,"column":34,"nodeType":"376","messageId":"377","endLine":2350,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2351,"column":34,"nodeType":"376","messageId":"377","endLine":2351,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2352,"column":34,"nodeType":"376","messageId":"377","endLine":2352,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2353,"column":34,"nodeType":"376","messageId":"377","endLine":2353,"endColumn":36},{"ruleId":"374","severity":1,"message":"413","line":2358,"column":34,"nodeType":"376","messageId":"377","endLine":2358,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2361,"column":34,"nodeType":"376","messageId":"377","endLine":2361,"endColumn":36},{"ruleId":"374","severity":1,"message":"375","line":2446,"column":43,"nodeType":"376","messageId":"377","endLine":2446,"endColumn":45},{"ruleId":"374","severity":1,"message":"375","line":2451,"column":43,"nodeType":"376","messageId":"377","endLine":2451,"endColumn":45},{"ruleId":"374","severity":1,"message":"375","line":2463,"column":30,"nodeType":"376","messageId":"377","endLine":2463,"endColumn":32},{"ruleId":"365","severity":1,"message":"393","line":4,"column":10,"nodeType":"367","messageId":"368","endLine":4,"endColumn":19},{"ruleId":"394","severity":1,"message":"395","line":14,"column":11,"nodeType":"396","endLine":18,"endColumn":12},"no-native-reassign",["425"],"no-negated-in-lhs",["426"],"@typescript-eslint/no-unused-vars","'Borsh' is defined but never used.","Identifier","unusedVar","'u64' is defined but never used.","'WhitelistConfig' is defined but never used.","@typescript-eslint/no-redeclare","'loc' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'bump' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTimeToMInt', 'getWhitelistAccounts', and 'getWhitelists'. Either include them or remove the dependency array.","ArrayExpression",["427"],"'wallet_bump' is assigned a value but never used.","'getWhitelistConfig' is assigned a value but never used.","'wallet_create' is assigned a value but never used.","'setCollection' is assigned a value but never used.","'deleteWhitelistAccount' is assigned a value but never used.","'hours' is already defined.","'minutes' is already defined.","'seconds' is already defined.","'deleteWhitelistConfig' is assigned a value but never used.","'withdrawFunds' is assigned a value but never used.","'PublicKey' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["425"],["426"],"'Snackbar' is defined but never used.","'Alert' is defined but never used.","'TypeAnimation' is defined but never used.","'ProgressBar' is defined but never used.","'alertState' is assigned a value but never used.","'setAlertState' is assigned a value but never used.","'message' is assigned a value but never used.","'decreaseWhitelistCount' is assigned a value but never used.","'l' is assigned a value but never used.",["428"],"'setCollectionDuringMint' is assigned a value but never used.","'createWhitelistAccount' is assigned a value but never used.","'k' is assigned a value but never used.","'delta' is already defined.","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["425"],["426"],["425"],["426"],"'sendAndConfirmTransaction' is defined but never used.",["429"],"'wallet_creation' is assigned a value but never used.","'openTeamRoom' is assigned a value but never used.","'openUpdates' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"432","fix":"434"},"Update the dependencies array to be: [anchorWallet, props.magicHatId, props.connection, refreshMagicHatState, wallet, whitelists, shouldMint, getWhitelists, getTimeToMInt, getWhitelistAccounts]",{"range":"435","text":"436"},"Update the dependencies array to be: [anchorWallet, props.magicHatId, props.connection, refreshMagicHatState, wallet, whitelists, shouldMint, currentWl, getWhitelists, getWhitelistAccounts, getTimeToMInt]",{"range":"437","text":"438"},{"range":"439","text":"438"},[18192,18329],"[anchorWallet, props.magicHatId, props.connection, refreshMagicHatState, wallet, whitelists, shouldMint, getWhitelists, getTimeToMInt, getWhitelistAccounts]",[25310,25462],"[anchorWallet, props.magicHatId, props.connection, refreshMagicHatState, wallet, whitelists, shouldMint, currentWl, getWhitelists, getWhitelistAccounts, getTimeToMInt]",[25497,25649]]
{"ast":null,"code":"import _slicedToArray from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/regenerator/index.js\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\n\nvar SimulateFactory = /*#__PURE__*/function () {\n  function SimulateFactory() {\n    _classCallCheck(this, SimulateFactory);\n  }\n\n  _createClass(SimulateFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n      var simulate = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _len,\n              args,\n              _key,\n              tx,\n              _splitArgsAndCtx,\n              _splitArgsAndCtx2,\n              ctx,\n              resp,\n              translatedErr,\n              logs,\n              events,\n              parser,\n              _args = arguments;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = _args[_key];\n                  }\n\n                  tx = txFn.apply(void 0, args);\n                  _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)), _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2), ctx = _splitArgsAndCtx2[1];\n                  resp = undefined;\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return provider.simulate(tx, ctx.signers, ctx.options);\n\n                case 7:\n                  resp = _context.sent;\n                  _context.next = 17;\n                  break;\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](4);\n                  console.log(\"Translating error\", _context.t0);\n                  translatedErr = ProgramError.parse(_context.t0, idlErrors);\n\n                  if (!(translatedErr === null)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  throw _context.t0;\n\n                case 16:\n                  throw translatedErr;\n\n                case 17:\n                  if (!(resp === undefined)) {\n                    _context.next = 19;\n                    break;\n                  }\n\n                  throw new Error(\"Unable to simulate transaction\");\n\n                case 19:\n                  if (!resp.value.err) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  throw new Error(\"Simulate error: \".concat(resp.value.err.toString()));\n\n                case 21:\n                  logs = resp.value.logs;\n\n                  if (logs) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  throw new Error(\"Simulated logs not found\");\n\n                case 24:\n                  events = [];\n\n                  if (idl.events) {\n                    parser = new EventParser(programId, coder);\n                    parser.parseLogs(logs, function (event) {\n                      events.push(event);\n                    });\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    events: events,\n                    raw: logs\n                  });\n\n                case 27:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 10]]);\n        }));\n\n        return function simulate() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      return simulate;\n    }\n  }]);\n\n  return SimulateFactory;\n}();\n\nexport { SimulateFactory as default };","map":{"version":3,"mappings":";;;;;AAGA,SAASA,eAAT,QAAgC,YAAhC;AAEA,SAASC,WAAT,QAAmC,UAAnC;AAGA,SAASC,YAAT,QAA6B,aAA7B;;IAEqBC,e;;;;;;;WACZ,eACLC,KADK,EAELC,IAFK,EAGLC,SAHK,EAILC,QAJK,EAKLC,KALK,EAMLC,SANK,EAOLC,GAPK,EAOG;MAER,IAAMC,QAAQ;QAAA,oEAAG;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBAAA,0BAAUC,IAAV;oBAAUA,IAAV;kBAAA;;kBACTC,EADS,GACJR,IAAI,MAAJ,SAAQO,IAAR,CADI;kBAAA,mBAECZ,eAAe,CAACI,KAAD,YAAYQ,IAAZ,EAFhB,2DAENE,GAFM;kBAGXC,IAHW,GAGJC,SAHI;kBAAA;kBAAA;kBAAA,OAKAT,QAAQ,CAACI,QAAT,CAAkBE,EAAlB,EAAsBC,GAAG,CAACG,OAA1B,EAAmCH,GAAG,CAACI,OAAvC,CALA;;gBAAA;kBAKbH,IALa;kBAAA;kBAAA;;gBAAA;kBAAA;kBAAA;kBAObI,OAAO,CAACC,GAAR,CAAY,mBAAZ;kBACIC,aARS,GAQOnB,YAAY,CAACoB,KAAb,cAAwBhB,SAAxB,CARP;;kBAAA,MASTe,aAAa,KAAK,IATT;oBAAA;oBAAA;kBAAA;;kBAAA;;gBAAA;kBAAA,MAYPA,aAZO;;gBAAA;kBAAA,MAcXN,IAAI,KAAKC,SAdE;oBAAA;oBAAA;kBAAA;;kBAAA,MAeP,IAAIO,KAAJ,CAAU,gCAAV,CAfO;;gBAAA;kBAAA,KAiBXR,IAAI,CAACS,KAAL,CAAWC,GAjBA;oBAAA;oBAAA;kBAAA;;kBAAA,MAkBP,IAAIF,KAAJ,2BAA6BR,IAAI,CAACS,KAAL,CAAWC,GAAX,CAAeC,QAAf,EAA7B,EAlBO;;gBAAA;kBAoBTC,IApBS,GAoBFZ,IAAI,CAACS,KAAL,CAAWG,IApBT;;kBAAA,IAqBVA,IArBU;oBAAA;oBAAA;kBAAA;;kBAAA,MAsBP,IAAIJ,KAAJ,CAAU,0BAAV,CAtBO;;gBAAA;kBAyBTK,MAzBS,GAyBA,EAzBA;;kBA0Bf,IAAIlB,GAAG,CAACkB,MAAR,EAAgB;oBACVC,MADU,GACD,IAAI5B,WAAJ,CAAgBQ,SAAhB,EAA2BD,KAA3B,CADC;oBAEdqB,MAAM,CAACC,SAAP,CAAiBH,IAAjB,EAAuB,UAACI,KAAD,EAAU;sBAC/BH,MAAM,CAACI,IAAP,CAAYD,KAAZ;oBACD,CAFD;kBAGD;;kBA/Bc,iCAgCR;oBAAEH,MAAM,EAANA,MAAF;oBAAUK,GAAG,EAAEN;kBAAf,CAhCQ;;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAAH;;QAAA,gBAARhB,QAAQ;UAAA;QAAA;MAAA,GAAd;;MAmCA,OAAOA,QAAP;IACD;;;;;;SA9CkBR,e","names":["splitArgsAndCtx","EventParser","ProgramError","SimulateFactory","idlIx","txFn","idlErrors","provider","coder","programId","idl","simulate","args","tx","ctx","resp","undefined","signers","options","console","log","translatedErr","parse","Error","value","err","toString","logs","events","parser","parseLogs","event","push","raw"],"sourceRoot":"","sources":["../../../../src/program/namespace/simulate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/vamshikrishnaenjapuri/Documents/secretalpha/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/vamshikrishnaenjapuri/Documents/secretalpha/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vamshikrishnaenjapuri/Documents/secretalpha/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/vamshikrishnaenjapuri/Documents/secretalpha/node_modules/@babel/runtime/regenerator/index.js\";\nimport camelCase from \"camelcase\";\nimport EventEmitter from \"eventemitter3\";\nimport * as bs58 from \"bs58\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { ACCOUNT_DISCRIMINATOR_SIZE, accountDiscriminator, accountSize } from \"../../coder\";\nimport { translateAddress } from \"../common\";\nimport { getProvider } from \"../../\";\nimport * as pubkeyUtil from \"../../utils/pubkey\";\n\nvar AccountFactory = /*#__PURE__*/function () {\n  function AccountFactory() {\n    _classCallCheck(this, AccountFactory);\n  }\n\n  _createClass(AccountFactory, null, [{\n    key: \"build\",\n    value: function build(idl, coder, programId, provider) {\n      var accountFns = {};\n      idl.accounts.forEach(function (idlAccount) {\n        var name = camelCase(idlAccount.name);\n        accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n      });\n      return accountFns;\n    }\n  }]);\n\n  return AccountFactory;\n}();\n\nexport { AccountFactory as default };\nexport var AccountClient = /*#__PURE__*/function () {\n  function AccountClient(idl, idlAccount, programId, provider, coder) {\n    _classCallCheck(this, AccountClient);\n\n    this._idlAccount = idlAccount;\n    this._programId = programId;\n    this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n    this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n    this._size = ACCOUNT_DISCRIMINATOR_SIZE + accountSize(idl, idlAccount);\n  }\n  /**\n   * Returns the number of bytes in this account.\n   */\n\n\n  _createClass(AccountClient, [{\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n    /**\n     * Returns the program ID owning all accounts.\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */\n\n  }, {\n    key: \"provider\",\n    get: function get() {\n      return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */\n\n  }, {\n    key: \"coder\",\n    get: function get() {\n      return this._coder;\n    }\n    /**\n     * Returns a deserialized account.\n     *\n     * @param address The address of the account to fetch.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n        var accountInfo, discriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._provider.connection.getAccountInfo(translateAddress(address));\n\n              case 2:\n                accountInfo = _context.sent;\n\n                if (!(accountInfo === null)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Account does not exist \".concat(address.toString()));\n\n              case 5:\n                _context.next = 7;\n                return accountDiscriminator(this._idlAccount.name);\n\n              case 7:\n                discriminator = _context.sent;\n\n                if (!discriminator.compare(accountInfo.data.slice(0, 8))) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw new Error(\"Invalid account discriminator\");\n\n              case 10:\n                return _context.abrupt(\"return\", this._coder.accounts.decode(this._idlAccount.name, accountInfo.data));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     * Returns all instances of this account type for the program.\n     */\n\n  }, {\n    key: \"all\",\n    value: function () {\n      var _all = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filter) {\n        var _this = this;\n\n        var bytes, resp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return accountDiscriminator(this._idlAccount.name);\n\n              case 2:\n                bytes = _context2.sent;\n\n                if (filter !== undefined) {\n                  bytes = Buffer.concat([bytes, filter]);\n                }\n\n                _context2.next = 6;\n                return this._provider.connection.getProgramAccounts(this._programId, {\n                  commitment: this._provider.connection.commitment,\n                  filters: [{\n                    memcmp: {\n                      offset: 0,\n                      bytes: bs58.encode(bytes)\n                    }\n                  }]\n                });\n\n              case 6:\n                resp = _context2.sent;\n                return _context2.abrupt(\"return\", resp.map(function (_ref) {\n                  var pubkey = _ref.pubkey,\n                      account = _ref.account;\n                  return {\n                    publicKey: pubkey,\n                    account: _this._coder.accounts.decode(_this._idlAccount.name, account.data)\n                  };\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function all(_x2) {\n        return _all.apply(this, arguments);\n      }\n\n      return all;\n    }()\n    /**\n     * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n     * changes.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(address, commitment) {\n      var _this2 = this;\n\n      if (subscriptions.get(address.toString())) {\n        return subscriptions.get(address.toString()).ee;\n      }\n\n      var ee = new EventEmitter();\n      address = translateAddress(address);\n\n      var listener = this._provider.connection.onAccountChange(address, function (acc) {\n        var account = _this2._coder.accounts.decode(_this2._idlAccount.name, acc.data);\n\n        ee.emit(\"change\", account);\n      }, commitment);\n\n      subscriptions.set(address.toString(), {\n        ee: ee,\n        listener: listener\n      });\n      return ee;\n    }\n    /**\n     * Unsubscribes from the account at the given address.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(address) {\n      var sub = subscriptions.get(address.toString());\n\n      if (!sub) {\n        console.warn(\"Address is not subscribed\");\n        return;\n      }\n\n      if (subscriptions) {\n        this._provider.connection.removeAccountChangeListener(sub.listener).then(function () {\n          subscriptions.delete(address.toString());\n        }).catch(console.error);\n      }\n    }\n    /**\n     * Returns an instruction for creating this account.\n     */\n\n  }, {\n    key: \"createInstruction\",\n    value: function () {\n      var _createInstruction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(signer, sizeOverride) {\n        var size;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                size = this.size;\n                _context3.t0 = SystemProgram;\n                _context3.t1 = this._provider.wallet.publicKey;\n                _context3.t2 = signer.publicKey;\n                _context3.t3 = sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size;\n                _context3.next = 7;\n                return this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size);\n\n              case 7:\n                _context3.t4 = _context3.sent;\n                _context3.t5 = this._programId;\n                _context3.t6 = {\n                  fromPubkey: _context3.t1,\n                  newAccountPubkey: _context3.t2,\n                  space: _context3.t3,\n                  lamports: _context3.t4,\n                  programId: _context3.t5\n                };\n                return _context3.abrupt(\"return\", _context3.t0.createAccount.call(_context3.t0, _context3.t6));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function createInstruction(_x3, _x4) {\n        return _createInstruction.apply(this, arguments);\n      }\n\n      return createInstruction;\n    }()\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated account. Args are keys to associate.\n     * Order matters.\n     */\n\n  }, {\n    key: \"associated\",\n    value: function () {\n      var _associated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var addr,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.associatedAddress.apply(this, _args4);\n\n              case 2:\n                addr = _context4.sent;\n                _context4.next = 5;\n                return this.fetch(addr);\n\n              case 5:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function associated() {\n        return _associated.apply(this, arguments);\n      }\n\n      return associated;\n    }()\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated address. Args are keys to associate.\n     * Order matters.\n     */\n\n  }, {\n    key: \"associatedAddress\",\n    value: function () {\n      var _associatedAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _len,\n            args,\n            _key,\n            _args5 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len = _args5.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = _args5[_key];\n                }\n\n                _context5.next = 3;\n                return pubkeyUtil.associated.apply(pubkeyUtil, [this._programId].concat(args));\n\n              case 3:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function associatedAddress() {\n        return _associatedAddress.apply(this, arguments);\n      }\n\n      return associatedAddress;\n    }()\n  }]);\n\n  return AccountClient;\n}(); // Tracks all subscriptions.\n\nvar subscriptions = new Map();","map":{"version":3,"mappings":"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","names":["camelCase","EventEmitter","bs58","SystemProgram","Coder","ACCOUNT_DISCRIMINATOR_SIZE","accountDiscriminator","accountSize","translateAddress","getProvider","pubkeyUtil","AccountFactory","idl","coder","programId","provider","accountFns","accounts","forEach","idlAccount","name","AccountClient","_idlAccount","_programId","_provider","_coder","_size","address","connection","getAccountInfo","accountInfo","Error","toString","discriminator","compare","data","slice","decode","filter","bytes","undefined","Buffer","concat","getProgramAccounts","commitment","filters","memcmp","offset","encode","resp","map","pubkey","account","publicKey","subscriptions","get","ee","listener","onAccountChange","acc","emit","set","sub","console","warn","removeAccountChangeListener","then","delete","catch","error","signer","sizeOverride","size","wallet","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","associatedAddress","addr","fetch","args","associated","Map"],"sourceRoot":"","sources":["../../../../src/program/namespace/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Transaction } from '@solana/web3.js';\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nexport const getErrorForTransaction = async (connection, txid) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n  const errors = [];\n\n  if (tx !== null && tx !== void 0 && tx.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\nexport let SequenceType;\n\n(function (SequenceType) {\n  SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\n  SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\n  SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\n})(SequenceType || (SequenceType = {}));\n\nexport async function sendTransactionsWithManualRetry(connection, wallet, instructions, signers) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(connection, wallet, instructions[0], filteredSigners[0], 'single');\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const {\n          txs\n        } = await sendTransactions(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\nexport const sendTransactions = async function (connection, wallet, instructionSet, signersSet) {\n  let sequenceType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : SequenceType.Parallel;\n  let commitment = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'singleGossip';\n  let successCallback = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : (txid, ind) => {};\n  let failCallback = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : (txid, ind) => false;\n  let block = arguments.length > 8 ? arguments[8] : undefined;\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  const unsignedTxns = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners( // fee payed by the wallet owner\n    wallet.publicKey, ...signers.map(s => s.publicKey));\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n  const pendingTxns = [];\n  let breakEarlyObject = {\n    breakEarly: false,\n    i: 0\n  };\n  console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i]\n    });\n    signedTxnPromise.then(_ref => {\n      let {\n        txid,\n        slot\n      } = _ref;\n      successCallback(txid, i);\n    }).catch(reason => {\n      // @ts-ignore\n      failCallback(signedTxns[i], i);\n\n      if (sequenceType === SequenceType.StopOnFailure) {\n        breakEarlyObject.breakEarly = true;\n        breakEarlyObject.i = i;\n      }\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i); // Return the txn we failed on by index\n\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns)\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return {\n    number: signedTxns.length,\n    txs: await Promise.all(pendingTxns)\n  };\n};\nexport const sendTransaction = async function (connection, wallet, instructions, signers) {\n  let awaitConfirmation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  let commitment = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'singleGossip';\n  let includesFeePayer = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let block = arguments.length > 7 ? arguments[7] : undefined;\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners( // fee payed by the wallet owner\n    wallet.publicKey, ...signers.map(s => s.publicKey));\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment\n  };\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\n    if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n    slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n\n    if (confirmation !== null && confirmation !== void 0 && confirmation.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return {\n    txid,\n    slot\n  };\n};\nexport const sendTransactionWithRetry = async function (connection, wallet, instructions, signers) {\n  let commitment = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'singleGossip';\n  let includesFeePayer = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let block = arguments.length > 6 ? arguments[6] : undefined;\n  let beforeSend = arguments.length > 7 ? arguments[7] : undefined;\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners( // fee payed by the wallet owner\n    wallet.publicKey, ...signers.map(s => s.publicKey));\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const {\n    txid,\n    slot\n  } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction\n  });\n  return {\n    txid,\n    slot\n  };\n};\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\nconst DEFAULT_TIMEOUT = 15000;\nexport async function sendSignedTransaction(_ref2) {\n  let {\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT\n  } = _ref2;\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true\n  });\n  console.log('Started awaiting confirmation for', txid);\n  let done = false;\n\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true\n      });\n      await sleep(500);\n    }\n  })();\n\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\n    if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n  } catch (err) {\n    console.error('Timeout Error caught', err);\n\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n\n    let simulateResult = null;\n\n    try {\n      simulateResult = (await simulateTransaction(connection, signedTransaction, 'single')).value;\n    } catch (e) {}\n\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n\n          if (line.startsWith('Program log: ')) {\n            throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\n          }\n        }\n      }\n\n      throw new Error(JSON.stringify(simulateResult.err));\n    } // throw new Error('Transaction failed');\n\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return {\n    txid,\n    slot\n  };\n}\n\nasync function simulateTransaction(connection, transaction, commitment) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash( // @ts-ignore\n  connection._disableBlockhashCaching);\n  const signData = transaction.serializeMessage(); // @ts-ignore\n\n  const wireTransaction = transaction._serialize(signData);\n\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config = {\n    encoding: 'base64',\n    commitment\n  };\n  const args = [encodedTransaction, config]; // @ts-ignore\n\n  const res = await connection._rpcRequest('simulateTransaction', args);\n\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(txid, timeout, connection) {\n  let commitment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'recent';\n  let queryStatus = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({\n        timeout: true\n      });\n    }, timeout);\n\n    try {\n      subId = connection.onSignature(txid, (result, context) => {\n        done = true;\n        status = {\n          err: result.err,\n          slot: context.slot,\n          confirmations: 0\n        };\n\n        if (result.err) {\n          console.log('Rejected via websocket', result.err);\n          reject(status);\n        } else {\n          console.log('Resolved via websocket', result);\n          resolve(status);\n        }\n      }, commitment);\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n\n      await sleep(2000);\n    }\n  }); //@ts-ignore\n\n  if (connection && connection._signatureSubscriptions && connection._signatureSubscriptions[subId]) connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\n\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","map":{"version":3,"names":["Transaction","WalletNotConnectedError","getErrorForTransaction","connection","txid","confirmTransaction","tx","getParsedConfirmedTransaction","errors","meta","logMessages","forEach","log","regex","m","exec","index","lastIndex","length","push","SequenceType","sendTransactionsWithManualRetry","wallet","instructions","signers","stopPoint","tries","lastInstructionsLength","toRemoveSigners","filter","instr","i","ids","filteredSigners","_","slice","id","sendTransactionWithRetry","txs","sendTransactions","StopOnFailure","concat","map","t","e","console","error","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","publicKey","unsignedTxns","getRecentBlockhash","transaction","instruction","add","recentBlockhash","blockhash","setSigners","s","partialSign","signedTxns","signAllTransactions","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","number","Promise","all","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","confirmation","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","Error","err","beforeSend","getUnixTs","Date","getTime","timeout","startTime","done","sleep","simulateResult","simulateTransaction","value","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","config","encoding","args","res","_rpcRequest","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","signatureStatuses","getSignatureStatuses","_signatureSubscriptions","removeSignatureListener","ms"],"sources":["/Users/vamshikrishnaenjapuri/Documents/secretalpha/src/connection.tsx"],"sourcesContent":["import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection && connection._signatureSubscriptions &&connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
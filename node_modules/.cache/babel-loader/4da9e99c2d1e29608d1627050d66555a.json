{"ast":null,"code":"import _toArray from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _slicedToArray from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createClass from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nvar _excluded = [\"message\"];\nimport _regeneratorRuntime from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(toFailures),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(run);\n\n/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nvar StructError = /*#__PURE__*/function (_TypeError) {\n  _inherits(StructError, _TypeError);\n\n  var _super = _createSuper(StructError);\n\n  function StructError(failure, failures) {\n    var _this;\n\n    _classCallCheck(this, StructError);\n\n    var cached;\n\n    var message = failure.message,\n        rest = _objectWithoutProperties(failure, _excluded);\n\n    var path = failure.path;\n    var msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    _this = _super.call(this, msg);\n    Object.assign(_assertThisInitialized(_this), rest);\n    _this.name = _this.constructor.name;\n\n    _this.failures = function () {\n      var _cached;\n\n      return (_cached = cached) != null ? _cached : cached = [failure].concat(_toConsumableArray(failures()));\n    };\n\n    return _this;\n  }\n\n  return _createClass(StructError);\n}( /*#__PURE__*/_wrapNativeSuper(TypeError));\n/**\n * Check if a value is an iterator.\n */\n\n\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\n\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\n\nfunction shiftIterator(input) {\n  var _input$next = input.next(),\n      done = _input$next.done,\n      value = _input$next.value;\n\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n\n  var path = context.path,\n      branch = context.branch;\n  var type = struct.type;\n  var _result = result,\n      refinement = _result.refinement,\n      _result$message = _result.message,\n      message = _result$message === void 0 ? \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\" : _result$message;\n  return _objectSpread(_objectSpread({\n    value: value,\n    type: type,\n    refinement: refinement,\n    key: path[path.length - 1],\n    path: path,\n    branch: branch\n  }, result), {}, {\n    message: message\n  });\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\n\nfunction toFailures(result, context, struct, value) {\n  var _iterator, _step, r, failure;\n\n  return _regeneratorRuntime.wrap(function toFailures$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!isIterable(result)) {\n            result = [result];\n          }\n\n          _iterator = _createForOfIteratorHelper(result);\n          _context.prev = 2;\n\n          _iterator.s();\n\n        case 4:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 12;\n            break;\n          }\n\n          r = _step.value;\n          failure = toFailure(r, context, struct, value);\n\n          if (!failure) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 10;\n          return failure;\n\n        case 10:\n          _context.next = 4;\n          break;\n\n        case 12:\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n\n          _iterator.e(_context.t0);\n\n        case 17:\n          _context.prev = 17;\n\n          _iterator.f();\n\n          return _context.finish(17);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 14, 17, 20]]);\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\n\nfunction run(value, struct) {\n  var options,\n      _options$path,\n      path,\n      _options$branch,\n      branch,\n      _options$coerce,\n      coerce,\n      _options$mask,\n      mask,\n      ctx,\n      key,\n      valid,\n      _iterator2,\n      _step2,\n      _failure,\n      _iterator3,\n      _step3,\n      _step3$value,\n      k,\n      v,\n      s,\n      ts,\n      _iterator5,\n      _step5,\n      t,\n      _iterator4,\n      _step4,\n      failure,\n      _args2 = arguments;\n\n  return _regeneratorRuntime.wrap(function run$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n          _options$path = options.path, path = _options$path === void 0 ? [] : _options$path, _options$branch = options.branch, branch = _options$branch === void 0 ? [value] : _options$branch, _options$coerce = options.coerce, coerce = _options$coerce === void 0 ? false : _options$coerce, _options$mask = options.mask, mask = _options$mask === void 0 ? false : _options$mask;\n          ctx = {\n            path: path,\n            branch: branch\n          };\n\n          if (coerce) {\n            value = struct.coercer(value, ctx);\n\n            if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n              for (key in value) {\n                if (struct.schema[key] === undefined) {\n                  delete value[key];\n                }\n              }\n            }\n          }\n\n          valid = true;\n          _iterator2 = _createForOfIteratorHelper(struct.validator(value, ctx));\n          _context2.prev = 6;\n\n          _iterator2.s();\n\n        case 8:\n          if ((_step2 = _iterator2.n()).done) {\n            _context2.next = 15;\n            break;\n          }\n\n          _failure = _step2.value;\n          valid = false;\n          _context2.next = 13;\n          return [_failure, undefined];\n\n        case 13:\n          _context2.next = 8;\n          break;\n\n        case 15:\n          _context2.next = 20;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](6);\n\n          _iterator2.e(_context2.t0);\n\n        case 20:\n          _context2.prev = 20;\n\n          _iterator2.f();\n\n          return _context2.finish(20);\n\n        case 23:\n          _iterator3 = _createForOfIteratorHelper(struct.entries(value, ctx));\n          _context2.prev = 24;\n\n          _iterator3.s();\n\n        case 26:\n          if ((_step3 = _iterator3.n()).done) {\n            _context2.next = 53;\n            break;\n          }\n\n          _step3$value = _slicedToArray(_step3.value, 3), k = _step3$value[0], v = _step3$value[1], s = _step3$value[2];\n          ts = run(v, s, {\n            path: k === undefined ? path : [].concat(_toConsumableArray(path), [k]),\n            branch: k === undefined ? branch : [].concat(_toConsumableArray(branch), [v]),\n            coerce: coerce,\n            mask: mask\n          });\n          _iterator5 = _createForOfIteratorHelper(ts);\n          _context2.prev = 30;\n\n          _iterator5.s();\n\n        case 32:\n          if ((_step5 = _iterator5.n()).done) {\n            _context2.next = 43;\n            break;\n          }\n\n          t = _step5.value;\n\n          if (!t[0]) {\n            _context2.next = 40;\n            break;\n          }\n\n          valid = false;\n          _context2.next = 38;\n          return [t[0], undefined];\n\n        case 38:\n          _context2.next = 41;\n          break;\n\n        case 40:\n          if (coerce) {\n            v = t[1];\n\n            if (k === undefined) {\n              value = v;\n            } else if (value instanceof Map) {\n              value.set(k, v);\n            } else if (value instanceof Set) {\n              value.add(v);\n            } else if (isObject(value)) {\n              value[k] = v;\n            }\n          }\n\n        case 41:\n          _context2.next = 32;\n          break;\n\n        case 43:\n          _context2.next = 48;\n          break;\n\n        case 45:\n          _context2.prev = 45;\n          _context2.t1 = _context2[\"catch\"](30);\n\n          _iterator5.e(_context2.t1);\n\n        case 48:\n          _context2.prev = 48;\n\n          _iterator5.f();\n\n          return _context2.finish(48);\n\n        case 51:\n          _context2.next = 26;\n          break;\n\n        case 53:\n          _context2.next = 58;\n          break;\n\n        case 55:\n          _context2.prev = 55;\n          _context2.t2 = _context2[\"catch\"](24);\n\n          _iterator3.e(_context2.t2);\n\n        case 58:\n          _context2.prev = 58;\n\n          _iterator3.f();\n\n          return _context2.finish(58);\n\n        case 61:\n          if (!valid) {\n            _context2.next = 80;\n            break;\n          }\n\n          _iterator4 = _createForOfIteratorHelper(struct.refiner(value, ctx));\n          _context2.prev = 63;\n\n          _iterator4.s();\n\n        case 65:\n          if ((_step4 = _iterator4.n()).done) {\n            _context2.next = 72;\n            break;\n          }\n\n          failure = _step4.value;\n          valid = false;\n          _context2.next = 70;\n          return [failure, undefined];\n\n        case 70:\n          _context2.next = 65;\n          break;\n\n        case 72:\n          _context2.next = 77;\n          break;\n\n        case 74:\n          _context2.prev = 74;\n          _context2.t3 = _context2[\"catch\"](63);\n\n          _iterator4.e(_context2.t3);\n\n        case 77:\n          _context2.prev = 77;\n\n          _iterator4.f();\n\n          return _context2.finish(77);\n\n        case 80:\n          if (!valid) {\n            _context2.next = 83;\n            break;\n          }\n\n          _context2.next = 83;\n          return [undefined, value];\n\n        case 83:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[6, 17, 20, 23], [24, 55, 58, 61], [30, 45, 48, 51], [63, 74, 77, 80]]);\n}\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\n\nvar Struct = /*#__PURE__*/function () {\n  function Struct(props) {\n    var _this2 = this;\n\n    _classCallCheck(this, Struct);\n\n    var type = props.type,\n        schema = props.schema,\n        validator = props.validator,\n        refiner = props.refiner,\n        _props$coercer = props.coercer,\n        coercer = _props$coercer === void 0 ? function (value) {\n      return value;\n    } : _props$coercer,\n        _props$entries = props.entries,\n        entries = _props$entries === void 0 ? /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee);\n    }) : _props$entries;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n\n    if (validator) {\n      this.validator = function (value, context) {\n        var result = validator(value, context);\n        return toFailures(result, context, _this2, value);\n      };\n    } else {\n      this.validator = function () {\n        return [];\n      };\n    }\n\n    if (refiner) {\n      this.refiner = function (value, context) {\n        var result = refiner(value, context);\n        return toFailures(result, context, _this2, value);\n      };\n    } else {\n      this.refiner = function () {\n        return [];\n      };\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n\n  _createClass(Struct, [{\n    key: \"assert\",\n    value: function assert(value) {\n      return _assert(value, this);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(value) {\n      return _create(value, this);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(value) {\n      return _is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema.\n     */\n\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      return _mask(value, this);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `withCoercion` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful.\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _validate(value, this, options);\n    }\n  }]);\n\n  return Struct;\n}();\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\n\nfunction _assert(value, struct) {\n  var result = _validate(value, struct);\n\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\n\nfunction _create(value, struct) {\n  var result = _validate(value, struct, {\n    coerce: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\n\nfunction _mask(value, struct) {\n  var result = _validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\n\nfunction _is(value, struct) {\n  var result = _validate(value, struct);\n\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\n\nfunction _validate(value, struct) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var tuples = run(value, struct, options);\n  var tuple = shiftIterator(tuples);\n\n  if (tuple[0]) {\n    var error = new StructError(tuple[0], /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _iterator6, _step6, t;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator6 = _createForOfIteratorHelper(tuples);\n              _context4.prev = 1;\n\n              _iterator6.s();\n\n            case 3:\n              if ((_step6 = _iterator6.n()).done) {\n                _context4.next = 10;\n                break;\n              }\n\n              t = _step6.value;\n\n              if (!t[0]) {\n                _context4.next = 8;\n                break;\n              }\n\n              _context4.next = 8;\n              return t[0];\n\n            case 8:\n              _context4.next = 3;\n              break;\n\n            case 10:\n              _context4.next = 15;\n              break;\n\n            case 12:\n              _context4.prev = 12;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              _iterator6.e(_context4.t0);\n\n            case 15:\n              _context4.prev = 15;\n\n              _iterator6.f();\n\n              return _context4.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee2, null, [[1, 12, 15, 18]]);\n    }));\n    return [error, undefined];\n  } else {\n    var v = tuple[1];\n    return [undefined, v];\n  }\n}\n\nfunction assign() {\n  for (var _len = arguments.length, Structs = new Array(_len), _key = 0; _key < _len; _key++) {\n    Structs[_key] = arguments[_key];\n  }\n\n  var schemas = Structs.map(function (s) {\n    return s.schema;\n  });\n  var schema = Object.assign.apply(Object, [{}].concat(_toConsumableArray(schemas)));\n  return object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator: validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\n\nfunction deprecated(struct, log) {\n  return new Struct(_objectSpread(_objectSpread({}, struct), {}, {\n    refiner: function refiner(value, ctx) {\n      return value === undefined || struct.refiner(value, ctx);\n    },\n    validator: function validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n  }));\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\n\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value, ctx) {\n      var struct;\n      return _regeneratorRuntime.wrap(function entries$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              struct = fn(value, ctx);\n              return _context5.delegateYield(struct.entries(value, ctx), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value, ctx) {\n      var struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n    coercer: function coercer(value, ctx) {\n      var struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\n\nfunction lazy(fn) {\n  var struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value, ctx) {\n      var _struct;\n\n      return _regeneratorRuntime.wrap(function entries$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              (_struct = struct) != null ? _struct : struct = fn();\n              return _context6.delegateYield(struct.entries(value, ctx), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value, ctx) {\n      var _struct2;\n\n      (_struct2 = struct) != null ? _struct2 : struct = fn();\n      return struct.validator(value, ctx);\n    },\n    coercer: function coercer(value, ctx) {\n      var _struct3;\n\n      (_struct3 = struct) != null ? _struct3 : struct = fn();\n      return struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\n\nfunction omit(struct, keys) {\n  var schema = struct.schema;\n\n  var subschema = _objectSpread({}, schema);\n\n  var _iterator7 = _createForOfIteratorHelper(keys),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var key = _step7.value;\n      delete subschema[key];\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return object(subschema);\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\n\nfunction partial(struct) {\n  var schema = struct instanceof Struct ? _objectSpread({}, struct.schema) : _objectSpread({}, struct);\n\n  for (var key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\n\nfunction pick(struct, keys) {\n  var schema = struct.schema;\n  var subschema = {};\n\n  var _iterator8 = _createForOfIteratorHelper(keys),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var key = _step8.value;\n      subschema[key] = schema[key];\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\n\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n/**\n * Ensure that any value passes validation.\n */\n\n\nfunction any() {\n  return define('any', function () {\n    return true;\n  });\n}\n\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value) {\n      var _iterator9, _step9, _step9$value, i, v;\n\n      return _regeneratorRuntime.wrap(function entries$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(Element && Array.isArray(value))) {\n                _context7.next = 18;\n                break;\n              }\n\n              _iterator9 = _createForOfIteratorHelper(value.entries());\n              _context7.prev = 2;\n\n              _iterator9.s();\n\n            case 4:\n              if ((_step9 = _iterator9.n()).done) {\n                _context7.next = 10;\n                break;\n              }\n\n              _step9$value = _slicedToArray(_step9.value, 2), i = _step9$value[0], v = _step9$value[1];\n              _context7.next = 8;\n              return [i, v, Element];\n\n            case 8:\n              _context7.next = 4;\n              break;\n\n            case 10:\n              _context7.next = 15;\n              break;\n\n            case 12:\n              _context7.prev = 12;\n              _context7.t0 = _context7[\"catch\"](2);\n\n              _iterator9.e(_context7.t0);\n\n            case 15:\n              _context7.prev = 15;\n\n              _iterator9.f();\n\n              return _context7.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, entries, null, [[2, 12, 15, 18]]);\n    }),\n    coercer: function coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n    validator: function validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\n\nfunction boolean() {\n  return define('boolean', function (value) {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\n\nfunction date() {\n  return define('date', function (value) {\n    return value instanceof Date && !isNaN(value.getTime()) || \"Expected a valid `Date` object, but received: \" + print(value);\n  });\n}\n\nfunction enums(values) {\n  var schema = {};\n  var description = values.map(function (v) {\n    return print(v);\n  }).join();\n\n  var _iterator10 = _createForOfIteratorHelper(values),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var key = _step10.value;\n      schema[key] = key;\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema: schema,\n    validator: function validator(value) {\n      return values.includes(value) || \"Expected one of `\" + description + \"`, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a function.\n */\n\n\nfunction func() {\n  return define('func', function (value) {\n    return typeof value === 'function' || \"Expected a function, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\n\nfunction instance(Class) {\n  return define('instance', function (value) {\n    return value instanceof Class || \"Expected a `\" + Class.name + \"` instance, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\n\n\nfunction integer() {\n  return define('integer', function (value) {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || \"Expected an integer, but received: \" + print(value);\n  });\n}\n\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value, ctx) {\n      var _iterator11, _step11, S;\n\n      return _regeneratorRuntime.wrap(function entries$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _iterator11 = _createForOfIteratorHelper(Structs);\n              _context8.prev = 1;\n\n              _iterator11.s();\n\n            case 3:\n              if ((_step11 = _iterator11.n()).done) {\n                _context8.next = 8;\n                break;\n              }\n\n              S = _step11.value;\n              return _context8.delegateYield(S.entries(value, ctx), \"t0\", 6);\n\n            case 6:\n              _context8.next = 3;\n              break;\n\n            case 8:\n              _context8.next = 13;\n              break;\n\n            case 10:\n              _context8.prev = 10;\n              _context8.t1 = _context8[\"catch\"](1);\n\n              _iterator11.e(_context8.t1);\n\n            case 13:\n              _context8.prev = 13;\n\n              _iterator11.f();\n\n              return _context8.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, entries, null, [[1, 10, 13, 16]]);\n    }),\n    validator: /*#__PURE__*/_regeneratorRuntime.mark(function validator(value, ctx) {\n      var _iterator12, _step12, S;\n\n      return _regeneratorRuntime.wrap(function validator$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _iterator12 = _createForOfIteratorHelper(Structs);\n              _context9.prev = 1;\n\n              _iterator12.s();\n\n            case 3:\n              if ((_step12 = _iterator12.n()).done) {\n                _context9.next = 8;\n                break;\n              }\n\n              S = _step12.value;\n              return _context9.delegateYield(S.validator(value, ctx), \"t0\", 6);\n\n            case 6:\n              _context9.next = 3;\n              break;\n\n            case 8:\n              _context9.next = 13;\n              break;\n\n            case 10:\n              _context9.prev = 10;\n              _context9.t1 = _context9[\"catch\"](1);\n\n              _iterator12.e(_context9.t1);\n\n            case 13:\n              _context9.prev = 13;\n\n              _iterator12.f();\n\n              return _context9.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, validator, null, [[1, 10, 13, 16]]);\n    }),\n    refiner: /*#__PURE__*/_regeneratorRuntime.mark(function refiner(value, ctx) {\n      var _iterator13, _step13, S;\n\n      return _regeneratorRuntime.wrap(function refiner$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _iterator13 = _createForOfIteratorHelper(Structs);\n              _context10.prev = 1;\n\n              _iterator13.s();\n\n            case 3:\n              if ((_step13 = _iterator13.n()).done) {\n                _context10.next = 8;\n                break;\n              }\n\n              S = _step13.value;\n              return _context10.delegateYield(S.refiner(value, ctx), \"t0\", 6);\n\n            case 6:\n              _context10.next = 3;\n              break;\n\n            case 8:\n              _context10.next = 13;\n              break;\n\n            case 10:\n              _context10.prev = 10;\n              _context10.t1 = _context10[\"catch\"](1);\n\n              _iterator13.e(_context10.t1);\n\n            case 13:\n              _context10.prev = 13;\n\n              _iterator13.f();\n\n              return _context10.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, refiner, null, [[1, 10, 13, 16]]);\n    })\n  });\n}\n\nfunction literal(constant) {\n  var description = print(constant);\n  var t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator: function validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n  });\n}\n\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value) {\n      var _iterator14, _step14, _step14$value, k, v;\n\n      return _regeneratorRuntime.wrap(function entries$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!(Key && Value && value instanceof Map)) {\n                _context11.next = 20;\n                break;\n              }\n\n              _iterator14 = _createForOfIteratorHelper(value.entries());\n              _context11.prev = 2;\n\n              _iterator14.s();\n\n            case 4:\n              if ((_step14 = _iterator14.n()).done) {\n                _context11.next = 12;\n                break;\n              }\n\n              _step14$value = _slicedToArray(_step14.value, 2), k = _step14$value[0], v = _step14$value[1];\n              _context11.next = 8;\n              return [k, k, Key];\n\n            case 8:\n              _context11.next = 10;\n              return [k, v, Value];\n\n            case 10:\n              _context11.next = 4;\n              break;\n\n            case 12:\n              _context11.next = 17;\n              break;\n\n            case 14:\n              _context11.prev = 14;\n              _context11.t0 = _context11[\"catch\"](2);\n\n              _iterator14.e(_context11.t0);\n\n            case 17:\n              _context11.prev = 17;\n\n              _iterator14.f();\n\n              return _context11.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, entries, null, [[2, 14, 17, 20]]);\n    }),\n    coercer: function coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n    validator: function validator(value) {\n      return value instanceof Map || \"Expected a `Map` object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\n\n\nfunction never() {\n  return define('never', function () {\n    return false;\n  });\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\n\nfunction nullable(struct) {\n  return new Struct(_objectSpread(_objectSpread({}, struct), {}, {\n    validator: function validator(value, ctx) {\n      return value === null || struct.validator(value, ctx);\n    },\n    refiner: function refiner(value, ctx) {\n      return value === null || struct.refiner(value, ctx);\n    }\n  }));\n}\n/**\n * Ensure that a value is a number.\n */\n\n\nfunction number() {\n  return define('number', function (value) {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\n\nfunction object(schema) {\n  var knowns = schema ? Object.keys(schema) : [];\n  var Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value) {\n      var unknowns, _iterator15, _step15, key, _iterator16, _step16, _key2;\n\n      return _regeneratorRuntime.wrap(function entries$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (!(schema && isObject(value))) {\n                _context12.next = 37;\n                break;\n              }\n\n              unknowns = new Set(Object.keys(value));\n              _iterator15 = _createForOfIteratorHelper(knowns);\n              _context12.prev = 3;\n\n              _iterator15.s();\n\n            case 5:\n              if ((_step15 = _iterator15.n()).done) {\n                _context12.next = 12;\n                break;\n              }\n\n              key = _step15.value;\n              unknowns.delete(key);\n              _context12.next = 10;\n              return [key, value[key], schema[key]];\n\n            case 10:\n              _context12.next = 5;\n              break;\n\n            case 12:\n              _context12.next = 17;\n              break;\n\n            case 14:\n              _context12.prev = 14;\n              _context12.t0 = _context12[\"catch\"](3);\n\n              _iterator15.e(_context12.t0);\n\n            case 17:\n              _context12.prev = 17;\n\n              _iterator15.f();\n\n              return _context12.finish(17);\n\n            case 20:\n              _iterator16 = _createForOfIteratorHelper(unknowns);\n              _context12.prev = 21;\n\n              _iterator16.s();\n\n            case 23:\n              if ((_step16 = _iterator16.n()).done) {\n                _context12.next = 29;\n                break;\n              }\n\n              _key2 = _step16.value;\n              _context12.next = 27;\n              return [_key2, value[_key2], Never];\n\n            case 27:\n              _context12.next = 23;\n              break;\n\n            case 29:\n              _context12.next = 34;\n              break;\n\n            case 31:\n              _context12.prev = 31;\n              _context12.t1 = _context12[\"catch\"](21);\n\n              _iterator16.e(_context12.t1);\n\n            case 34:\n              _context12.prev = 34;\n\n              _iterator16.f();\n\n              return _context12.finish(34);\n\n            case 37:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, entries, null, [[3, 14, 17, 20], [21, 31, 34, 37]]);\n    }),\n    validator: function validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    },\n    coercer: function coercer(value) {\n      return isObject(value) ? _objectSpread({}, value) : value;\n    }\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\n\nfunction optional(struct) {\n  return new Struct(_objectSpread(_objectSpread({}, struct), {}, {\n    validator: function validator(value, ctx) {\n      return value === undefined || struct.validator(value, ctx);\n    },\n    refiner: function refiner(value, ctx) {\n      return value === undefined || struct.refiner(value, ctx);\n    }\n  }));\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\n\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value) {\n      var k, v;\n      return _regeneratorRuntime.wrap(function entries$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!isObject(value)) {\n                _context13.next = 11;\n                break;\n              }\n\n              _context13.t0 = _regeneratorRuntime.keys(value);\n\n            case 2:\n              if ((_context13.t1 = _context13.t0()).done) {\n                _context13.next = 11;\n                break;\n              }\n\n              k = _context13.t1.value;\n              v = value[k];\n              _context13.next = 7;\n              return [k, k, Key];\n\n            case 7:\n              _context13.next = 9;\n              return [k, v, Value];\n\n            case 9:\n              _context13.next = 2;\n              break;\n\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\n\nfunction regexp() {\n  return define('regexp', function (value) {\n    return value instanceof RegExp;\n  });\n}\n\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value) {\n      var _iterator17, _step17, v;\n\n      return _regeneratorRuntime.wrap(function entries$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(Element && value instanceof Set)) {\n                _context14.next = 18;\n                break;\n              }\n\n              _iterator17 = _createForOfIteratorHelper(value);\n              _context14.prev = 2;\n\n              _iterator17.s();\n\n            case 4:\n              if ((_step17 = _iterator17.n()).done) {\n                _context14.next = 10;\n                break;\n              }\n\n              v = _step17.value;\n              _context14.next = 8;\n              return [v, v, Element];\n\n            case 8:\n              _context14.next = 4;\n              break;\n\n            case 10:\n              _context14.next = 15;\n              break;\n\n            case 12:\n              _context14.prev = 12;\n              _context14.t0 = _context14[\"catch\"](2);\n\n              _iterator17.e(_context14.t0);\n\n            case 15:\n              _context14.prev = 15;\n\n              _iterator17.f();\n\n              return _context14.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, entries, null, [[2, 12, 15, 18]]);\n    }),\n    coercer: function coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n    validator: function validator(value) {\n      return value instanceof Set || \"Expected a `Set` object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\n\nfunction string() {\n  return define('string', function (value) {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\n\nfunction tuple(Elements) {\n  var Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value) {\n      var length, i;\n      return _regeneratorRuntime.wrap(function entries$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!Array.isArray(value)) {\n                _context15.next = 9;\n                break;\n              }\n\n              length = Math.max(Elements.length, value.length);\n              i = 0;\n\n            case 3:\n              if (!(i < length)) {\n                _context15.next = 9;\n                break;\n              }\n\n              _context15.next = 6;\n              return [i, value[i], Elements[i] || Never];\n\n            case 6:\n              i++;\n              _context15.next = 3;\n              break;\n\n            case 9:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value) {\n      return Array.isArray(value) || \"Expected an array, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\n\nfunction type(schema) {\n  var keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema: schema,\n    entries: /*#__PURE__*/_regeneratorRuntime.mark(function entries(value) {\n      var _iterator18, _step18, k;\n\n      return _regeneratorRuntime.wrap(function entries$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!isObject(value)) {\n                _context16.next = 18;\n                break;\n              }\n\n              _iterator18 = _createForOfIteratorHelper(keys);\n              _context16.prev = 2;\n\n              _iterator18.s();\n\n            case 4:\n              if ((_step18 = _iterator18.n()).done) {\n                _context16.next = 10;\n                break;\n              }\n\n              k = _step18.value;\n              _context16.next = 8;\n              return [k, value[k], schema[k]];\n\n            case 8:\n              _context16.next = 4;\n              break;\n\n            case 10:\n              _context16.next = 15;\n              break;\n\n            case 12:\n              _context16.prev = 12;\n              _context16.t0 = _context16[\"catch\"](2);\n\n              _iterator18.e(_context16.t0);\n\n            case 15:\n              _context16.prev = 15;\n\n              _iterator18.f();\n\n              return _context16.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, entries, null, [[2, 12, 15, 18]]);\n    }),\n    validator: function validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n  });\n}\n\nfunction union(Structs) {\n  var description = Structs.map(function (s) {\n    return s.type;\n  }).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator: function validator(value, ctx) {\n      var failures = [];\n\n      var _iterator19 = _createForOfIteratorHelper(Structs),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var S = _step19.value;\n\n          var _run = run(value, S, ctx),\n              _run2 = _toArray(_run),\n              tuples = _run2.slice(0);\n\n          var _tuples = _slicedToArray(tuples, 1),\n              first = _tuples[0];\n\n          if (!first[0]) {\n            return [];\n          } else {\n            var _iterator20 = _createForOfIteratorHelper(tuples),\n                _step20;\n\n            try {\n              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                var _step20$value = _slicedToArray(_step20.value, 1),\n                    failure = _step20$value[0];\n\n                if (failure) {\n                  failures.push(failure);\n                }\n              }\n            } catch (err) {\n              _iterator20.e(err);\n            } finally {\n              _iterator20.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value)].concat(failures);\n    }\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\n\nfunction unknown() {\n  return define('unknown', function () {\n    return true;\n  });\n}\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\n\nfunction coerce(struct, condition, _coercer) {\n  return new Struct(_objectSpread(_objectSpread({}, struct), {}, {\n    coercer: function coercer(value, ctx) {\n      return _is(value, condition) ? struct.coercer(_coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  }));\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\n\nfunction defaulted(struct, fallback) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return coerce(struct, unknown(), function (x) {\n    var f = typeof fallback === 'function' ? fallback() : fallback;\n\n    if (x === undefined) {\n      return f;\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      var ret = _objectSpread({}, x);\n\n      var changed = false;\n\n      for (var key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        return ret;\n      }\n    }\n\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\n\nfunction trimmed(struct) {\n  return coerce(struct, string(), function (x) {\n    return x.trim();\n  });\n}\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\n\nfunction empty(struct) {\n  var expected = \"Expected an empty \" + struct.type;\n  return refine(struct, 'empty', function (value) {\n    if (value instanceof Map || value instanceof Set) {\n      var _size = value.size;\n      return _size === 0 || expected + \" but received one with a size of `\" + _size + \"`\";\n    } else {\n      var length = value.length;\n      return length === 0 || expected + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\n\n\nfunction max(struct, threshold) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var exclusive = options.exclusive;\n  return refine(struct, 'max', function (value) {\n    return exclusive ? value < threshold : value <= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\n\n\nfunction min(struct, threshold) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var exclusive = options.exclusive;\n  return refine(struct, 'min', function (value) {\n    return exclusive ? value > threshold : value >= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\n\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', function (value) {\n    return regexp.test(value) || \"Expected a \" + struct.type + \" matching `/\" + regexp.source + \"/` but received \\\"\" + value + \"\\\"\";\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\n\nfunction size(struct, min) {\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : min;\n  var expected = \"Expected a \" + struct.type;\n  var of = min === max ? \"of `\" + min + \"`\" : \"between `\" + min + \"` and `\" + max + \"`\";\n  return refine(struct, 'size', function (value) {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || expected + \" \" + of + \" but received `\" + value + \"`\";\n    } else if (value instanceof Map || value instanceof Set) {\n      var _size2 = value.size;\n      return min <= _size2 && _size2 <= max || expected + \" with a size \" + of + \" but received one with a size of `\" + _size2 + \"`\";\n    } else {\n      var length = value.length;\n      return min <= length && length <= max || expected + \" with a length \" + of + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\n\nfunction refine(struct, name, refiner) {\n  return new Struct(_objectSpread(_objectSpread({}, struct), {}, {\n    refiner: function (_refiner) {\n      var _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(refiner);\n\n      function refiner(_x, _x2) {\n        var _args17 = arguments;\n        return _regeneratorRuntime.wrap(function refiner$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.delegateYield(_refiner.apply(this, _args17), \"t0\", 1);\n\n              case 1:\n                return _context17.abrupt(\"return\", _context17.t0);\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _marked3, this);\n      }\n\n      refiner.toString = function () {\n        return _refiner.toString();\n      };\n\n      return refiner;\n    }( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value, ctx) {\n      var result, failures, _iterator21, _step21, failure;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              return _context18.delegateYield(struct.refiner(value, ctx), \"t0\", 1);\n\n            case 1:\n              result = refiner(value, ctx);\n              failures = toFailures(result, ctx, struct, value);\n              _iterator21 = _createForOfIteratorHelper(failures);\n              _context18.prev = 4;\n\n              _iterator21.s();\n\n            case 6:\n              if ((_step21 = _iterator21.n()).done) {\n                _context18.next = 12;\n                break;\n              }\n\n              failure = _step21.value;\n              _context18.next = 10;\n              return _objectSpread(_objectSpread({}, failure), {}, {\n                refinement: name\n              });\n\n            case 10:\n              _context18.next = 6;\n              break;\n\n            case 12:\n              _context18.next = 17;\n              break;\n\n            case 14:\n              _context18.prev = 14;\n              _context18.t1 = _context18[\"catch\"](4);\n\n              _iterator21.e(_context18.t1);\n\n            case 17:\n              _context18.prev = 17;\n\n              _iterator21.f();\n\n              return _context18.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee3, null, [[4, 14, 17, 20]]);\n    }))\n  }));\n}\n\nexport { Struct, StructError, any, array, _assert as assert, assign, boolean, coerce, _create as create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, _is as is, lazy, literal, map, _mask as mask, max, min, never, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, _validate as validate };","map":{"version":3,"mappings":"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","names":["toFailures","run","StructError","constructor","failure","failures","cached","message","rest","path","msg","length","join","Object","assign","name","TypeError","isIterable","x","isObject","Symbol","iterator","isPlainObject","prototype","toString","call","getPrototypeOf","print","value","JSON","stringify","shiftIterator","input","next","done","undefined","toFailure","result","context","struct","branch","type","refinement","key","r","options","coerce","mask","ctx","coercer","schema","Array","isArray","valid","validator","entries","k","v","s","ts","t","Map","set","Set","add","refiner","Struct","props","assert","create","is","validate","tuples","tuple","error","Structs","schemas","map","object","define","deprecated","log","dynamic","fn","lazy","omit","keys","subschema","partial","optional","pick","console","warn","any","array","Element","i","slice","boolean","date","Date","isNaN","getTime","enums","values","description","includes","func","instance","Class","integer","Number","isInteger","intersection","S","literal","constant","Key","Value","never","nullable","number","knowns","Never","unknowns","delete","record","regexp","RegExp","string","Elements","Math","max","union","first","push","unknown","condition","defaulted","fallback","f","strict","ret","changed","trimmed","trim","empty","expected","refine","size","threshold","exclusive","min","pattern","test","source","of"],"sources":["../src/utils.ts","../src/error.ts","../src/struct.ts","../src/structs/utilities.ts","../src/structs/types.ts","../src/structs/coercions.ts","../src/structs/refinements.ts"],"sourcesContent":["import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import { Struct, Refiner } from '../struct'\nimport { toFailures } from '../utils'\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nexport function empty<\n  T extends string | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>): Struct<T, S> {\n  const expected = `Expected an empty ${struct.type}`\n\n  return refine(struct, 'empty', (value) => {\n    if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        size === 0 || `${expected} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        length === 0 ||\n        `${expected} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nexport function max<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'max', (value) => {\n    return exclusive\n      ? value < threshold\n      : value <= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nexport function min<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'min', (value) => {\n    return exclusive\n      ? value > threshold\n      : value >= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nexport function pattern<T extends string, S extends any>(\n  struct: Struct<T, S>,\n  regexp: RegExp\n): Struct<T, S> {\n  return refine(struct, 'pattern', (value) => {\n    return (\n      regexp.test(value) ||\n      `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`\n    )\n  })\n}\n\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nexport function size<\n  T extends string | number | Date | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>, min: number, max: number = min): Struct<T, S> {\n  const expected = `Expected a ${struct.type}`\n  const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``\n\n  return refine(struct, 'size', (value) => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return (\n        (min <= value && value <= max) ||\n        `${expected} ${of} but received \\`${value}\\``\n      )\n    } else if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        (min <= size && size <= max) ||\n        `${expected} with a size ${of} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        (min <= length && length <= max) ||\n        `${expected} with a length ${of} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nexport function refine<T, S>(\n  struct: Struct<T, S>,\n  name: string,\n  refiner: Refiner<T>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx)\n      const result = refiner(value, ctx)\n      const failures = toFailures(result, ctx, struct, value)\n\n      for (const failure of failures) {\n        yield { ...failure, refinement: name }\n      }\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
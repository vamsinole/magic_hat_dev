{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport camelCase from \"camelcase\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { stateDiscriminator } from \"../../coder\";\nimport { getProvider } from \"../../\";\nimport { validateAccounts, parseIdlErrors } from \"../common\";\nimport { findProgramAddressSync, createWithSeedSync } from \"../../utils/pubkey\";\nimport InstructionNamespaceFactory from \"./instruction\";\nimport RpcNamespaceFactory from \"./rpc\";\nimport TransactionNamespaceFactory from \"./transaction\";\nexport default class StateFactory {\n  static build(idl, coder, programId, provider) {\n    if (idl.state === undefined) {\n      return undefined;\n    }\n\n    return new StateClient(idl, programId, provider, coder);\n  }\n\n}\n/**\n * A client for the program state. Similar to the base [[Program]] client,\n * one can use this to send transactions and read accounts for the state\n * abstraction.\n */\n\nexport class StateClient {\n  constructor(idl, programId, provider, coder) {\n    this._idl = idl;\n    this._programId = programId;\n    this._address = programStateAddress(programId);\n    this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n    this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n    this._sub = null; // Build namespaces.\n\n    const [instruction, transaction, rpc] = (() => {\n      let instruction = {};\n      let transaction = {};\n      let rpc = {};\n      idl.state.methods.forEach(m => {\n        // Build instruction method.\n        const ixItem = InstructionNamespaceFactory.build(m, (ixName, ix) => coder.instruction.encodeState(ixName, ix), programId);\n\n        ixItem[\"accounts\"] = accounts => {\n          const keys = stateInstructionKeys(programId, provider, m, accounts);\n          return keys.concat(InstructionNamespaceFactory.accountsArray(accounts, m.accounts));\n        }; // Build transaction method.\n\n\n        const txItem = TransactionNamespaceFactory.build(m, ixItem); // Build RPC method.\n\n        const rpcItem = RpcNamespaceFactory.build(m, txItem, parseIdlErrors(idl), provider); // Attach them all to their respective namespaces.\n\n        const name = camelCase(m.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n      });\n      return [instruction, transaction, rpc];\n    })();\n\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.rpc = rpc;\n  }\n  /**\n   * Returns the program ID owning the state.\n   */\n\n\n  get programId() {\n    return this._programId;\n  }\n  /**\n   * Returns the client's wallet and network provider.\n   */\n\n\n  get provider() {\n    return this._provider;\n  }\n  /**\n   * Returns the coder.\n   */\n\n\n  get coder() {\n    return this._coder;\n  }\n  /**\n   * Returns the deserialized state account.\n   */\n\n\n  async fetch() {\n    const addr = this.address();\n    const accountInfo = await this.provider.connection.getAccountInfo(addr);\n\n    if (accountInfo === null) {\n      throw new Error(`Account does not exist ${addr.toString()}`);\n    } // Assert the account discriminator is correct.\n\n\n    const expectedDiscriminator = await stateDiscriminator(this._idl.state.struct.name);\n\n    if (expectedDiscriminator.compare(accountInfo.data.slice(0, 8))) {\n      throw new Error(\"Invalid account discriminator\");\n    }\n\n    return this.coder.state.decode(accountInfo.data);\n  }\n  /**\n   * Returns the state address.\n   */\n\n\n  address() {\n    return this._address;\n  }\n  /**\n   * Returns an `EventEmitter` with a `\"change\"` event that's fired whenever\n   * the state account cahnges.\n   */\n\n\n  subscribe(commitment) {\n    if (this._sub !== null) {\n      return this._sub.ee;\n    }\n\n    const ee = new EventEmitter();\n    const listener = this.provider.connection.onAccountChange(this.address(), acc => {\n      const account = this.coder.state.decode(acc.data);\n      ee.emit(\"change\", account);\n    }, commitment);\n    this._sub = {\n      ee,\n      listener\n    };\n    return ee;\n  }\n  /**\n   * Unsubscribes to state changes.\n   */\n\n\n  unsubscribe() {\n    if (this._sub !== null) {\n      this.provider.connection.removeAccountChangeListener(this._sub.listener).then(async () => {\n        this._sub = null;\n      }).catch(console.error);\n    }\n  }\n\n} // Calculates the deterministic address of the program's \"state\" account.\n\nfunction programStateAddress(programId) {\n  let [registrySigner] = findProgramAddressSync([], programId);\n  return createWithSeedSync(registrySigner, \"unversioned\", programId);\n} // Returns the common keys that are prepended to all instructions targeting\n// the \"state\" of a program.\n\n\nfunction stateInstructionKeys(programId, provider, m, accounts) {\n  if (m.name === \"new\") {\n    // Ctor `new` method.\n    const [programSigner] = findProgramAddressSync([], programId);\n    return [{\n      pubkey: provider.wallet.publicKey,\n      isWritable: false,\n      isSigner: true\n    }, {\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: programSigner,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: SystemProgram.programId,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: programId,\n      isWritable: false,\n      isSigner: false\n    }];\n  } else {\n    validateAccounts(m.accounts, accounts);\n    return [{\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }];\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","camelCase","SystemProgram","Coder","stateDiscriminator","getProvider","validateAccounts","parseIdlErrors","findProgramAddressSync","createWithSeedSync","InstructionNamespaceFactory","RpcNamespaceFactory","TransactionNamespaceFactory","StateFactory","build","idl","coder","programId","provider","state","undefined","StateClient","constructor","_idl","_programId","_address","programStateAddress","_provider","_coder","_sub","instruction","transaction","rpc","methods","forEach","m","ixItem","ixName","ix","encodeState","accounts","keys","stateInstructionKeys","concat","accountsArray","txItem","rpcItem","name","fetch","addr","address","accountInfo","connection","getAccountInfo","Error","toString","expectedDiscriminator","struct","compare","data","slice","decode","subscribe","commitment","ee","listener","onAccountChange","acc","account","emit","unsubscribe","removeAccountChangeListener","then","catch","console","error","registrySigner","programSigner","pubkey","wallet","publicKey","isWritable","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/state.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/regenerator/index.js\";\nimport EventEmitter from \"eventemitter3\";\nimport camelCase from \"camelcase\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { stateDiscriminator } from \"../../coder\";\nimport { getProvider } from \"../../\";\nimport { validateAccounts, parseIdlErrors } from \"../common\";\nimport { findProgramAddressSync, createWithSeedSync } from \"../../utils/pubkey\";\nimport InstructionNamespaceFactory from \"./instruction\";\nimport RpcNamespaceFactory from \"./rpc\";\nimport TransactionNamespaceFactory from \"./transaction\";\n\nvar StateFactory = /*#__PURE__*/function () {\n  function StateFactory() {\n    _classCallCheck(this, StateFactory);\n  }\n\n  _createClass(StateFactory, null, [{\n    key: \"build\",\n    value: function build(idl, coder, programId, provider) {\n      if (idl.state === undefined) {\n        return undefined;\n      }\n\n      return new StateClient(idl, programId, provider, coder);\n    }\n  }]);\n\n  return StateFactory;\n}();\n/**\n * A client for the program state. Similar to the base [[Program]] client,\n * one can use this to send transactions and read accounts for the state\n * abstraction.\n */\n\n\nexport { StateFactory as default };\nexport var StateClient = /*#__PURE__*/function () {\n  function StateClient(idl, programId, provider, coder) {\n    _classCallCheck(this, StateClient);\n\n    this._idl = idl;\n    this._programId = programId;\n    this._address = programStateAddress(programId);\n    this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n    this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n    this._sub = null; // Build namespaces.\n\n    var _ref = function () {\n      var instruction = {};\n      var transaction = {};\n      var rpc = {};\n      idl.state.methods.forEach(function (m) {\n        // Build instruction method.\n        var ixItem = InstructionNamespaceFactory.build(m, function (ixName, ix) {\n          return coder.instruction.encodeState(ixName, ix);\n        }, programId);\n\n        ixItem[\"accounts\"] = function (accounts) {\n          var keys = stateInstructionKeys(programId, provider, m, accounts);\n          return keys.concat(InstructionNamespaceFactory.accountsArray(accounts, m.accounts));\n        }; // Build transaction method.\n\n\n        var txItem = TransactionNamespaceFactory.build(m, ixItem); // Build RPC method.\n\n        var rpcItem = RpcNamespaceFactory.build(m, txItem, parseIdlErrors(idl), provider); // Attach them all to their respective namespaces.\n\n        var name = camelCase(m.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n      });\n      return [instruction, transaction, rpc];\n    }(),\n        _ref2 = _slicedToArray(_ref, 3),\n        instruction = _ref2[0],\n        transaction = _ref2[1],\n        rpc = _ref2[2];\n\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.rpc = rpc;\n  }\n  /**\n   * Returns the program ID owning the state.\n   */\n\n\n  _createClass(StateClient, [{\n    key: \"programId\",\n    get: function get() {\n      return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */\n\n  }, {\n    key: \"provider\",\n    get: function get() {\n      return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */\n\n  }, {\n    key: \"coder\",\n    get: function get() {\n      return this._coder;\n    }\n    /**\n     * Returns the deserialized state account.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var addr, accountInfo, expectedDiscriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addr = this.address();\n                _context.next = 3;\n                return this.provider.connection.getAccountInfo(addr);\n\n              case 3:\n                accountInfo = _context.sent;\n\n                if (!(accountInfo === null)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Account does not exist \".concat(addr.toString()));\n\n              case 6:\n                _context.next = 8;\n                return stateDiscriminator(this._idl.state.struct.name);\n\n              case 8:\n                expectedDiscriminator = _context.sent;\n\n                if (!expectedDiscriminator.compare(accountInfo.data.slice(0, 8))) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Invalid account discriminator\");\n\n              case 11:\n                return _context.abrupt(\"return\", this.coder.state.decode(accountInfo.data));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     * Returns the state address.\n     */\n\n  }, {\n    key: \"address\",\n    value: function address() {\n      return this._address;\n    }\n    /**\n     * Returns an `EventEmitter` with a `\"change\"` event that's fired whenever\n     * the state account cahnges.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(commitment) {\n      var _this = this;\n\n      if (this._sub !== null) {\n        return this._sub.ee;\n      }\n\n      var ee = new EventEmitter();\n      var listener = this.provider.connection.onAccountChange(this.address(), function (acc) {\n        var account = _this.coder.state.decode(acc.data);\n\n        ee.emit(\"change\", account);\n      }, commitment);\n      this._sub = {\n        ee: ee,\n        listener: listener\n      };\n      return ee;\n    }\n    /**\n     * Unsubscribes to state changes.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this2 = this;\n\n      if (this._sub !== null) {\n        this.provider.connection.removeAccountChangeListener(this._sub.listener).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this2._sub = null;\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }))).catch(console.error);\n      }\n    }\n  }]);\n\n  return StateClient;\n}(); // Calculates the deterministic address of the program's \"state\" account.\n\nfunction programStateAddress(programId) {\n  var _findProgramAddressSy = findProgramAddressSync([], programId),\n      _findProgramAddressSy2 = _slicedToArray(_findProgramAddressSy, 1),\n      registrySigner = _findProgramAddressSy2[0];\n\n  return createWithSeedSync(registrySigner, \"unversioned\", programId);\n} // Returns the common keys that are prepended to all instructions targeting\n// the \"state\" of a program.\n\n\nfunction stateInstructionKeys(programId, provider, m, accounts) {\n  if (m.name === \"new\") {\n    // Ctor `new` method.\n    var _findProgramAddressSy3 = findProgramAddressSync([], programId),\n        _findProgramAddressSy4 = _slicedToArray(_findProgramAddressSy3, 1),\n        programSigner = _findProgramAddressSy4[0];\n\n    return [{\n      pubkey: provider.wallet.publicKey,\n      isWritable: false,\n      isSigner: true\n    }, {\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: programSigner,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: SystemProgram.programId,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: programId,\n      isWritable: false,\n      isSigner: false\n    }];\n  } else {\n    validateAccounts(m.accounts, accounts);\n    return [{\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }];\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","camelCase","SystemProgram","Coder","stateDiscriminator","getProvider","validateAccounts","parseIdlErrors","findProgramAddressSync","createWithSeedSync","InstructionNamespaceFactory","RpcNamespaceFactory","TransactionNamespaceFactory","StateFactory","idl","coder","programId","provider","state","undefined","StateClient","_idl","_programId","_address","programStateAddress","_provider","_coder","_sub","instruction","transaction","rpc","methods","forEach","m","ixItem","build","ixName","ix","encodeState","accounts","keys","stateInstructionKeys","concat","accountsArray","txItem","rpcItem","name","addr","address","connection","getAccountInfo","accountInfo","Error","toString","struct","expectedDiscriminator","compare","data","slice","decode","commitment","ee","listener","onAccountChange","acc","account","emit","removeAccountChangeListener","then","catch","console","error","registrySigner","programSigner","pubkey","wallet","publicKey","isWritable","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/state.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
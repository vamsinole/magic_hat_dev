{"ast":null,"code":"import _toConsumableArray from \"/Users/vamshikrishnaenjapuri/Documents/secretalpha/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { snakeCase } from \"snake-case\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlError } from \"../error\";\nexport function accountSize(idl, idlAccount) {\n  if (idlAccount.type.kind === \"enum\") {\n    var variantSizes = idlAccount.type.variants.map(function (variant) {\n      if (variant.fields === undefined) {\n        return 0;\n      }\n\n      return variant.fields // @ts-ignore\n      .map(function (f) {\n        // @ts-ignore\n        if (f.name === undefined) {\n          throw new Error(\"Tuple enum variants not yet implemented.\");\n        } // @ts-ignore\n\n\n        return typeSize(idl, f.type);\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n    });\n    return Math.max.apply(Math, _toConsumableArray(variantSizes)) + 1;\n  }\n\n  if (idlAccount.type.fields === undefined) {\n    return 0;\n  }\n\n  return idlAccount.type.fields.map(function (f) {\n    return typeSize(idl, f.type);\n  }).reduce(function (a, b) {\n    return a + b;\n  });\n} // Returns the size of the type in bytes. For variable length types, just return\n// 1. Users should override this value in such cases.\n\nfunction typeSize(idl, ty) {\n  switch (ty) {\n    case \"bool\":\n      return 1;\n\n    case \"u8\":\n      return 1;\n\n    case \"i8\":\n      return 1;\n\n    case \"i16\":\n      return 2;\n\n    case \"u16\":\n      return 2;\n\n    case \"u32\":\n      return 4;\n\n    case \"i32\":\n      return 4;\n\n    case \"u64\":\n      return 8;\n\n    case \"i64\":\n      return 8;\n\n    case \"u128\":\n      return 16;\n\n    case \"i128\":\n      return 16;\n\n    case \"bytes\":\n      return 1;\n\n    case \"string\":\n      return 1;\n\n    case \"publicKey\":\n      return 32;\n\n    default:\n      // @ts-ignore\n      if (ty.vec !== undefined) {\n        return 1;\n      } // @ts-ignore\n\n\n      if (ty.option !== undefined) {\n        // @ts-ignore\n        return 1 + typeSize(idl, ty.option);\n      } // @ts-ignore\n\n\n      if (ty.defined !== undefined) {\n        // @ts-ignore\n        var filtered = idl.types.filter(function (t) {\n          return t.name === ty.defined;\n        });\n\n        if (filtered.length !== 1) {\n          throw new IdlError(\"Type not found: \".concat(JSON.stringify(ty)));\n        }\n\n        var typeDef = filtered[0];\n        return accountSize(idl, typeDef);\n      } // @ts-ignore\n\n\n      if (ty.array !== undefined) {\n        // @ts-ignore\n        var arrayTy = ty.array[0]; // @ts-ignore\n\n        var arraySize = ty.array[1]; // @ts-ignore\n\n        return typeSize(idl, arrayTy) * arraySize;\n      }\n\n      throw new Error(\"Invalid type \".concat(JSON.stringify(ty)));\n  }\n} // Not technically sighash, since we don't include the arguments, as Rust\n// doesn't allow function overloading.\n\n\nexport function sighash(nameSpace, ixName) {\n  var name = snakeCase(ixName);\n  var preimage = \"\".concat(nameSpace, \":\").concat(name);\n  return Buffer.from(sha256.digest(preimage)).slice(0, 8);\n}","map":{"version":3,"mappings":"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","names":["snakeCase","sha256","IdlError","accountSize","idl","idlAccount","type","kind","variantSizes","variants","map","variant","fields","undefined","f","name","Error","typeSize","reduce","a","b","Math","max","ty","vec","option","defined","filtered","types","filter","t","length","JSON","stringify","typeDef","array","arrayTy","arraySize","sighash","nameSpace","ixName","preimage","Buffer","from","digest","slice"],"sourceRoot":"","sources":["../../../src/coder/common.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
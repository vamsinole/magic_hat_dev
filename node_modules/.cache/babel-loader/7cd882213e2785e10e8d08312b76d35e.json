{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/vamshikrishnaenjapuri/Documents/secretalphanew/secret_alpha_ts/node_modules/@babel/runtime/regenerator/index.js\";\nimport assert from \"assert\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { translateAddress } from \"../program/common\";\nimport { getProvider } from \"../provider\";\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\n\nexport function invoke(_x, _x2, _x3, _x4) {\n  return _invoke.apply(this, arguments);\n}\n\nfunction _invoke() {\n  _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId, accounts, data, provider) {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = translateAddress(programId);\n\n            if (!provider) {\n              provider = getProvider();\n            }\n\n            tx = new Transaction();\n            tx.add(new TransactionInstruction({\n              programId: programId,\n              keys: accounts !== null && accounts !== void 0 ? accounts : [],\n              data: data\n            }));\n            _context.next = 6;\n            return provider.send(tx);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _invoke.apply(this, arguments);\n}\n\nexport function getMultipleAccounts(_x5, _x6) {\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nfunction _getMultipleAccounts() {\n  _getMultipleAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, publicKeys) {\n    var args, res, accounts, _iterator, _step, account, value, executable, owner, lamports, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            args = [publicKeys.map(function (k) {\n              return k.toBase58();\n            }), {\n              commitment: \"recent\"\n            }]; // @ts-ignore\n\n            _context2.next = 3;\n            return connection._rpcRequest(\"getMultipleAccounts\", args);\n\n          case 3:\n            res = _context2.sent;\n\n            if (!res.error) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error(\"failed to get info about accounts \" + publicKeys.map(function (k) {\n              return k.toBase58();\n            }).join(\", \") + \": \" + res.error.message);\n\n          case 6:\n            assert(typeof res.result !== \"undefined\");\n            accounts = [];\n            _iterator = _createForOfIteratorHelper(res.result.value);\n            _context2.prev = 9;\n\n            _iterator.s();\n\n          case 11:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 23;\n              break;\n            }\n\n            account = _step.value;\n            value = null;\n\n            if (!(account === null)) {\n              _context2.next = 17;\n              break;\n            }\n\n            accounts.push(null);\n            return _context2.abrupt(\"continue\", 21);\n\n          case 17:\n            if (res.result.value) {\n              executable = account.executable, owner = account.owner, lamports = account.lamports, data = account.data;\n              assert(data[1] === \"base64\");\n              value = {\n                executable: executable,\n                owner: new PublicKey(owner),\n                lamports: lamports,\n                data: Buffer.from(data[0], \"base64\")\n              };\n            }\n\n            if (!(value === null)) {\n              _context2.next = 20;\n              break;\n            }\n\n            throw new Error(\"Invalid response\");\n\n          case 20:\n            accounts.push(value);\n\n          case 21:\n            _context2.next = 11;\n            break;\n\n          case 23:\n            _context2.next = 28;\n            break;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.t0 = _context2[\"catch\"](9);\n\n            _iterator.e(_context2.t0);\n\n          case 28:\n            _context2.prev = 28;\n\n            _iterator.f();\n\n            return _context2.finish(28);\n\n          case 31:\n            return _context2.abrupt(\"return\", accounts.map(function (account, idx) {\n              if (account === null) {\n                return null;\n              }\n\n              return {\n                publicKey: publicKeys[idx],\n                account: account\n              };\n            }));\n\n          case 32:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[9, 25, 28, 31]]);\n  }));\n  return _getMultipleAccounts.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["assert","PublicKey","Transaction","TransactionInstruction","translateAddress","getProvider","invoke","programId","accounts","data","provider","tx","add","keys","send","getMultipleAccounts","connection","publicKeys","args","map","k","toBase58","commitment","_rpcRequest","res","error","Error","join","message","result","value","account","push","executable","owner","lamports","Buffer","from","idx","publicKey"],"sourceRoot":"","sources":["../../../src/utils/rpc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/regenerator/index.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"@project-serum/borsh\"; // Deterministic IDL address as a function of the program id.\n\nexport function idlAddress(_x) {\n  return _idlAddress.apply(this, arguments);\n} // Seed for generating the idlAddress.\n\nfunction _idlAddress() {\n  _idlAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId) {\n    var base;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return PublicKey.findProgramAddress([], programId);\n\n          case 2:\n            base = _context.sent[0];\n            _context.next = 5;\n            return PublicKey.createWithSeed(base, seed(), programId);\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _idlAddress.apply(this, arguments);\n}\n\nexport function seed() {\n  return \"anchor:idl\";\n}\nvar IDL_ACCOUNT_LAYOUT = borsh.struct([borsh.publicKey(\"authority\"), borsh.vecU8(\"data\")]);\nexport function decodeIdlAccount(data) {\n  return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nexport function encodeIdlAccount(acc) {\n  var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n  var len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n  return buffer.slice(0, len);\n}","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,sBAAvB,C,CAsHA;;AACA,gBAAsBC,UAAtB;EAAA;AAAA,C,CAKA;;;yEALO,iBAA0BC,SAA1B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACeH,SAAS,CAACI,kBAAV,CAA6B,EAA7B,EAAiCD,SAAjC,CADf;;UAAA;YACCE,IADD,iBAC4D,CAD5D;YAAA;YAAA,OAEQL,SAAS,CAACM,cAAV,CAAyBD,IAAzB,EAA+BE,IAAI,EAAnC,EAAuCJ,SAAvC,CAFR;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAMP,OAAM,SAAUI,IAAV,GAAc;EAClB,OAAO,YAAP;AACD;AAQD,IAAMC,kBAAkB,GAAoCP,KAAK,CAACQ,MAAN,CAAa,CACvER,KAAK,CAACS,SAAN,CAAgB,WAAhB,CADuE,EAEvET,KAAK,CAACU,KAAN,CAAY,MAAZ,CAFuE,CAAb,CAA5D;AAKA,OAAM,SAAUC,gBAAV,CAA2BC,IAA3B,EAAuC;EAC3C,OAAOL,kBAAkB,CAACM,MAAnB,CAA0BD,IAA1B,CAAP;AACD;AAED,OAAM,SAAUE,gBAAV,CAA2BC,GAA3B,EAAiD;EACrD,IAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAa,IAAb,CAAf,CADqD,CAClB;;EACnC,IAAMC,GAAG,GAAGZ,kBAAkB,CAACa,MAAnB,CAA0BL,GAA1B,EAA+BC,MAA/B,CAAZ;EACA,OAAOA,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgBF,GAAhB,CAAP;AACD","names":["PublicKey","borsh","idlAddress","programId","findProgramAddress","base","createWithSeed","seed","IDL_ACCOUNT_LAYOUT","struct","publicKey","vecU8","decodeIdlAccount","data","decode","encodeIdlAccount","acc","buffer","Buffer","alloc","len","encode","slice"],"sourceRoot":"","sources":["../../src/idl.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vamshikrishnaenjapuri/Documents/magic_hat_tshht/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport var EventCoder = /*#__PURE__*/function () {\n  function EventCoder(idl) {\n    _classCallCheck(this, EventCoder);\n\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n\n    var layouts = idl.events.map(function (event) {\n      var eventTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map(function (f) {\n            return {\n              name: f.name,\n              type: f.type\n            };\n          })\n        }\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    }); // @ts-ignore\n\n    this.layouts = new Map(layouts);\n    this.discriminators = new Map(idl.events === undefined ? [] : idl.events.map(function (e) {\n      return [base64.fromByteArray(eventDiscriminator(e.name)), e.name];\n    }));\n  }\n\n  _createClass(EventCoder, [{\n    key: \"decode\",\n    value: function decode(log) {\n      var logArr; // This will throw if log length is not a multiple of 4.\n\n      try {\n        logArr = Buffer.from(base64.toByteArray(log));\n      } catch (e) {\n        return null;\n      }\n\n      var disc = base64.fromByteArray(logArr.slice(0, 8)); // Only deserialize if the discriminator implies a proper event.\n\n      var eventName = this.discriminators.get(disc);\n\n      if (eventName === undefined) {\n        return null;\n      }\n\n      var layout = this.layouts.get(eventName);\n      var data = layout.decode(logArr.slice(8));\n      return {\n        data: data,\n        name: eventName\n      };\n    }\n  }]);\n\n  return EventCoder;\n}();\nexport function eventDiscriminator(name) {\n  return Buffer.from(sha256.digest(\"event:\".concat(name))).slice(0, 8);\n}","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,WAAxB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AAGA,SAASC,QAAT,QAAyB,OAAzB;AAEA,WAAaC,UAAb;EAWE,oBAAmBC,GAAnB,EAA2B;IAAA;;IACzB,IAAIA,GAAG,CAACC,MAAJ,KAAeC,SAAnB,EAA8B;MAC5B,KAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;MACA;IACD;;IACD,IAAMD,OAAO,GAAGH,GAAG,CAACC,MAAJ,CAAWI,GAAX,CAAe,UAACC,KAAD,EAAU;MACvC,IAAIC,YAAY,GAAe;QAC7BC,IAAI,EAAEF,KAAK,CAACE,IADiB;QAE7BC,IAAI,EAAE;UACJC,IAAI,EAAE,QADF;UAEJC,MAAM,EAAEL,KAAK,CAACK,MAAN,CAAaN,GAAb,CAAiB,UAACO,CAAD,EAAM;YAC7B,OAAO;cAAEJ,IAAI,EAAEI,CAAC,CAACJ,IAAV;cAAgBC,IAAI,EAAEG,CAAC,CAACH;YAAxB,CAAP;UACD,CAFO;QAFJ;MAFuB,CAA/B;MASA,OAAO,CAACH,KAAK,CAACE,IAAP,EAAaV,QAAQ,CAACe,aAAT,CAAuBN,YAAvB,EAAqCP,GAAG,CAACc,KAAzC,CAAb,CAAP;IACD,CAXe,CAAhB,CALyB,CAiBzB;;IACA,KAAKX,OAAL,GAAe,IAAIC,GAAJ,CAAQD,OAAR,CAAf;IAEA,KAAKY,cAAL,GAAsB,IAAIX,GAAJ,CACpBJ,GAAG,CAACC,MAAJ,KAAeC,SAAf,GACI,EADJ,GAEIF,GAAG,CAACC,MAAJ,CAAWI,GAAX,CAAe,UAACW,CAAD;MAAA,OAAO,CACpBpB,MAAM,CAACqB,aAAP,CAAqBC,kBAAkB,CAACF,CAAC,CAACR,IAAH,CAAvC,CADoB,EAEpBQ,CAAC,CAACR,IAFkB,CAAP;IAAA,CAAf,CAHgB,CAAtB;EAQD;;EAvCH;IAAA;IAAA,OAyCS,gBAAOW,GAAP,EAAkB;MACvB,IAAIC,MAAJ,CADuB,CAEvB;;MACA,IAAI;QACFA,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY1B,MAAM,CAAC2B,WAAP,CAAmBJ,GAAnB,CAAZ,CAAT;MACD,CAFD,CAEE,OAAOH,CAAP,EAAU;QACV,OAAO,IAAP;MACD;;MACD,IAAMQ,IAAI,GAAG5B,MAAM,CAACqB,aAAP,CAAqBG,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAArB,CAAb,CARuB,CAUvB;;MACA,IAAMC,SAAS,GAAG,KAAKX,cAAL,CAAoBY,GAApB,CAAwBH,IAAxB,CAAlB;;MACA,IAAIE,SAAS,KAAKxB,SAAlB,EAA6B;QAC3B,OAAO,IAAP;MACD;;MAED,IAAM0B,MAAM,GAAG,KAAKzB,OAAL,CAAawB,GAAb,CAAiBD,SAAjB,CAAf;MACA,IAAMG,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcV,MAAM,CAACK,KAAP,CAAa,CAAb,CAAd,CAAb;MACA,OAAO;QAAEI,IAAI,EAAJA,IAAF;QAAQrB,IAAI,EAAEkB;MAAd,CAAP;IACD;EA5DH;;EAAA;AAAA;AA+DA,OAAM,SAAUR,kBAAV,CAA6BV,IAA7B,EAAyC;EAC7C,OAAOa,MAAM,CAACC,IAAP,CAAYzB,MAAM,CAACkC,MAAP,iBAAuBvB,IAAvB,EAAZ,EAA4CiB,KAA5C,CAAkD,CAAlD,EAAqD,CAArD,CAAP;AACD","names":["base64","sha256","IdlCoder","EventCoder","idl","events","undefined","layouts","Map","map","event","eventTypeDef","name","type","kind","fields","f","typeDefLayout","types","discriminators","e","fromByteArray","eventDiscriminator","log","logArr","Buffer","from","toByteArray","disc","slice","eventName","get","layout","data","decode","digest"],"sourceRoot":"","sources":["../../../src/coder/event.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
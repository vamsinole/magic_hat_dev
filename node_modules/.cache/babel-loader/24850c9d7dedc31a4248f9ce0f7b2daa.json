{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nexport function parseIdlErrors(idl) {\n  var errors = new Map();\n\n  if (idl.errors) {\n    idl.errors.forEach(function (e) {\n      var _a;\n\n      var msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n      errors.set(e.code, msg);\n    });\n  }\n\n  return errors;\n} // Allow either IdLInstruction or IdlStateMethod since the types share fields.\n\nexport function toInstruction(idlIx) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (idlIx.args.length != args.length) {\n    throw new Error(\"Invalid argument length\");\n  }\n\n  var ix = {};\n  var idx = 0;\n  idlIx.args.forEach(function (ixArg) {\n    ix[ixArg.name] = args[idx];\n    idx += 1;\n  });\n  return ix;\n} // Throws error if any account required for the `ix` is not given.\n\nexport function validateAccounts(ixAccounts, accounts) {\n  ixAccounts.forEach(function (acc) {\n    // @ts-ignore\n    if (acc.accounts !== undefined) {\n      // @ts-ignore\n      validateAccounts(acc.accounts, accounts[acc.name]);\n    } else {\n      if (accounts[acc.name] === undefined) {\n        throw new Error(\"Invalid arguments: \".concat(acc.name, \" not provided.\"));\n      }\n    }\n  });\n} // Translates an address to a Pubkey.\n\nexport function translateAddress(address) {\n  if (typeof address === \"string\") {\n    var pk = new PublicKey(address);\n    return pk;\n  } else {\n    return address;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAT,QAA0B,iBAA1B;AASA,OAAM,SAAUC,cAAV,CAAyBC,GAAzB,EAAiC;EACrC,IAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;EACA,IAAIF,GAAG,CAACC,MAAR,EAAgB;IACdD,GAAG,CAACC,MAAJ,CAAWE,OAAX,CAAmB,UAACC,CAAD,EAAM;;;MACvB,IAAIC,GAAG,SAAGD,CAAC,CAACC,GAAL,MAAQ,IAAR,IAAQC,aAAR,GAAQA,EAAR,GAAYF,CAAC,CAACG,IAArB;MACAN,MAAM,CAACO,GAAP,CAAWJ,CAAC,CAACK,IAAb,EAAmBJ,GAAnB;IACD,CAHD;EAID;;EACD,OAAOJ,MAAP;AACD,C,CAED;;AACA,OAAM,SAAUS,aAAV,CACJC,KADI,EAEU;EAAA,kCAAXC,IAAW;IAAXA,IAAW;EAAA;;EAEd,IAAID,KAAK,CAACC,IAAN,CAAWC,MAAX,IAAqBD,IAAI,CAACC,MAA9B,EAAsC;IACpC,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;EACD;;EACD,IAAMC,EAAE,GAA2B,EAAnC;EACA,IAAIC,GAAG,GAAG,CAAV;EACAL,KAAK,CAACC,IAAN,CAAWT,OAAX,CAAmB,UAACc,KAAD,EAAU;IAC3BF,EAAE,CAACE,KAAK,CAACV,IAAP,CAAF,GAAiBK,IAAI,CAACI,GAAD,CAArB;IACAA,GAAG,IAAI,CAAP;EACD,CAHD;EAKA,OAAOD,EAAP;AACD,C,CAED;;AACA,OAAM,SAAUG,gBAAV,CACJC,UADI,EAEJC,QAFI,EAEc;EAElBD,UAAU,CAAChB,OAAX,CAAmB,UAACkB,GAAD,EAAQ;IACzB;IACA,IAAIA,GAAG,CAACD,QAAJ,KAAiBE,SAArB,EAAgC;MAC9B;MACAJ,gBAAgB,CAACG,GAAG,CAACD,QAAL,EAAeA,QAAQ,CAACC,GAAG,CAACd,IAAL,CAAvB,CAAhB;IACD,CAHD,MAGO;MACL,IAAIa,QAAQ,CAACC,GAAG,CAACd,IAAL,CAAR,KAAuBe,SAA3B,EAAsC;QACpC,MAAM,IAAIR,KAAJ,8BAAgCO,GAAG,CAACd,IAApC,oBAAN;MACD;IACF;EACF,CAVD;AAWD,C,CAED;;AACA,OAAM,SAAUgB,gBAAV,CAA2BC,OAA3B,EAA2C;EAC/C,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,IAAMC,EAAE,GAAG,IAAI3B,SAAJ,CAAc0B,OAAd,CAAX;IACA,OAAOC,EAAP;EACD,CAHD,MAGO;IACL,OAAOD,OAAP;EACD;AACF","names":["PublicKey","parseIdlErrors","idl","errors","Map","forEach","e","msg","_a","name","set","code","toInstruction","idlIx","args","length","Error","ix","idx","ixArg","validateAccounts","ixAccounts","accounts","acc","undefined","translateAddress","address","pk"],"sourceRoot":"","sources":["../../../src/program/common.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
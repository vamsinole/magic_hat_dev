{"ast":null,"code":"import { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\n\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\n\nexport class AccountsCoder {\n  constructor(idl) {\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n\n    const layouts = idl.accounts.map(acc => {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n\n  async encode(accountName, account) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n    const layout = this.accountLayouts.get(accountName);\n    const len = layout.encode(account, buffer);\n    let accountData = buffer.slice(0, len);\n    let discriminator = await accountDiscriminator(accountName);\n    return Buffer.concat([discriminator, accountData]);\n  }\n\n  decode(accountName, ix) {\n    // Chop off the discriminator before decoding.\n    const data = ix.slice(8);\n    const layout = this.accountLayouts.get(accountName);\n    return layout.decode(data);\n  }\n\n} // Calculates unique 8 byte discriminator prepended to all anchor accounts.\n\nexport async function accountDiscriminator(name) {\n  return Buffer.from(sha256.digest(`account:${name}`)).slice(0, 8);\n}","map":{"version":3,"mappings":"AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA;;;;AAGA,OAAO,MAAMC,0BAA0B,GAAG,CAAnC;AAEP;;;;AAGA,OAAM,MAAOC,aAAP,CAAoB;EAMxBC,YAAmBC,GAAnB,EAA2B;IACzB,IAAIA,GAAG,CAACC,QAAJ,KAAiBC,SAArB,EAAgC;MAC9B,KAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;MACA;IACD;;IACD,MAAMC,OAAO,GAAuBL,GAAG,CAACC,QAAJ,CAAaK,GAAb,CAAkBC,GAAD,IAAQ;MAC3D,OAAO,CAACA,GAAG,CAACC,IAAL,EAAWb,QAAQ,CAACc,aAAT,CAAuBF,GAAvB,EAA4BP,GAAG,CAACU,KAAhC,CAAX,CAAP;IACD,CAFmC,CAApC;IAIA,KAAKP,cAAL,GAAsB,IAAIC,GAAJ,CAAQC,OAAR,CAAtB;EACD;;EAEkB,MAANM,MAAM,CACjBC,WADiB,EAEjBC,OAFiB,EAEP;IAEV,MAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAa,IAAb,CAAf,CAFU,CAEyB;;IACnC,MAAMC,MAAM,GAAG,KAAKd,cAAL,CAAoBe,GAApB,CAAwBN,WAAxB,CAAf;IACA,MAAMO,GAAG,GAAGF,MAAM,CAACN,MAAP,CAAcE,OAAd,EAAuBC,MAAvB,CAAZ;IACA,IAAIM,WAAW,GAAGN,MAAM,CAACO,KAAP,CAAa,CAAb,EAAgBF,GAAhB,CAAlB;IACA,IAAIG,aAAa,GAAG,MAAMC,oBAAoB,CAACX,WAAD,CAA9C;IACA,OAAOG,MAAM,CAACS,MAAP,CAAc,CAACF,aAAD,EAAgBF,WAAhB,CAAd,CAAP;EACD;;EAEMK,MAAM,CAAUb,WAAV,EAA+Bc,EAA/B,EAAyC;IACpD;IACA,MAAMC,IAAI,GAAGD,EAAE,CAACL,KAAH,CAAS,CAAT,CAAb;IACA,MAAMJ,MAAM,GAAG,KAAKd,cAAL,CAAoBe,GAApB,CAAwBN,WAAxB,CAAf;IACA,OAAOK,MAAM,CAACQ,MAAP,CAAcE,IAAd,CAAP;EACD;;AAnCuB,C,CAsC1B;;AACA,OAAO,eAAeJ,oBAAf,CAAoCf,IAApC,EAAgD;EACrD,OAAOO,MAAM,CAACa,IAAP,CAAYhC,MAAM,CAACiC,MAAP,CAAc,WAAWrB,IAAI,EAA7B,CAAZ,EAA8Ca,KAA9C,CAAoD,CAApD,EAAuD,CAAvD,CAAP;AACD","names":["IdlCoder","sha256","ACCOUNT_DISCRIMINATOR_SIZE","AccountsCoder","constructor","idl","accounts","undefined","accountLayouts","Map","layouts","map","acc","name","typeDefLayout","types","encode","accountName","account","buffer","Buffer","alloc","layout","get","len","accountData","slice","discriminator","accountDiscriminator","concat","decode","ix","data","from","digest"],"sourceRoot":"","sources":["../../../src/coder/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
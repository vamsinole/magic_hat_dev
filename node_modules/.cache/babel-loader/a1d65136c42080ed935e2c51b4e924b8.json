{"ast":null,"code":"import _createClass from \"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nexport var IdlError = /*#__PURE__*/function (_Error) {\n  _inherits(IdlError, _Error);\n\n  var _super = _createSuper(IdlError);\n\n  function IdlError() {\n    _classCallCheck(this, IdlError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(IdlError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // An error from a user defined program.\n\nexport var ProgramError = /*#__PURE__*/function (_Error2) {\n  _inherits(ProgramError, _Error2);\n\n  var _super2 = _createSuper(ProgramError);\n\n  function ProgramError(code, msg) {\n    var _this;\n\n    _classCallCheck(this, ProgramError);\n\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    _this = _super2.call.apply(_super2, [this].concat(params));\n    _this.code = code;\n    _this.msg = msg;\n    return _this;\n  }\n\n  _createClass(ProgramError, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.msg;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(err, idlErrors) {\n      // TODO: don't rely on the error string. web3.js should preserve the error\n      //       code information instead of giving us an untyped string.\n      var components = err.toString().split(\"custom program error: \");\n\n      if (components.length !== 2) {\n        return null;\n      }\n\n      var errorCode;\n\n      try {\n        errorCode = parseInt(components[1]);\n      } catch (parseErr) {\n        return null;\n      } // Parse user error.\n\n\n      var errorMsg = idlErrors.get(errorCode);\n\n      if (errorMsg !== undefined) {\n        return new ProgramError(errorCode, errorMsg);\n      } // Parse framework internal error.\n\n\n      errorMsg = LangErrorMessage.get(errorCode);\n\n      if (errorMsg !== undefined) {\n        return new ProgramError(errorCode, errorMsg);\n      } // Unable to parse the error. Just return the untranslated error.\n\n\n      return null;\n    }\n  }]);\n\n  return ProgramError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n  // IDL instructions.\n  IdlInstructionStub: 120,\n  IdlInstructionInvalidProgram: 121,\n  // Constraints.\n  ConstraintMut: 140,\n  ConstraintHasOne: 141,\n  ConstraintSigner: 142,\n  ConstraintRaw: 143,\n  ConstraintOwner: 144,\n  ConstraintRentExempt: 145,\n  ConstraintSeeds: 146,\n  ConstraintExecutable: 147,\n  ConstraintState: 148,\n  ConstraintAssociated: 149,\n  ConstraintAssociatedInit: 150,\n  ConstraintClose: 151,\n  ConstraintAddress: 152,\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 160,\n  AccountDiscriminatorNotFound: 161,\n  AccountDiscriminatorMismatch: 162,\n  AccountDidNotDeserialize: 163,\n  AccountDidNotSerialize: 164,\n  AccountNotEnoughKeys: 165,\n  AccountNotMutable: 166,\n  AccountNotProgramOwned: 167,\n  // State.\n  StateInvalidAddress: 180,\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 299\n};\nvar LangErrorMessage = new Map([// Instructions.\n[LangErrorCode.InstructionMissing, \"8 byte instruction identifier not provided\"], [LangErrorCode.InstructionFallbackNotFound, \"Fallback functions are not supported\"], [LangErrorCode.InstructionDidNotDeserialize, \"The program could not deserialize the given instruction\"], [LangErrorCode.InstructionDidNotSerialize, \"The program could not serialize the given instruction\"], // Idl instructions.\n[LangErrorCode.IdlInstructionStub, \"The program was compiled without idl instructions\"], [LangErrorCode.IdlInstructionInvalidProgram, \"The transaction was given an invalid program for the IDL instruction\"], // Constraints.\n[LangErrorCode.ConstraintMut, \"A mut constraint was violated\"], [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"], [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"], [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"], [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"], [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"], [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"], [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"], [LangErrorCode.ConstraintState, \"A state constraint was violated\"], [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"], [LangErrorCode.ConstraintAssociatedInit, \"An associated init constraint was violated\"], [LangErrorCode.ConstraintClose, \"A close constraint was violated\"], [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"], // Accounts.\n[LangErrorCode.AccountDiscriminatorAlreadySet, \"The account discriminator was already set on this account\"], [LangErrorCode.AccountDiscriminatorNotFound, \"No 8 byte discriminator was found on the account\"], [LangErrorCode.AccountDiscriminatorMismatch, \"8 byte discriminator did not match what was expected\"], [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"], [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"], [LangErrorCode.AccountNotEnoughKeys, \"Not enough account keys given to the instruction\"], [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"], [LangErrorCode.AccountNotProgramOwned, \"The given account is not owned by the executing program\"], // State.\n[LangErrorCode.StateInvalidAddress, \"The given state account does not have the correct address\"], // Misc.\n[LangErrorCode.Deprecated, \"The API being used is deprecated and should no longer be used\"]]);","map":{"version":3,"mappings":";;;;;AAAA,WAAaA,QAAb;EAAA;;EAAA;;EAAA;IAAA;;IAAA;EAAA;;EAAA;AAAA,iCAA8BC,KAA9B,G,CAEA;;AACA,WAAaC,YAAb;EAAA;;EAAA;;EACE,sBAAqBC,IAArB,EAA4CC,GAA5C,EAAyE;IAAA;;IAAA;;IAAA,kCAAbC,MAAa;MAAbA,MAAa;IAAA;;IACvE,kDAASA,MAAT;IADmB;IAAuB;IAA6B;EAExE;;EAHH;IAAA;IAAA,OAuCS,oBAAQ;MACb,OAAO,KAAKD,GAAZ;IACD;EAzCH;IAAA;IAAA,OAKS,eACLE,GADK,EAELC,SAFK,EAEyB;MAE9B;MACA;MACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,QAAJ,GAAeC,KAAf,CAAqB,wBAArB,CAAjB;;MACA,IAAIF,UAAU,CAACG,MAAX,KAAsB,CAA1B,EAA6B;QAC3B,OAAO,IAAP;MACD;;MAED,IAAIC,SAAJ;;MACA,IAAI;QACFA,SAAS,GAAGC,QAAQ,CAACL,UAAU,CAAC,CAAD,CAAX,CAApB;MACD,CAFD,CAEE,OAAOM,QAAP,EAAiB;QACjB,OAAO,IAAP;MACD,CAd6B,CAgB9B;;;MACA,IAAIC,QAAQ,GAAGR,SAAS,CAACS,GAAV,CAAcJ,SAAd,CAAf;;MACA,IAAIG,QAAQ,KAAKE,SAAjB,EAA4B;QAC1B,OAAO,IAAIf,YAAJ,CAAiBU,SAAjB,EAA4BG,QAA5B,CAAP;MACD,CApB6B,CAsB9B;;;MACAA,QAAQ,GAAGG,gBAAgB,CAACF,GAAjB,CAAqBJ,SAArB,CAAX;;MACA,IAAIG,QAAQ,KAAKE,SAAjB,EAA4B;QAC1B,OAAO,IAAIf,YAAJ,CAAiBU,SAAjB,EAA4BG,QAA5B,CAAP;MACD,CA1B6B,CA4B9B;;;MACA,OAAO,IAAP;IACD;EArCH;;EAAA;AAAA,iCAAkCd,KAAlC;AA4CA,IAAMkB,aAAa,GAAG;EACpB;EACAC,kBAAkB,EAAE,GAFA;EAGpBC,2BAA2B,EAAE,GAHT;EAIpBC,4BAA4B,EAAE,GAJV;EAKpBC,0BAA0B,EAAE,GALR;EAOpB;EACAC,kBAAkB,EAAE,GARA;EASpBC,4BAA4B,EAAE,GATV;EAWpB;EACAC,aAAa,EAAE,GAZK;EAapBC,gBAAgB,EAAE,GAbE;EAcpBC,gBAAgB,EAAE,GAdE;EAepBC,aAAa,EAAE,GAfK;EAgBpBC,eAAe,EAAE,GAhBG;EAiBpBC,oBAAoB,EAAE,GAjBF;EAkBpBC,eAAe,EAAE,GAlBG;EAmBpBC,oBAAoB,EAAE,GAnBF;EAoBpBC,eAAe,EAAE,GApBG;EAqBpBC,oBAAoB,EAAE,GArBF;EAsBpBC,wBAAwB,EAAE,GAtBN;EAuBpBC,eAAe,EAAE,GAvBG;EAwBpBC,iBAAiB,EAAE,GAxBC;EA0BpB;EACAC,8BAA8B,EAAE,GA3BZ;EA4BpBC,4BAA4B,EAAE,GA5BV;EA6BpBC,4BAA4B,EAAE,GA7BV;EA8BpBC,wBAAwB,EAAE,GA9BN;EA+BpBC,sBAAsB,EAAE,GA/BJ;EAgCpBC,oBAAoB,EAAE,GAhCF;EAiCpBC,iBAAiB,EAAE,GAjCC;EAkCpBC,sBAAsB,EAAE,GAlCJ;EAoCpB;EACAC,mBAAmB,EAAE,GArCD;EAuCpB;EACAC,UAAU,EAAE;AAxCQ,CAAtB;AA2CA,IAAM9B,gBAAgB,GAAG,IAAI+B,GAAJ,CAAQ,CAC/B;AACA,CACE9B,aAAa,CAACC,kBADhB,EAEE,4CAFF,CAF+B,EAM/B,CACED,aAAa,CAACE,2BADhB,EAEE,sCAFF,CAN+B,EAU/B,CACEF,aAAa,CAACG,4BADhB,EAEE,yDAFF,CAV+B,EAc/B,CACEH,aAAa,CAACI,0BADhB,EAEE,uDAFF,CAd+B,EAmB/B;AACA,CACEJ,aAAa,CAACK,kBADhB,EAEE,mDAFF,CApB+B,EAwB/B,CACEL,aAAa,CAACM,4BADhB,EAEE,sEAFF,CAxB+B,EA6B/B;AACA,CAACN,aAAa,CAACO,aAAf,EAA8B,+BAA9B,CA9B+B,EA+B/B,CAACP,aAAa,CAACQ,gBAAf,EAAiC,mCAAjC,CA/B+B,EAgC/B,CAACR,aAAa,CAACS,gBAAf,EAAiC,kCAAjC,CAhC+B,EAiC/B,CAACT,aAAa,CAACU,aAAf,EAA8B,+BAA9B,CAjC+B,EAkC/B,CAACV,aAAa,CAACW,eAAf,EAAgC,kCAAhC,CAlC+B,EAmC/B,CAACX,aAAa,CAACY,oBAAf,EAAqC,uCAArC,CAnC+B,EAoC/B,CAACZ,aAAa,CAACa,eAAf,EAAgC,iCAAhC,CApC+B,EAqC/B,CAACb,aAAa,CAACc,oBAAf,EAAqC,uCAArC,CArC+B,EAsC/B,CAACd,aAAa,CAACe,eAAf,EAAgC,iCAAhC,CAtC+B,EAuC/B,CAACf,aAAa,CAACgB,oBAAf,EAAqC,uCAArC,CAvC+B,EAwC/B,CACEhB,aAAa,CAACiB,wBADhB,EAEE,4CAFF,CAxC+B,EA4C/B,CAACjB,aAAa,CAACkB,eAAf,EAAgC,iCAAhC,CA5C+B,EA6C/B,CAAClB,aAAa,CAACmB,iBAAf,EAAkC,oCAAlC,CA7C+B,EA+C/B;AACA,CACEnB,aAAa,CAACoB,8BADhB,EAEE,2DAFF,CAhD+B,EAoD/B,CACEpB,aAAa,CAACqB,4BADhB,EAEE,kDAFF,CApD+B,EAwD/B,CACErB,aAAa,CAACsB,4BADhB,EAEE,sDAFF,CAxD+B,EA4D/B,CAACtB,aAAa,CAACuB,wBAAf,EAAyC,mCAAzC,CA5D+B,EA6D/B,CAACvB,aAAa,CAACwB,sBAAf,EAAuC,iCAAvC,CA7D+B,EA8D/B,CACExB,aAAa,CAACyB,oBADhB,EAEE,kDAFF,CA9D+B,EAkE/B,CAACzB,aAAa,CAAC0B,iBAAf,EAAkC,kCAAlC,CAlE+B,EAmE/B,CACE1B,aAAa,CAAC2B,sBADhB,EAEE,yDAFF,CAnE+B,EAwE/B;AACA,CACE3B,aAAa,CAAC4B,mBADhB,EAEE,2DAFF,CAzE+B,EA8E/B;AACA,CACE5B,aAAa,CAAC6B,UADhB,EAEE,+DAFF,CA/E+B,CAAR,CAAzB","names":["IdlError","Error","ProgramError","code","msg","params","err","idlErrors","components","toString","split","length","errorCode","parseInt","parseErr","errorMsg","get","undefined","LangErrorMessage","LangErrorCode","InstructionMissing","InstructionFallbackNotFound","InstructionDidNotDeserialize","InstructionDidNotSerialize","IdlInstructionStub","IdlInstructionInvalidProgram","ConstraintMut","ConstraintHasOne","ConstraintSigner","ConstraintRaw","ConstraintOwner","ConstraintRentExempt","ConstraintSeeds","ConstraintExecutable","ConstraintState","ConstraintAssociated","ConstraintAssociatedInit","ConstraintClose","ConstraintAddress","AccountDiscriminatorAlreadySet","AccountDiscriminatorNotFound","AccountDiscriminatorMismatch","AccountDidNotDeserialize","AccountDidNotSerialize","AccountNotEnoughKeys","AccountNotMutable","AccountNotProgramOwned","StateInvalidAddress","Deprecated","Map"],"sourceRoot":"","sources":["../../src/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
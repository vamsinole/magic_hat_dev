{"ast":null,"code":"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\n\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\n\n\nfunction checkUint8Array(b) {\n  if (!(b instanceof Uint8Array)) {\n    throw new TypeError('b must be a Uint8Array');\n  }\n}\n\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\n\nfunction uint8ArrayToBuffer(b) {\n  checkUint8Array(b);\n  return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\n\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\n\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n\n\n    this.span = span;\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n\n\n  makeDestinationObject() {\n    return {};\n  }\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Uint8Array} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n\n\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n\n    return this.span;\n  }\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n\n\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n\n\n  fromArray(values) {\n    return undefined;\n  }\n\n}\n\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\n\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n\n  return name;\n}\n\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n\n  layout.makeDestinationObject = () => new Class();\n\n  Object.defineProperty(Class.prototype, 'encode', {\n    value(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value(b, offset) {\n      return layout.decode(b, offset);\n    },\n\n    writable: true\n  });\n}\n\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\n\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n\n}\n\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\n\nclass GreedyCount extends ExternalLayout {\n  constructor() {\n    let elementSpan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let property = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n\n    super(-1, property);\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n\n    this.elementSpan = elementSpan;\n  }\n  /** @override */\n\n\n  isCount() {\n    return true;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    checkUint8Array(b);\n    const rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  }\n  /** @override */\n\n\n  encode(src, b, offset) {\n    return 0;\n  }\n\n}\n\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\n\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let property = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    super(layout.span, property || layout.property);\n    /** The subordinated layout. */\n\n    this.layout = layout;\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Uint8Array\n     * being accessed.  */\n\n    this.offset = offset;\n  }\n  /** @override */\n\n\n  isCount() {\n    return this.layout instanceof UInt || this.layout instanceof UIntBE;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.layout.decode(b, offset + this.offset);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n\n}\n\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n\n}\n\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n\n}\n\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass Int extends Layout {\n  constructor(span, property) {\n    super(span, property);\n\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n    return this.span;\n  }\n\n}\n\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass IntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n    return this.span;\n  }\n\n}\n\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\n\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - hi32 * V2E32;\n  return {\n    hi32,\n    lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\n\n\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const buffer = uint8ArrayToBuffer(b);\n    const lo32 = buffer.readUInt32LE(offset);\n    const hi32 = buffer.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const split = divmodInt64(src);\n    const buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32LE(split.lo32, offset);\n    buffer.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n\n}\n\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nclass NearUInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const buffer = uint8ArrayToBuffer(b);\n    const hi32 = buffer.readUInt32BE(offset);\n    const lo32 = buffer.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const split = divmodInt64(src);\n    const buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32BE(split.hi32, offset);\n    buffer.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n\n}\n\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const buffer = uint8ArrayToBuffer(b);\n    const lo32 = buffer.readUInt32LE(offset);\n    const hi32 = buffer.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const split = divmodInt64(src);\n    const buffer = uint8ArrayToBuffer(b);\n    buffer.writeUInt32LE(split.lo32, offset);\n    buffer.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n\n}\n\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nclass NearInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const buffer = uint8ArrayToBuffer(b);\n    const hi32 = buffer.readInt32BE(offset);\n    const lo32 = buffer.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const split = divmodInt64(src);\n    const buffer = uint8ArrayToBuffer(b);\n    buffer.writeInt32BE(split.hi32, offset);\n    buffer.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n\n}\n\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass Float extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readFloatLE(offset);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n    return 4;\n  }\n\n}\n\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass FloatBE extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readFloatBE(offset);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n    return 4;\n  }\n\n}\n\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass Double extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readDoubleLE(offset);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n    return 8;\n  }\n\n}\n\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass DoubleBE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return uint8ArrayToBuffer(b).readDoubleBE(offset);\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n    return 8;\n  }\n\n}\n\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass Sequence extends Layout {\n  constructor(elementLayout, count, property) {\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n\n    super(span, property);\n    /** The layout for individual elements of the sequence. */\n\n    this.elementLayout = elementLayout;\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n\n    this.count = count;\n  }\n  /** @override */\n\n\n  getSpan(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (0 <= this.span) {\n      return this.span;\n    }\n\n    let span = 0;\n    let count = this.count;\n\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      let idx = 0;\n\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n\n    return span;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const rv = [];\n    let i = 0;\n    let count = this.count;\n\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n\n    return rv;\n  }\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const elo = this.elementLayout;\n    const span = src.reduce((span, v) => {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n\n    return span;\n  }\n\n}\n\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\n\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields) && fields.reduce((acc, v) => acc && v instanceof Layout, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n    /* Verify absence of unnamed variable-length fields. */\n\n\n    for (const fd of fields) {\n      if (0 > fd.span && undefined === fd.property) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    let span = -1;\n\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {// ignore error\n    }\n\n    super(span, property);\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n\n    this.fields = fields;\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n\n    this.decodePrefixes = !!decodePrefixes;\n  }\n  /** @override */\n\n\n  getSpan(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (0 <= this.span) {\n      return this.span;\n    }\n\n    let span = 0;\n\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n\n    return span;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    checkUint8Array(b);\n    const dest = this.makeDestinationObject();\n\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n\n      offset += fd.getSpan(b, offset);\n\n      if (this.decodePrefixes && b.length === offset) {\n        break;\n      }\n    }\n\n    return dest;\n  }\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = 0 < span ? span : 0;\n\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n\n\n    return lastOffset + lastWrote - firstOffset;\n  }\n  /** @override */\n\n\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n\n    for (const fd of this.fields) {\n      if (undefined !== fd.property && 0 < values.length) {\n        dest[fd.property] = values.shift();\n      }\n    }\n\n    return dest;\n  }\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n\n\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n\n\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n\n    let offset = 0;\n\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n\n    return undefined;\n  }\n\n}\n\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\n\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n\n\n  decode(b, offset) {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n\n\n  encode(src, b, offset) {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n}\n\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\n\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    super(property || layout.property || 'variant');\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n\n    this.layout = layout;\n  }\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n\n}\n\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    let discriminator;\n\n    if (discr instanceof UInt || discr instanceof UIntBE) {\n      discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discriminator = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    } else {\n      discriminator = discr;\n    }\n\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n\n\n    let span = -1;\n\n    if (defaultLayout) {\n      span = defaultLayout.span;\n\n      if (0 <= span && (discr instanceof UInt || discr instanceof UIntBE)) {\n        span += discriminator.layout.span;\n      }\n    }\n\n    super(span, property);\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n\n    this.discriminator = discriminator;\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n\n    this.usesPrefixDiscriminator = discr instanceof UInt || discr instanceof UIntBE;\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n\n    this.defaultLayout = defaultLayout;\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n\n    this.registry = {};\n    /* Private variable used when invoking getSourceVariant */\n\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n\n    this.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n\n\n    this.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n  /** @override */\n\n\n  getSpan(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (0 <= this.span) {\n      return this.span;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n\n\n    const vlo = this.getVariant(b, offset);\n\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n\n    return vlo.getSpan(b, offset);\n  }\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisfied rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n\n\n  defaultGetSourceVariant(src) {\n    if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n      if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n        return undefined;\n      }\n\n      const vlo = this.registry[src[this.discriminator.property]];\n\n      if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n\n        if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n\n    throw new Error('unable to infer src variant');\n  }\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    const clo = this.registry[discr];\n\n    if (undefined === clo) {\n      const defaultLayout = this.defaultLayout;\n      let contentOffset = 0;\n\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr; // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n\n    return dest;\n  }\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const vlo = this.getSourceVariant(src);\n\n    if (undefined === vlo) {\n      const dlo = this.discriminator; // this.defaultLayout is not undefined when vlo is undefined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n\n      dlo.encode(src[dlo.property], b, offset); // clo.property is not undefined when vlo is undefined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n    }\n\n    return vlo.encode(src, b, offset);\n  }\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n\n\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Uint8Array)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Uint8Array}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n\n\n  getVariant(vb) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let variant;\n\n    if (vb instanceof Uint8Array) {\n      variant = this.discriminator.decode(vb, offset);\n    } else {\n      variant = vb;\n    }\n\n    return this.registry[variant];\n  }\n\n}\n\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\n\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n\n    let span = union.span;\n\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n\n    super(span, property);\n    /** The {@link Union} to which this variant belongs. */\n\n    this.union = union;\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n\n    this.variant = variant;\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n\n    this.layout = layout || null;\n  }\n  /** @override */\n\n\n  getSpan(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n\n    let contentOffset = 0;\n\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n\n\n    let span = 0;\n\n    if (this.layout) {\n      span = this.layout.getSpan(b, offset + contentOffset);\n    }\n\n    return contentOffset + span;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const dest = this.makeDestinationObject();\n\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n\n    let contentOffset = 0;\n\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n\n    return dest;\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let contentOffset = 0;\n\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n\n    if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n\n      if (0 <= this.union.span && span > this.union.span) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n\n    return span;\n  }\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n\n\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n\n    return undefined;\n  }\n\n}\n\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\n\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n\n  return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nclass BitStructure extends Layout {\n  constructor(word, msb, property) {\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = false;\n    }\n\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n\n    super(word.span, property);\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n\n    this.word = word;\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n\n    this.msb = !!msb;\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n\n    this.fields = [];\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n\n    let value = 0;\n\n    this._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n\n    this._packedGetValue = function () {\n      return value;\n    };\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const dest = this.makeDestinationObject();\n    const value = this.word.decode(b, offset);\n\n    this._packedSetValue(value);\n\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b);\n      }\n    }\n\n    return dest;\n  }\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const value = this.word.decode(b, offset);\n\n    this._packedSetValue(value);\n\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n\n    return this.word.encode(this._packedGetValue(), b, offset);\n  }\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n\n\n  addField(bits, property) {\n    const bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  }\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  // `Boolean` conflicts with the native primitive type\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  addBoolean(property) {\n    // This is my Boolean, not the Javascript one.\n    const bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  }\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n\n\n  fieldFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n\n    return undefined;\n  }\n\n}\n\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\n\nclass BitField {\n  constructor(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n\n    const totalBits = 8 * container.span;\n    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n\n\n    this.container = container;\n    /** The span of this value in bits. */\n\n    this.bits = bits;\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n\n    this.valueMask = (1 << bits) - 1;\n\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n\n\n    this.start = usedBits;\n\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n\n\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n\n\n  decode(b, offset) {\n    const word = this.container._packedGetValue();\n\n    const wordValue = fixBitwiseResult(word & this.wordMask);\n    const value = wordValue >>> this.start;\n    return value;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n\n\n  encode(value) {\n    if ('number' !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n      throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n    }\n\n    const word = this.container._packedGetValue();\n\n    const wordValue = fixBitwiseResult(value << this.start);\n\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n  }\n\n}\n\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n\n/* eslint-disable no-extend-native */\n\nclass Boolean extends BitField {\n  constructor(container, property) {\n    super(container, 1, property);\n  }\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n\n\n  decode(b, offset) {\n    return !!super.decode(b, offset);\n  }\n  /** @override */\n\n\n  encode(value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n\n    super.encode(value);\n  }\n\n}\n\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass Blob extends Layout {\n  constructor(length, property) {\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n\n    super(span, property);\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n\n    this.length = length;\n  }\n  /** @override */\n\n\n  getSpan(b, offset) {\n    let span = this.span;\n\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n\n    return span;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let span = this.span;\n\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n\n    return uint8ArrayToBuffer(b).slice(offset, offset + span);\n  }\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n\n\n  encode(src, b, offset) {\n    let span = this.length;\n\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n\n    if (!(src instanceof Uint8Array && span === src.length)) {\n      throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');\n    }\n\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Uint8Array');\n    }\n\n    const srcBuffer = uint8ArrayToBuffer(src);\n    uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n\n    return span;\n  }\n\n}\n\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass CString extends Layout {\n  constructor(property) {\n    super(-1, property);\n  }\n  /** @override */\n\n\n  getSpan(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    checkUint8Array(b);\n    let idx = offset;\n\n    while (idx < b.length && 0 !== b[idx]) {\n      idx += 1;\n    }\n\n    return 1 + idx - offset;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const span = this.getSpan(b, offset);\n    return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = String(src);\n    }\n\n    const srcb = buffer_1.Buffer.from(src, 'utf8');\n    const span = srcb.length;\n\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n\n    const buffer = uint8ArrayToBuffer(b);\n    srcb.copy(buffer, offset);\n    buffer[offset + span] = 0;\n    return span + 1;\n  }\n\n}\n\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass UTF8 extends Layout {\n  constructor(maxSpan, property) {\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    super(-1, property);\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n\n    this.maxSpan = maxSpan;\n  }\n  /** @override */\n\n\n  getSpan(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    checkUint8Array(b);\n    return b.length - offset;\n  }\n  /** @override */\n\n\n  decode(b) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const span = this.getSpan(b, offset);\n\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n\n    return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n  }\n  /** @override */\n\n\n  encode(src, b) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = String(src);\n    }\n\n    const srcb = buffer_1.Buffer.from(src, 'utf8');\n    const span = srcb.length;\n\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n\n    srcb.copy(uint8ArrayToBuffer(b), offset);\n    return span;\n  }\n\n}\n\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nclass Constant extends Layout {\n  constructor(value, property) {\n    super(0, property);\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n\n    this.value = value;\n  }\n  /** @override */\n\n\n  decode(b, offset) {\n    return this.value;\n  }\n  /** @override */\n\n\n  encode(src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  }\n\n}\n\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\n\nexports.greedy = (elementSpan, property) => new GreedyCount(elementSpan, property);\n/** Factory for {@link OffsetLayout}. */\n\n\nexports.offset = (layout, offset, property) => new OffsetLayout(layout, offset, property);\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\n\n\nexports.u8 = property => new UInt(1, property);\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16 = property => new UInt(2, property);\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24 = property => new UInt(3, property);\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32 = property => new UInt(4, property);\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40 = property => new UInt(5, property);\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48 = property => new UInt(6, property);\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64 = property => new NearUInt64(property);\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16be = property => new UIntBE(2, property);\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24be = property => new UIntBE(3, property);\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32be = property => new UIntBE(4, property);\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40be = property => new UIntBE(5, property);\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48be = property => new UIntBE(6, property);\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64be = property => new NearUInt64BE(property);\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\n\n\nexports.s8 = property => new Int(1, property);\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16 = property => new Int(2, property);\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24 = property => new Int(3, property);\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32 = property => new Int(4, property);\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40 = property => new Int(5, property);\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48 = property => new Int(6, property);\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64 = property => new NearInt64(property);\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16be = property => new IntBE(2, property);\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24be = property => new IntBE(3, property);\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32be = property => new IntBE(4, property);\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40be = property => new IntBE(5, property);\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48be = property => new IntBE(6, property);\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64be = property => new NearInt64BE(property);\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\n\n\nexports.f32 = property => new Float(property);\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\n\n\nexports.f32be = property => new FloatBE(property);\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\n\n\nexports.f64 = property => new Double(property);\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\n\n\nexports.f64be = property => new DoubleBE(property);\n/** Factory for {@link Structure} values. */\n\n\nexports.struct = (fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes);\n/** Factory for {@link BitStructure} values. */\n\n\nexports.bits = (word, msb, property) => new BitStructure(word, msb, property);\n/** Factory for {@link Sequence} values. */\n\n\nexports.seq = (elementLayout, count, property) => new Sequence(elementLayout, count, property);\n/** Factory for {@link Union} values. */\n\n\nexports.union = (discr, defaultLayout, property) => new Union(discr, defaultLayout, property);\n/** Factory for {@link UnionLayoutDiscriminator} values. */\n\n\nexports.unionLayoutDiscriminator = (layout, property) => new UnionLayoutDiscriminator(layout, property);\n/** Factory for {@link Blob} values. */\n\n\nexports.blob = (length, property) => new Blob(length, property);\n/** Factory for {@link CString} values. */\n\n\nexports.cstr = property => new CString(property);\n/** Factory for {@link UTF8} values. */\n\n\nexports.utf8 = (maxSpan, property) => new UTF8(maxSpan, property);\n/** Factory for {@link Constant} values. */\n\n\nexports.constant = (value, property) => new Constant(value, property);","map":{"version":3,"mappings":"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","names":["checkUint8Array","b","Uint8Array","TypeError","exports","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","undefined","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","defineProperty","value","encode","writable","decode","ExternalLayout","isCount","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant"],"sourceRoot":"","sources":["../src/Layout.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
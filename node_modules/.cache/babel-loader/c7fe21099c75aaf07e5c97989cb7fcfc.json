{"ast":null,"code":"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\n\nvar _get = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _assertThisInitialized = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _inherits = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _classCallCheck = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/vamshikrishnaenjapuri/magic_hat_ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\n\nvar buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\n\n\nfunction checkUint8Array(b) {\n  if (!(b instanceof Uint8Array)) {\n    throw new TypeError('b must be a Uint8Array');\n  }\n}\n\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\n\nfunction uint8ArrayToBuffer(b) {\n  checkUint8Array(b);\n  return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\n\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\n\nvar Layout = /*#__PURE__*/function () {\n  function Layout(span, property) {\n    _classCallCheck(this, Layout);\n\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n\n\n    this.span = span;\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n\n\n  _createClass(Layout, [{\n    key: \"makeDestinationObject\",\n    value: function makeDestinationObject() {\n      return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n\n  }, {\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 > this.span) {\n        throw new RangeError('indeterminate span');\n      }\n\n      return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n\n  }, {\n    key: \"replicate\",\n    value: function replicate(property) {\n      var rv = Object.create(this.constructor.prototype);\n      Object.assign(rv, this);\n      rv.property = property;\n      return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      return undefined;\n    }\n  }]);\n\n  return Layout;\n}();\n\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\n\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n\n  return name;\n}\n\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n\n  layout.makeDestinationObject = function () {\n    return new Class();\n  };\n\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function value(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function value(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true\n  });\n}\n\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\n\nvar ExternalLayout = /*#__PURE__*/function (_Layout) {\n  _inherits(ExternalLayout, _Layout);\n\n  var _super = _createSuper(ExternalLayout);\n\n  function ExternalLayout() {\n    _classCallCheck(this, ExternalLayout);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExternalLayout, [{\n    key: \"isCount\",\n    value:\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    function isCount() {\n      throw new Error('ExternalLayout is abstract');\n    }\n  }]);\n\n  return ExternalLayout;\n}(Layout);\n\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\n\nvar GreedyCount = /*#__PURE__*/function (_ExternalLayout) {\n  _inherits(GreedyCount, _ExternalLayout);\n\n  var _super2 = _createSuper(GreedyCount);\n\n  function GreedyCount() {\n    var _this;\n\n    var elementSpan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var property = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, GreedyCount);\n\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n\n    _this = _super2.call(this, -1, property);\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n\n    _this.elementSpan = elementSpan;\n    return _this;\n  }\n  /** @override */\n\n\n  _createClass(GreedyCount, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return true;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var rem = b.length - offset;\n      return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return 0;\n    }\n  }]);\n\n  return GreedyCount;\n}(ExternalLayout);\n\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\n\nvar OffsetLayout = /*#__PURE__*/function (_ExternalLayout2) {\n  _inherits(OffsetLayout, _ExternalLayout2);\n\n  var _super3 = _createSuper(OffsetLayout);\n\n  function OffsetLayout(layout) {\n    var _this2;\n\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var property = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, OffsetLayout);\n\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    _this2 = _super3.call(this, layout.span, property || layout.property);\n    /** The subordinated layout. */\n\n    _this2.layout = layout;\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Uint8Array\n     * being accessed.  */\n\n    _this2.offset = offset;\n    return _this2;\n  }\n  /** @override */\n\n\n  _createClass(OffsetLayout, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return this.layout instanceof UInt || this.layout instanceof UIntBE;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return this.layout.encode(src, b, offset + this.offset);\n    }\n  }]);\n\n  return OffsetLayout;\n}(ExternalLayout);\n\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UInt = /*#__PURE__*/function (_Layout2) {\n  _inherits(UInt, _Layout2);\n\n  var _super4 = _createSuper(UInt);\n\n  function UInt(span, property) {\n    var _this3;\n\n    _classCallCheck(this, UInt);\n\n    _this3 = _super4.call(this, span, property);\n\n    if (6 < _this3.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this3;\n  }\n  /** @override */\n\n\n  _createClass(UInt, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return UInt;\n}(Layout);\n\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UIntBE = /*#__PURE__*/function (_Layout3) {\n  _inherits(UIntBE, _Layout3);\n\n  var _super5 = _createSuper(UIntBE);\n\n  function UIntBE(span, property) {\n    var _this4;\n\n    _classCallCheck(this, UIntBE);\n\n    _this4 = _super5.call(this, span, property);\n\n    if (6 < _this4.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this4;\n  }\n  /** @override */\n\n\n  _createClass(UIntBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return UIntBE;\n}(Layout);\n\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Int = /*#__PURE__*/function (_Layout4) {\n  _inherits(Int, _Layout4);\n\n  var _super6 = _createSuper(Int);\n\n  function Int(span, property) {\n    var _this5;\n\n    _classCallCheck(this, Int);\n\n    _this5 = _super6.call(this, span, property);\n\n    if (6 < _this5.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this5;\n  }\n  /** @override */\n\n\n  _createClass(Int, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return Int;\n}(Layout);\n\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar IntBE = /*#__PURE__*/function (_Layout5) {\n  _inherits(IntBE, _Layout5);\n\n  var _super7 = _createSuper(IntBE);\n\n  function IntBE(span, property) {\n    var _this6;\n\n    _classCallCheck(this, IntBE);\n\n    _this6 = _super7.call(this, span, property);\n\n    if (6 < _this6.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this6;\n  }\n  /** @override */\n\n\n  _createClass(IntBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return IntBE;\n}(Layout);\n\nexports.IntBE = IntBE;\nvar V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\n\nfunction divmodInt64(src) {\n  var hi32 = Math.floor(src / V2E32);\n  var lo32 = src - hi32 * V2E32;\n  return {\n    hi32: hi32,\n    lo32: lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\n\n\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nvar NearUInt64 = /*#__PURE__*/function (_Layout6) {\n  _inherits(NearUInt64, _Layout6);\n\n  var _super8 = _createSuper(NearUInt64);\n\n  function NearUInt64(property) {\n    _classCallCheck(this, NearUInt64);\n\n    return _super8.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearUInt64, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var lo32 = buffer.readUInt32LE(offset);\n      var hi32 = buffer.readUInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeUInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearUInt64;\n}(Layout);\n\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearUInt64BE = /*#__PURE__*/function (_Layout7) {\n  _inherits(NearUInt64BE, _Layout7);\n\n  var _super9 = _createSuper(NearUInt64BE);\n\n  function NearUInt64BE(property) {\n    _classCallCheck(this, NearUInt64BE);\n\n    return _super9.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearUInt64BE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var hi32 = buffer.readUInt32BE(offset);\n      var lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearUInt64BE;\n}(Layout);\n\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearInt64 = /*#__PURE__*/function (_Layout8) {\n  _inherits(NearInt64, _Layout8);\n\n  var _super10 = _createSuper(NearInt64);\n\n  function NearInt64(property) {\n    _classCallCheck(this, NearInt64);\n\n    return _super10.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearInt64, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var lo32 = buffer.readUInt32LE(offset);\n      var hi32 = buffer.readInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearInt64;\n}(Layout);\n\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\nvar NearInt64BE = /*#__PURE__*/function (_Layout9) {\n  _inherits(NearInt64BE, _Layout9);\n\n  var _super11 = _createSuper(NearInt64BE);\n\n  function NearInt64BE(property) {\n    _classCallCheck(this, NearInt64BE);\n\n    return _super11.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearInt64BE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = uint8ArrayToBuffer(b);\n      var hi32 = buffer.readInt32BE(offset);\n      var lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var split = divmodInt64(src);\n      var buffer = uint8ArrayToBuffer(b);\n      buffer.writeInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearInt64BE;\n}(Layout);\n\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Float = /*#__PURE__*/function (_Layout10) {\n  _inherits(Float, _Layout10);\n\n  var _super12 = _createSuper(Float);\n\n  function Float(property) {\n    _classCallCheck(this, Float);\n\n    return _super12.call(this, 4, property);\n  }\n  /** @override */\n\n\n  _createClass(Float, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n      return 4;\n    }\n  }]);\n\n  return Float;\n}(Layout);\n\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar FloatBE = /*#__PURE__*/function (_Layout11) {\n  _inherits(FloatBE, _Layout11);\n\n  var _super13 = _createSuper(FloatBE);\n\n  function FloatBE(property) {\n    _classCallCheck(this, FloatBE);\n\n    return _super13.call(this, 4, property);\n  }\n  /** @override */\n\n\n  _createClass(FloatBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n      return 4;\n    }\n  }]);\n\n  return FloatBE;\n}(Layout);\n\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Double = /*#__PURE__*/function (_Layout12) {\n  _inherits(Double, _Layout12);\n\n  var _super14 = _createSuper(Double);\n\n  function Double(property) {\n    _classCallCheck(this, Double);\n\n    return _super14.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(Double, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n      return 8;\n    }\n  }]);\n\n  return Double;\n}(Layout);\n\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar DoubleBE = /*#__PURE__*/function (_Layout13) {\n  _inherits(DoubleBE, _Layout13);\n\n  var _super15 = _createSuper(DoubleBE);\n\n  function DoubleBE(property) {\n    _classCallCheck(this, DoubleBE);\n\n    return _super15.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(DoubleBE, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n      return 8;\n    }\n  }]);\n\n  return DoubleBE;\n}(Layout);\n\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Sequence = /*#__PURE__*/function (_Layout14) {\n  _inherits(Sequence, _Layout14);\n\n  var _super16 = _createSuper(Sequence);\n\n  function Sequence(elementLayout, count, property) {\n    var _this7;\n\n    _classCallCheck(this, Sequence);\n\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n\n    _this7 = _super16.call(this, span, property);\n    /** The layout for individual elements of the sequence. */\n\n    _this7.elementLayout = elementLayout;\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n\n    _this7.count = count;\n    return _this7;\n  }\n  /** @override */\n\n\n  _createClass(Sequence, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        return this.span;\n      }\n\n      var span = 0;\n      var count = this.count;\n\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n\n      if (0 < this.elementLayout.span) {\n        span = count * this.elementLayout.span;\n      } else {\n        var idx = 0;\n\n        while (idx < count) {\n          span += this.elementLayout.getSpan(b, offset + span);\n          ++idx;\n        }\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var rv = [];\n      var i = 0;\n      var count = this.count;\n\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n\n      while (i < count) {\n        rv.push(this.elementLayout.decode(b, offset));\n        offset += this.elementLayout.getSpan(b, offset);\n        i += 1;\n      }\n\n      return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var elo = this.elementLayout;\n      var span = src.reduce(function (span, v) {\n        return span + elo.encode(v, b, offset + span);\n      }, 0);\n\n      if (this.count instanceof ExternalLayout) {\n        this.count.encode(src.length, b, offset);\n      }\n\n      return span;\n    }\n  }]);\n\n  return Sequence;\n}(Layout);\n\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\n\nvar Structure = /*#__PURE__*/function (_Layout15) {\n  _inherits(Structure, _Layout15);\n\n  var _super17 = _createSuper(Structure);\n\n  function Structure(fields, property, decodePrefixes) {\n    var _this8;\n\n    _classCallCheck(this, Structure);\n\n    if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {\n      return acc && v instanceof Layout;\n    }, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n    /* Verify absence of unnamed variable-length fields. */\n\n\n    var _iterator = _createForOfIteratorHelper(fields),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fd = _step.value;\n\n        if (0 > fd.span && undefined === fd.property) {\n          throw new Error('fields cannot contain unnamed variable-length layout');\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var span = -1;\n\n    try {\n      span = fields.reduce(function (span, fd) {\n        return span + fd.getSpan();\n      }, 0);\n    } catch (e) {// ignore error\n    }\n\n    _this8 = _super17.call(this, span, property);\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n\n    _this8.fields = fields;\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n\n    _this8.decodePrefixes = !!decodePrefixes;\n    return _this8;\n  }\n  /** @override */\n\n\n  _createClass(Structure, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        return this.span;\n      }\n\n      var span = 0;\n\n      try {\n        span = this.fields.reduce(function (span, fd) {\n          var fsp = fd.getSpan(b, offset);\n          offset += fsp;\n          return span + fsp;\n        }, 0);\n      } catch (e) {\n        throw new RangeError('indeterminate span');\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var dest = this.makeDestinationObject();\n\n      var _iterator2 = _createForOfIteratorHelper(this.fields),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var fd = _step2.value;\n\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(b, offset);\n          }\n\n          offset += fd.getSpan(b, offset);\n\n          if (this.decodePrefixes && b.length === offset) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var firstOffset = offset;\n      var lastOffset = 0;\n      var lastWrote = 0;\n\n      var _iterator3 = _createForOfIteratorHelper(this.fields),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var fd = _step3.value;\n          var span = fd.span;\n          lastWrote = 0 < span ? span : 0;\n\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n\n            if (undefined !== fv) {\n              lastWrote = fd.encode(fv, b, offset);\n\n              if (0 > span) {\n                /* Read the as-encoded span, which is not necessarily the\n                 * same as what we wrote. */\n                span = fd.getSpan(b, offset);\n              }\n            }\n          }\n\n          lastOffset = offset;\n          offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return lastOffset + lastWrote - firstOffset;\n    }\n    /** @override */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      var dest = this.makeDestinationObject();\n\n      var _iterator4 = _createForOfIteratorHelper(this.fields),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var fd = _step4.value;\n\n          if (undefined !== fd.property && 0 < values.length) {\n            dest[fd.property] = values.shift();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n\n  }, {\n    key: \"layoutFor\",\n    value: function layoutFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(this.fields),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var fd = _step5.value;\n\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n\n  }, {\n    key: \"offsetOf\",\n    value: function offsetOf(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var offset = 0;\n\n      var _iterator6 = _createForOfIteratorHelper(this.fields),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var fd = _step6.value;\n\n          if (fd.property === property) {\n            return offset;\n          }\n\n          if (0 > fd.span) {\n            offset = -1;\n          } else if (0 <= offset) {\n            offset += fd.span;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Structure;\n}(Layout);\n\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\n\nvar UnionDiscriminator = /*#__PURE__*/function () {\n  function UnionDiscriminator(property) {\n    _classCallCheck(this, UnionDiscriminator);\n\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n\n\n  _createClass(UnionDiscriminator, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n  }]);\n\n  return UnionDiscriminator;\n}();\n\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\n\nvar UnionLayoutDiscriminator = /*#__PURE__*/function (_UnionDiscriminator) {\n  _inherits(UnionLayoutDiscriminator, _UnionDiscriminator);\n\n  var _super18 = _createSuper(UnionLayoutDiscriminator);\n\n  function UnionLayoutDiscriminator(layout, property) {\n    var _this9;\n\n    _classCallCheck(this, UnionLayoutDiscriminator);\n\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    _this9 = _super18.call(this, property || layout.property || 'variant');\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n\n    _this9.layout = layout;\n    return _this9;\n  }\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n\n  _createClass(UnionLayoutDiscriminator, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return this.layout.encode(src, b, offset);\n    }\n  }]);\n\n  return UnionLayoutDiscriminator;\n}(UnionDiscriminator);\n\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Union = /*#__PURE__*/function (_Layout16) {\n  _inherits(Union, _Layout16);\n\n  var _super19 = _createSuper(Union);\n\n  function Union(discr, defaultLayout, property) {\n    var _this10;\n\n    _classCallCheck(this, Union);\n\n    var discriminator;\n\n    if (discr instanceof UInt || discr instanceof UIntBE) {\n      discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discriminator = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    } else {\n      discriminator = discr;\n    }\n\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n\n\n    var span = -1;\n\n    if (defaultLayout) {\n      span = defaultLayout.span;\n\n      if (0 <= span && (discr instanceof UInt || discr instanceof UIntBE)) {\n        span += discriminator.layout.span;\n      }\n    }\n\n    _this10 = _super19.call(this, span, property);\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n\n    _this10.discriminator = discriminator;\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n\n    _this10.usesPrefixDiscriminator = discr instanceof UInt || discr instanceof UIntBE;\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n\n    _this10.defaultLayout = defaultLayout;\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n\n    _this10.registry = {};\n    /* Private variable used when invoking getSourceVariant */\n\n    var boundGetSourceVariant = _this10.defaultGetSourceVariant.bind(_assertThisInitialized(_this10));\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n\n\n    _this10.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n\n\n    _this10.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n\n    return _this10;\n  }\n  /** @override */\n\n\n  _createClass(Union, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        return this.span;\n      }\n      /* Default layouts always have non-negative span, so we don't have\n       * one and we have to recognize the variant which will in turn\n       * determine the span. */\n\n\n      var vlo = this.getVariant(b, offset);\n\n      if (!vlo) {\n        throw new Error('unable to determine span for unrecognized variant');\n      }\n\n      return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n\n  }, {\n    key: \"defaultGetSourceVariant\",\n    value: function defaultGetSourceVariant(src) {\n      if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n        if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n          return undefined;\n        }\n\n        var vlo = this.registry[src[this.discriminator.property]];\n\n        if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {\n          return vlo;\n        }\n      } else {\n        for (var tag in this.registry) {\n          var _vlo = this.registry[tag];\n\n          if (_vlo.property && Object.prototype.hasOwnProperty.call(src, _vlo.property)) {\n            return _vlo;\n          }\n        }\n      }\n\n      throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest;\n      var dlo = this.discriminator;\n      var discr = dlo.decode(b, offset);\n      var clo = this.registry[discr];\n\n      if (undefined === clo) {\n        var defaultLayout = this.defaultLayout;\n        var contentOffset = 0;\n\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n\n        dest = this.makeDestinationObject();\n        dest[dlo.property] = discr; // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n      } else {\n        dest = clo.decode(b, offset);\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var vlo = this.getSourceVariant(src);\n\n      if (undefined === vlo) {\n        var dlo = this.discriminator; // this.defaultLayout is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        var clo = this.defaultLayout;\n        var contentOffset = 0;\n\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n\n        dlo.encode(src[dlo.property], b, offset); // clo.property is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n      }\n\n      return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n\n  }, {\n    key: \"addVariant\",\n    value: function addVariant(variant, layout, property) {\n      var rv = new VariantLayout(this, variant, layout, property);\n      this.registry[variant] = rv;\n      return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(vb) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var variant;\n\n      if (vb instanceof Uint8Array) {\n        variant = this.discriminator.decode(vb, offset);\n      } else {\n        variant = vb;\n      }\n\n      return this.registry[variant];\n    }\n  }]);\n\n  return Union;\n}(Layout);\n\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\n\nvar VariantLayout = /*#__PURE__*/function (_Layout17) {\n  _inherits(VariantLayout, _Layout17);\n\n  var _super20 = _createSuper(VariantLayout);\n\n  function VariantLayout(union, variant, layout, property) {\n    var _this11;\n\n    _classCallCheck(this, VariantLayout);\n\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n\n    var span = union.span;\n\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n\n    _this11 = _super20.call(this, span, property);\n    /** The {@link Union} to which this variant belongs. */\n\n    _this11.union = union;\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n\n    _this11.variant = variant;\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n\n    _this11.layout = layout || null;\n    return _this11;\n  }\n  /** @override */\n\n\n  _createClass(VariantLayout, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (0 <= this.span) {\n        /* Will be equal to the containing union span if that is not\n         * variable. */\n        return this.span;\n      }\n\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      /* Span is defined solely by the variant (and prefix discriminator) */\n\n\n      var span = 0;\n\n      if (this.layout) {\n        span = this.layout.getSpan(b, offset + contentOffset);\n      }\n\n      return contentOffset + span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest = this.makeDestinationObject();\n\n      if (this !== this.union.getVariant(b, offset)) {\n        throw new Error('variant mismatch');\n      }\n\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n\n      if (this.layout) {\n        dest[this.property] = this.layout.decode(b, offset + contentOffset);\n      } else if (this.property) {\n        dest[this.property] = true;\n      } else if (this.union.usesPrefixDiscriminator) {\n        dest[this.union.discriminator.property] = this.variant;\n      }\n\n      return dest;\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n\n      if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {\n        throw new TypeError('variant lacks property ' + this.property);\n      }\n\n      this.union.discriminator.encode(this.variant, b, offset);\n      var span = contentOffset;\n\n      if (this.layout) {\n        this.layout.encode(src[this.property], b, offset + contentOffset);\n        span += this.layout.getSpan(b, offset + contentOffset);\n\n        if (0 <= this.union.span && span > this.union.span) {\n          throw new Error('encoded variant overruns containing union');\n        }\n      }\n\n      return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      if (this.layout) {\n        return this.layout.fromArray(values);\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return VariantLayout;\n}(Layout);\n\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\n\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n\n  return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar BitStructure = /*#__PURE__*/function (_Layout18) {\n  _inherits(BitStructure, _Layout18);\n\n  var _super21 = _createSuper(BitStructure);\n\n  function BitStructure(word, msb, property) {\n    var _this12;\n\n    _classCallCheck(this, BitStructure);\n\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = false;\n    }\n\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n\n    _this12 = _super21.call(this, word.span, property);\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n\n    _this12.word = word;\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n\n    _this12.msb = !!msb;\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n\n    _this12.fields = [];\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n\n    var value = 0;\n\n    _this12._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n\n    _this12._packedGetValue = function () {\n      return value;\n    };\n\n    return _this12;\n  }\n  /** @override */\n\n\n  _createClass(BitStructure, [{\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var dest = this.makeDestinationObject();\n      var value = this.word.decode(b, offset);\n\n      this._packedSetValue(value);\n\n      var _iterator7 = _createForOfIteratorHelper(this.fields),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var fd = _step7.value;\n\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(b);\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var value = this.word.decode(b, offset);\n\n      this._packedSetValue(value);\n\n      var _iterator8 = _createForOfIteratorHelper(this.fields),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var fd = _step8.value;\n\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n\n            if (undefined !== fv) {\n              fd.encode(fv);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n\n  }, {\n    key: \"addField\",\n    value: function addField(bits, property) {\n      var bf = new BitField(this, bits, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n\n  }, {\n    key: \"addBoolean\",\n    value: function addBoolean(property) {\n      // This is my Boolean, not the Javascript one.\n      var bf = new Boolean(this, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n\n  }, {\n    key: \"fieldFor\",\n    value: function fieldFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var _iterator9 = _createForOfIteratorHelper(this.fields),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var fd = _step9.value;\n\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return BitStructure;\n}(Layout);\n\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\n\nvar BitField = /*#__PURE__*/function () {\n  function BitField(container, bits, property) {\n    _classCallCheck(this, BitField);\n\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n\n    var totalBits = 8 * container.span;\n    var usedBits = container.fields.reduce(function (sum, fd) {\n      return sum + fd.bits;\n    }, 0);\n\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n\n\n    this.container = container;\n    /** The span of this value in bits. */\n\n    this.bits = bits;\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n\n    this.valueMask = (1 << bits) - 1;\n\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n\n\n    this.start = usedBits;\n\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n\n\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n\n\n  _createClass(BitField, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      var word = this.container._packedGetValue();\n\n      var wordValue = fixBitwiseResult(word & this.wordMask);\n      var value = wordValue >>> this.start;\n      return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if ('number' !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n        throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n      }\n\n      var word = this.container._packedGetValue();\n\n      var wordValue = fixBitwiseResult(value << this.start);\n\n      this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n    }\n  }]);\n\n  return BitField;\n}();\n\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n\n/* eslint-disable no-extend-native */\n\nvar Boolean = /*#__PURE__*/function (_BitField) {\n  _inherits(Boolean, _BitField);\n\n  var _super22 = _createSuper(Boolean);\n\n  function Boolean(container, property) {\n    _classCallCheck(this, Boolean);\n\n    return _super22.call(this, container, 1, property);\n  }\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n\n\n  _createClass(Boolean, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return !!_get(_getPrototypeOf(Boolean.prototype), \"decode\", this).call(this, b, offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if ('boolean' === typeof value) {\n        // BitField requires integer values\n        value = +value;\n      }\n\n      _get(_getPrototypeOf(Boolean.prototype), \"encode\", this).call(this, value);\n    }\n  }]);\n\n  return Boolean;\n}(BitField);\n\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Blob = /*#__PURE__*/function (_Layout19) {\n  _inherits(Blob, _Layout19);\n\n  var _super23 = _createSuper(Blob);\n\n  function Blob(length, property) {\n    var _this13;\n\n    _classCallCheck(this, Blob);\n\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n\n    _this13 = _super23.call(this, span, property);\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n\n    _this13.length = length;\n    return _this13;\n  }\n  /** @override */\n\n\n  _createClass(Blob, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      var span = this.span;\n\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.span;\n\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n\n      return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      var span = this.length;\n\n      if (this.length instanceof ExternalLayout) {\n        span = src.length;\n      }\n\n      if (!(src instanceof Uint8Array && span === src.length)) {\n        throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');\n      }\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Uint8Array');\n      }\n\n      var srcBuffer = uint8ArrayToBuffer(src);\n      uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n\n      if (this.length instanceof ExternalLayout) {\n        this.length.encode(span, b, offset);\n      }\n\n      return span;\n    }\n  }]);\n\n  return Blob;\n}(Layout);\n\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar CString = /*#__PURE__*/function (_Layout20) {\n  _inherits(CString, _Layout20);\n\n  var _super24 = _createSuper(CString);\n\n  function CString(property) {\n    _classCallCheck(this, CString);\n\n    return _super24.call(this, -1, property);\n  }\n  /** @override */\n\n\n  _createClass(CString, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      var idx = offset;\n\n      while (idx < b.length && 0 !== b[idx]) {\n        idx += 1;\n      }\n\n      return 1 + idx - offset;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.getSpan(b, offset);\n      return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n\n      var srcb = buffer_1.Buffer.from(src, 'utf8');\n      var span = srcb.length;\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n\n      var buffer = uint8ArrayToBuffer(b);\n      srcb.copy(buffer, offset);\n      buffer[offset + span] = 0;\n      return span + 1;\n    }\n  }]);\n\n  return CString;\n}(Layout);\n\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar UTF8 = /*#__PURE__*/function (_Layout21) {\n  _inherits(UTF8, _Layout21);\n\n  var _super25 = _createSuper(UTF8);\n\n  function UTF8(maxSpan, property) {\n    var _this14;\n\n    _classCallCheck(this, UTF8);\n\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    _this14 = _super25.call(this, -1, property);\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n\n    _this14.maxSpan = maxSpan;\n    return _this14;\n  }\n  /** @override */\n\n\n  _createClass(UTF8, [{\n    key: \"getSpan\",\n    value: function getSpan(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      checkUint8Array(b);\n      return b.length - offset;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var span = this.getSpan(b, offset);\n\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n\n      return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n\n      var srcb = buffer_1.Buffer.from(src, 'utf8');\n      var span = srcb.length;\n\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n\n      srcb.copy(uint8ArrayToBuffer(b), offset);\n      return span;\n    }\n  }]);\n\n  return UTF8;\n}(Layout);\n\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\nvar Constant = /*#__PURE__*/function (_Layout22) {\n  _inherits(Constant, _Layout22);\n\n  var _super26 = _createSuper(Constant);\n\n  function Constant(value, property) {\n    var _this15;\n\n    _classCallCheck(this, Constant);\n\n    _this15 = _super26.call(this, 0, property);\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n\n    _this15.value = value;\n    return _this15;\n  }\n  /** @override */\n\n\n  _createClass(Constant, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return this.value;\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      /* Constants take no space */\n      return 0;\n    }\n  }]);\n\n  return Constant;\n}(Layout);\n\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\n\nexports.greedy = function (elementSpan, property) {\n  return new GreedyCount(elementSpan, property);\n};\n/** Factory for {@link OffsetLayout}. */\n\n\nexports.offset = function (layout, offset, property) {\n  return new OffsetLayout(layout, offset, property);\n};\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\n\n\nexports.u8 = function (property) {\n  return new UInt(1, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16 = function (property) {\n  return new UInt(2, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24 = function (property) {\n  return new UInt(3, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32 = function (property) {\n  return new UInt(4, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40 = function (property) {\n  return new UInt(5, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48 = function (property) {\n  return new UInt(6, property);\n};\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64 = function (property) {\n  return new NearUInt64(property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16be = function (property) {\n  return new UIntBE(2, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24be = function (property) {\n  return new UIntBE(3, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32be = function (property) {\n  return new UIntBE(4, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40be = function (property) {\n  return new UIntBE(5, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48be = function (property) {\n  return new UIntBE(6, property);\n};\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64be = function (property) {\n  return new NearUInt64BE(property);\n};\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\n\n\nexports.s8 = function (property) {\n  return new Int(1, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16 = function (property) {\n  return new Int(2, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24 = function (property) {\n  return new Int(3, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32 = function (property) {\n  return new Int(4, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40 = function (property) {\n  return new Int(5, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48 = function (property) {\n  return new Int(6, property);\n};\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64 = function (property) {\n  return new NearInt64(property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16be = function (property) {\n  return new IntBE(2, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24be = function (property) {\n  return new IntBE(3, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32be = function (property) {\n  return new IntBE(4, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40be = function (property) {\n  return new IntBE(5, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48be = function (property) {\n  return new IntBE(6, property);\n};\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64be = function (property) {\n  return new NearInt64BE(property);\n};\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\n\n\nexports.f32 = function (property) {\n  return new Float(property);\n};\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\n\n\nexports.f32be = function (property) {\n  return new FloatBE(property);\n};\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\n\n\nexports.f64 = function (property) {\n  return new Double(property);\n};\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\n\n\nexports.f64be = function (property) {\n  return new DoubleBE(property);\n};\n/** Factory for {@link Structure} values. */\n\n\nexports.struct = function (fields, property, decodePrefixes) {\n  return new Structure(fields, property, decodePrefixes);\n};\n/** Factory for {@link BitStructure} values. */\n\n\nexports.bits = function (word, msb, property) {\n  return new BitStructure(word, msb, property);\n};\n/** Factory for {@link Sequence} values. */\n\n\nexports.seq = function (elementLayout, count, property) {\n  return new Sequence(elementLayout, count, property);\n};\n/** Factory for {@link Union} values. */\n\n\nexports.union = function (discr, defaultLayout, property) {\n  return new Union(discr, defaultLayout, property);\n};\n/** Factory for {@link UnionLayoutDiscriminator} values. */\n\n\nexports.unionLayoutDiscriminator = function (layout, property) {\n  return new UnionLayoutDiscriminator(layout, property);\n};\n/** Factory for {@link Blob} values. */\n\n\nexports.blob = function (length, property) {\n  return new Blob(length, property);\n};\n/** Factory for {@link CString} values. */\n\n\nexports.cstr = function (property) {\n  return new CString(property);\n};\n/** Factory for {@link UTF8} values. */\n\n\nexports.utf8 = function (maxSpan, property) {\n  return new UTF8(maxSpan, property);\n};\n/** Factory for {@link Constant} values. */\n\n\nexports.constant = function (value, property) {\n  return new Constant(value, property);\n};","map":{"version":3,"mappings":"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","names":["checkUint8Array","b","Uint8Array","TypeError","exports","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","undefined","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","makeDestinationObject","defineProperty","value","encode","writable","decode","ExternalLayout","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant"],"sourceRoot":"","sources":["../src/Layout.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
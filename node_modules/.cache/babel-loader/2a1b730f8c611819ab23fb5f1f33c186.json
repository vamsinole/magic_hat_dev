{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\n\nvar inherits_browser = {\n  exports: {}\n};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function () {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n\n  return res;\n}\n\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n  return res;\n}\n\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\n\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\n\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n\n  return res;\n};\n\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\n\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\n\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\n\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\n\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\n\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W; // 32 x 32bit words\n\n  for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\n\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac; // Proxy hash functions to the main object\n\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\n\nvar hash = hash$1;\nconst version$2 = \"logger/5.6.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\nconst HEX = \"0123456789abcdef\";\n\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._log(Logger.levels.DEBUG, args);\n  }\n\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._log(Logger.levels.INFO, args);\n  }\n\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._log(Logger.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n\n          break;\n        }\n\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$2);\n    }\n\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel = level;\n  }\n\n  static from(version) {\n    return new Logger(version);\n  }\n\n}\n\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.6.0\";\nconst logger = new Logger(version$1); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nconst version = \"sha2/5.6.0\";\nnew Logger(version);\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n\n}\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref => {\n        let {\n          pubkey,\n          isSigner,\n          isWritable\n        } = _ref;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner,\n          isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const newOpts = opts;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref2 => {\n        let {\n          publicKey\n        } = _ref2;\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add() {\n    for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      items[_key4] = arguments[_key4];\n    }\n\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n\n    const {\n      nonceInfo\n    } = this;\n\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n\n    const {\n      recentBlockhash\n    } = this;\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref3 => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref3;\n\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners() {\n    for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      signers[_key5] = arguments[_key5];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign() {\n    for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      signers[_key6] = arguments[_key6];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign() {\n    for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      signers[_key7] = arguments[_key7];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message) {\n    const signData = message.serialize();\n\n    for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      signers[_key8 - 1] = arguments[_key8];\n    }\n\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref4, index) => {\n      let {\n        signature\n      } = _ref4;\n\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null ? (await connection.confirmTransaction({\n    signature: signature,\n    blockhash: transaction.recentBlockhash,\n    lastValidBlockHeight: transaction.lastValidBlockHeight\n  }, options && options.commitment)).value : (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\n\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nconst u64 = bigInt(8);\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n/**\n * Compute Budget Instruction class\n */\n\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\n\n\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar objToString = Object.prototype.toString;\n\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var name in obj) {\n    keys.push(name);\n  }\n\n  return keys;\n};\n\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n\n  if (val === true) {\n    return \"true\";\n  }\n\n  if (val === false) {\n    return \"false\";\n  }\n\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n\n            i++;\n          }\n\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n\n    case \"string\":\n      return JSON.stringify(val);\n\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\n\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\n\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n}\n\nvar fetchImpl = globalThis.fetch; // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\n\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\n\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitment) {\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitment) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  } // eslint-disable-next-line no-dupe-class-members\n\n\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(rawSignature, (result, context) => {\n          subscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          done = true;\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip':\n            {\n              timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n              break;\n            }\n        }\n\n        timeoutId = setTimeout(() => resolve({\n          __type: TransactionStatus.TIMED_OUT,\n          timeoutMs\n        }), timeoutMs);\n      } else {\n        let config = strategy;\n\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n\n          resolve({\n            __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n          });\n        })();\n      }\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(rawSignature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhash(commitment) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(_ref5 => {\n        let {\n          transaction,\n          meta\n        } = _ref5;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get block height information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new Error('failed to get block production information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n\n\n  async getTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(_ref6 => {\n        let {\n          transaction,\n          meta\n        } = _ref6;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(_ref7 => {\n        let {\n          transaction,\n          meta\n        } = _ref7;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref8 => {\n      let [hash, subscription] = _ref8;\n      this._subscriptionsByHash[hash] = { ...subscription,\n        state: 'pending'\n      };\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n\n            try {\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'subscribing'\n              };\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._subscriptionsByHash[hash] = { ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              };\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'pending'\n              };\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._subscriptionsByHash[hash] = { ...subscription,\n                  state: 'unsubscribing'\n                };\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._subscriptionsByHash[hash] = { ...subscription,\n                    state: 'subscribed'\n                  };\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'unsubscribed'\n              };\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n\n}\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter(_ref9) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref9;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref10) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref10;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref11) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref11;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n/**\n * Vote account info\n */\n\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionStatus, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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","names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","assertEqual","l","r","Object","create","inherits_browserModule","inherits","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","require$$1","utils","isSurrogatePair","i","charCodeAt","length","toArray","enc","Array","isArray","slice","res","p","c","replace","push","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","sum64","buf","pos","ah","al","bh","bl","lo","hi","sum64_hi","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","concat","_update","digest","_pad","_digest","pad","bytes","t","ft_1","s","x","y","z","ch32","p32","maj32","s0_256","s1_256","g0_256","g1_256","shaCommon","require$$2","sha1_K","SHA1","call","h","W","_1","require$$3","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","sha512_K","SHA512","_512","_prepareBlock","c0_hi","g1_512_hi","c0_lo","g1_512_lo","c1_hi","c1_lo","c2_hi","g0_512_hi","c2_lo","g0_512_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","s1_512_hi","s1_512_lo","ch64_hi","ch64_lo","c4_hi","c4_lo","T1_hi","T1_lo","s0_512_hi","s0_512_lo","maj64_hi","maj64_lo","T2_hi","T2_lo","xh","xl","yh","yl","zh","zl","SHA384","_384","sha","require$$4","RIPEMD160","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","j","T","K","rh","Kh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","init","exports","sha1","sha256","sha224","sha384","sha512","ripemd160","version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","logger","isHexable","toHexString","addSlice","array","arguments","isInteger","isBytes","v","arrayify","options","result","unshift","allowMissingPrefix","substring","isHexString","hexPad","match","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","map","Map","MAX_SEED_LENGTH","isPublicKeyData","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","createWithSeed","fromPublicKey","seed","programId","createProgramAddressSync","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","isOnCurve","pubkeyData","pubkey","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","layout","item","decodeLength","size","elem","shift","encodeLength","rem_len","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signature","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","newOpts","blockhash","oldOpts","nonceInstruction","signers","add","items","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","objToString","objKeys","obj","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","globalThis","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","makeWebsocketUrl","endpoint","URL","useHttps","protocol","host","port","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetchImpl","fetchWithMiddleware","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","extra","encoding","filters","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","checkBlockHeight","getBlockHeight","_e","expiryPromise","timeoutMs","TIMED_OUT","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getBlockProduction","rest","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","simulateTransaction","transactionOrMessage","includeAccounts","originalTx","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction-constants.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/util/bigint.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../src/compute-budget.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/util/tx-expiry-custom-errors.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const newOpts = opts as TransactionBlockhashCtor;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts as TransactionCtorFields_DEPRECATED;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/tx-expiry-custom-errors';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}